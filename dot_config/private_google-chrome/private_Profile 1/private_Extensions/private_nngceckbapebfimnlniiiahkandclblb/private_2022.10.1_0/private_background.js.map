{"version":3,"file":"background.js","mappings":"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AIG,MAAMC,IACK,GAAAC,eAA2B,CACzC,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,uBAAmC,IAC9CF,GAA4BC,eAC/B,eAGc,GAAAE,qBAAiC,CAC/C,UACA,YACA,kBACA,aACA,OACA,OAGc,GAAAC,0BAAsC,CACpD,UACA,YACA,kBACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,UAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cACA,qBACA,uBACA,gBACA,gBACA,UAGc,GAAAC,cAA0B,CACxC,MACA,MACA,OACA,SACA,SACA,WACA,WACA,MACA,MACA,OACA,MACA,OACA,UACA,YACA,gBACA,gBACA,SACA,aACA,oBACA,MACA,OAGc,GAAAC,oBAAgC,CAC9C,UACA,YACA,aACA,WACA,WAKc,GAAAC,UAAY,CAAC,KAAM,KAA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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///../../libs/common/src/enums/authenticationStatus.ts","webpack:///../../libs/common/src/enums/cipherRepromptType.ts","webpack:///../../libs/common/src/enums/cipherType.ts","webpack:///../../libs/common/src/enums/stateVersion.ts","webpack:///../../libs/common/src/enums/themeType.ts","webpack:///../../libs/common/src/enums/deviceType.ts","webpack:///../../libs/common/src/factories/accountFactory.ts","webpack:///../../libs/common/src/factories/globalStateFactory.ts","webpack:///../../libs/common/src/factories/stateFactory.ts","webpack:///../../libs/common/src/models/domain/environmentUrls.ts","webpack:///../../libs/common/src/models/domain/windowState.ts","webpack:///../../libs/common/src/models/domain/globalState.ts","webpack:///../../libs/common/src/misc/utils.ts","webpack:///../../libs/common/src/models/request/deviceRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/apiTokenRequest.ts","webpack:///../../libs/common/src/models/request/identityToken/tokenRequestTwoFactor.ts","webpack:///../../libs/common/src/models/response/baseResponse.ts","webpack:///../../libs/common/src/models/response/apiKeyResponse.ts","webpack:///../../libs/common/src/models/response/attachmentResponse.ts","webpack:///../../libs/common/src/models/api/cardApi.ts","webpack:///../../libs/common/src/models/api/fieldApi.ts","webpack:///../../libs/common/src/models/api/identityApi.ts","webpack:///../../libs/common/src/models/api/loginUriApi.ts","webpack:///../../libs/common/src/models/api/loginApi.ts","webpack:///../../libs/common/src/models/api/secureNoteApi.ts","webpack:///../../libs/common/src/models/response/passwordHistoryResponse.ts","webpack:///../../libs/common/src/models/response/cipherResponse.ts","webpack:///../../libs/common/src/models/response/attachmentUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/authRequestResponse.ts","webpack:///../../libs/common/src/models/response/authentication/registerResponse.ts","webpack:///../../libs/common/src/models/response/billingResponse.ts","webpack:///../../libs/common/src/models/response/billingHistoryResponse.ts","webpack:///../../libs/common/src/models/response/billingPaymentResponse.ts","webpack:///../../libs/common/src/models/response/breachAccountResponse.ts","webpack:///../../libs/common/src/models/response/selectionReadOnlyResponse.ts","webpack:///../../libs/common/src/models/response/collectionResponse.ts","webpack:///../../libs/common/src/models/response/deviceVerificationResponse.ts","webpack:///../../libs/common/src/models/response/globalDomainResponse.ts","webpack:///../../libs/common/src/models/response/domainsResponse.ts","webpack:///../../libs/common/src/models/response/emergencyAccessResponse.ts","webpack:///../../libs/common/src/models/response/errorResponse.ts","webpack:///../../libs/common/src/models/response/eventResponse.ts","webpack:///../../libs/common/src/models/response/groupResponse.ts","webpack:///../../libs/common/src/models/response/identityCaptchaResponse.ts","webpack:///../../libs/common/src/models/response/identityTokenResponse.ts","webpack:///../../libs/common/src/models/response/identityTwoFactorResponse.ts","webpack:///../../libs/common/src/models/response/keyConnectorUserKeyResponse.ts","webpack:///../../libs/common/src/models/response/listResponse.ts","webpack:///../../libs/common/src/models/response/organizationConnectionResponse.ts","webpack:///../../libs/common/src/models/response/organizationExportResponse.ts","webpack:///../../libs/common/src/models/response/organizationSponsorshipSyncStatusResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/organizationUserBulkResponse.ts","webpack:///../../libs/common/src/models/api/permissionsApi.ts","webpack:///../../libs/common/src/models/response/organizationUserResponse.ts","webpack:///../../libs/common/src/models/response/profileOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/profileProviderResponse.ts","webpack:///../../libs/common/src/models/response/profileResponse.ts","webpack:///../../libs/common/src/models/response/paymentResponse.ts","webpack:///../../libs/common/src/models/response/planResponse.ts","webpack:///../../libs/common/src/models/response/policyResponse.ts","webpack:///../../libs/common/src/models/response/preloginResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerOrganizationResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkPublicKeyResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserBulkResponse.ts","webpack:///../../libs/common/src/models/response/provider/providerUserResponse.ts","webpack:///../../libs/common/src/models/api/sendFileApi.ts","webpack:///../../libs/common/src/models/api/sendTextApi.ts","webpack:///../../libs/common/src/models/response/sendAccessResponse.ts","webpack:///../../libs/common/src/models/response/sendFileDownloadDataResponse.ts","webpack:///../../libs/common/src/models/response/sendResponse.ts","webpack:///../../libs/common/src/models/response/sendFileUploadDataResponse.ts","webpack:///../../libs/common/src/models/response/ssoPreValidateResponse.ts","webpack:///../../libs/common/src/models/response/subscriptionResponse.ts","webpack:///../../libs/common/src/models/response/folderResponse.ts","webpack:///../../libs/common/src/models/response/syncResponse.ts","webpack:///../../libs/common/src/models/response/taxInfoResponse.ts","webpack:///../../libs/common/src/models/response/taxRateResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorAuthenticatorResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorDuoResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorEmailResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorProviderResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorRescoverResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorWebAuthnResponse.ts","webpack:///../../libs/common/src/models/response/twoFactorYubiKeyResponse.ts","webpack:///../../libs/common/src/models/response/userKeyResponse.ts","webpack:///../../libs/common/src/enums/htmlStorageLocation.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/appId.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/misc/throttle.ts","webpack:///../../libs/common/src/enums/authenticationType.ts","webpack:///../../libs/common/src/enums/keySuffixOptions.ts","webpack:///../../libs/common/src/enums/twoFactorProviderType.ts","webpack:///../../libs/common/src/enums/encryptionType.ts","webpack:///../../libs/common/src/models/data/server-config.data.ts","webpack:///../../libs/common/src/models/domain/encString.ts","webpack:///../../libs/common/src/models/domain/symmetricCryptoKey.ts","webpack:///../../libs/common/src/models/domain/account.ts","webpack:///../../libs/common/src/models/domain/authResult.ts","webpack:///../../libs/common/src/models/request/keysRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/logIn.strategy.ts","webpack:///../../libs/common/src/enums/hashPurpose.ts","webpack:///../../libs/common/src/misc/logInStrategies/apiLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/passwordTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/passwordLogin.strategy.ts","webpack:///../../libs/common/src/misc/logInStrategies/passwordlessLogin.strategy.ts","webpack:///../../libs/common/src/models/request/identityToken/ssoTokenRequest.ts","webpack:///../../libs/common/src/misc/logInStrategies/ssoLogin.strategy.ts","webpack:///../../libs/common/src/models/request/preloginRequest.ts","webpack:///../../libs/common/src/services/auth.service.ts","webpack:///../../libs/common/src/enums/fieldType.ts","webpack:///../../libs/common/src/enums/uriMatchType.ts","webpack:///../../libs/common/src/misc/sequentialize.ts","webpack:///../../libs/common/src/models/data/attachmentData.ts","webpack:///../../libs/common/src/models/data/cardData.ts","webpack:///../../libs/common/src/models/data/fieldData.ts","webpack:///../../libs/common/src/models/data/identityData.ts","webpack:///../../libs/common/src/models/data/loginUriData.ts","webpack:///../../libs/common/src/models/data/loginData.ts","webpack:///../../libs/common/src/models/data/passwordHistoryData.ts","webpack:///../../libs/common/src/models/data/secureNoteData.ts","webpack:///../../libs/common/src/models/data/cipherData.ts","webpack:///../../libs/common/src/models/view/attachmentView.ts","webpack:///../../libs/common/src/models/domain/domainBase.ts","webpack:///../../libs/common/src/enums/linkedIdType.ts","webpack:///../../libs/common/src/models/domain/attachment.ts","webpack:///../../libs/common/src/misc/linkedFieldOption.decorator.ts","webpack:///../../libs/common/src/models/view/itemView.ts","webpack:///../../libs/common/src/models/view/cardView.ts","webpack:///../../libs/common/src/models/domain/card.ts","webpack:///../../libs/common/src/models/view/fieldView.ts","webpack:///../../libs/common/src/models/view/identityView.ts","webpack:///../../libs/common/src/models/view/loginUriView.ts","webpack:///../../libs/common/src/models/view/loginView.ts","webpack:///../../libs/common/src/models/view/passwordHistoryView.ts","webpack:///../../libs/common/src/models/view/secureNoteView.ts","webpack:///../../libs/common/src/models/view/cipherView.ts","webpack:///../../libs/common/src/models/domain/field.ts","webpack:///../../libs/common/src/models/domain/identity.ts","webpack:///../../libs/common/src/models/domain/loginUri.ts","webpack:///../../libs/common/src/models/domain/login.ts","webpack:///../../libs/common/src/models/domain/password.ts","webpack:///../../libs/common/src/models/domain/secureNote.ts","webpack:///../../libs/common/src/models/domain/cipher.ts","webpack:///../../libs/common/src/models/domain/encArrayBuffer.ts","webpack:///../../libs/common/src/models/domain/sortedCiphersCache.ts","webpack:///../../libs/common/src/models/request/cipherBulkDeleteRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkMoveRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkRestoreRequest.ts","webpack:///../../libs/common/src/models/request/attachmentRequest.ts","webpack:///../../libs/common/src/models/request/cipherRequest.ts","webpack:///../../libs/common/src/models/request/cipherWithIdRequest.ts","webpack:///../../libs/common/src/models/request/cipherBulkShareRequest.ts","webpack:///../../libs/common/src/models/request/cipherCollectionsRequest.ts","webpack:///../../libs/common/src/models/request/cipherCreateRequest.ts","webpack:///../../libs/common/src/models/request/cipherShareRequest.ts","webpack:///../../libs/common/src/services/cipher.service.ts","webpack:///../../libs/common/src/models/domain/treeNode.ts","webpack:///../../libs/common/src/misc/serviceUtils.ts","webpack:///../../libs/common/src/models/data/collectionData.ts","webpack:///../../libs/common/src/models/view/collectionView.ts","webpack:///../../libs/common/src/models/domain/collection.ts","webpack:///../../libs/common/src/services/collection.service.ts","webpack:///../../libs/common/src/enums/logLevelType.ts","webpack:///../../libs/common/src/services/consoleLog.service.ts","webpack:///../../libs/common/src/services/container.service.ts","webpack:///../../libs/common/src/models/domain/encryptedObject.ts","webpack:///../../libs/common/src/services/encrypt.service.ts","webpack:///../../libs/common/src/models/data/eventData.ts","webpack:///../../libs/common/src/models/request/eventRequest.ts","webpack:///../../libs/common/src/services/event.service.ts","webpack:///../../libs/common/src/enums/kdfType.ts","webpack:///../../libs/common/src/models/export/cardExport.ts","webpack:///../../libs/common/src/models/export/fieldExport.ts","webpack:///../../libs/common/src/models/export/identityExport.ts","webpack:///../../libs/common/src/models/export/loginUriExport.ts","webpack:///../../libs/common/src/models/export/loginExport.ts","webpack:///../../libs/common/src/enums/secureNoteType.ts","webpack:///../../libs/common/src/enums/eventType.ts","webpack:///../../libs/common/src/models/export/secureNoteExport.ts","webpack:///../../libs/common/src/models/export/cipherExport.ts","webpack:///../../libs/common/src/models/export/cipherWithIdsExport.ts","webpack:///../../libs/common/src/models/export/collectionExport.ts","webpack:///../../libs/common/src/models/export/collectionWithIdExport.ts","webpack:///../../libs/common/src/models/export/eventExport.ts","webpack:///../../libs/common/src/models/view/folderView.ts","webpack:///../../libs/common/src/models/domain/folder.ts","webpack:///../../libs/common/src/models/export/folderExport.ts","webpack:///../../libs/common/src/models/export/folderWithIdExport.ts","webpack:///../../libs/common/src/enums/fileUploadType.ts","webpack:///../../libs/common/src/services/export.service.ts","webpack:///../../libs/common/src/services/azureFileUpload.service.ts","webpack:///../../libs/common/src/services/bitwardenFileUpload.service.ts","webpack:///../../libs/common/src/services/fileUpload.service.ts","webpack:///../../libs/common/src/models/data/folderData.ts","webpack:///../../libs/common/src/models/request/folderRequest.ts","webpack:///../../libs/common/src/enums/organizationUserType.ts","webpack:///../../libs/common/src/services/folder/folder-api.service.ts","webpack:///../../libs/common/src/models/request/account/setKeyConnectorKeyRequest.ts","webpack:///../../libs/common/src/models/request/keyConnectorUserKeyRequest.ts","webpack:///../../libs/common/src/services/keyConnector.service.ts","webpack:///../../libs/common/src/abstractions/storage.service.ts","webpack:///../../libs/common/src/services/memoryStorage.service.ts","webpack:///../../libs/common/src/enums/notificationType.ts","webpack:///../../libs/common/src/models/response/notificationResponse.ts","webpack:///../../libs/common/src/enums/organizationUserStatusType.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/models/domain/organization.ts","webpack:///../../libs/common/src/services/organization.service.ts","webpack:///../../libs/common/src/enums/policyType.ts","webpack:///../../libs/common/src/misc/wordlist.ts","webpack:///../../libs/common/src/models/domain/generatedPasswordHistory.ts","webpack:///../../libs/common/src/models/domain/passwordGeneratorPolicyOptions.ts","webpack:///../../libs/common/src/services/passwordGeneration.service.ts","webpack:///../../libs/common/src/models/data/policyData.ts","webpack:///../../libs/common/src/models/domain/policy.ts","webpack:///../../libs/common/src/services/policy/policy-api.service.ts","webpack:///../../libs/common/src/models/domain/masterPasswordPolicyOptions.ts","webpack:///../../libs/common/src/models/domain/resetPasswordPolicyOptions.ts","webpack:///../../libs/common/src/enums/providerUserStatusType.ts","webpack:///../../libs/common/src/enums/providerUserType.ts","webpack:///../../libs/common/src/services/policy/policy.service.ts","webpack:///../../libs/common/src/models/domain/provider.ts","webpack:///../../libs/common/src/services/provider.service.ts","webpack:///../../libs/common/src/enums/sendType.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/models/data/sendFileData.ts","webpack:///../../libs/common/src/models/data/sendTextData.ts","webpack:///../../libs/common/src/models/data/sendData.ts","webpack:///../../libs/common/src/models/view/sendFileView.ts","webpack:///../../libs/common/src/models/view/sendTextView.ts","webpack:///../../libs/common/src/models/view/sendView.ts","webpack:///../../libs/common/src/models/domain/sendFile.ts","webpack:///../../libs/common/src/models/domain/sendText.ts","webpack:///../../libs/common/src/models/domain/send.ts","webpack:///../../libs/common/src/models/request/sendRequest.ts","webpack:///../../libs/common/src/services/send.service.ts","webpack:///../../libs/common/src/services/settings.service.ts","webpack:///../../libs/common/src/services/token.service.ts","webpack:///../../libs/common/src/services/stateMigration.service.ts","webpack:///../../libs/common/src/models/data/organizationData.ts","webpack:///../../libs/common/src/models/data/providerData.ts","webpack:///../../libs/common/src/services/sync/sync.service.ts","webpack:///../../libs/common/src/services/system.service.ts","webpack:///../../libs/common/src/services/totp.service.ts","webpack:///../../libs/common/src/services/twoFactor.service.ts","webpack:///../../libs/common/src/enums/verificationType.ts","webpack:///../../libs/common/src/services/userVerification/userVerification-api.service.ts","webpack:///../../libs/common/src/models/request/account/verifyOTPRequest.ts","webpack:///../../libs/common/src/models/request/secretVerificationRequest.ts","webpack:///../../libs/common/src/services/userVerification/userVerification.service.ts","webpack:///../../libs/common/src/emailForwarders/anonAddyForwarder.ts","webpack:///../../libs/common/src/emailForwarders/duckDuckGoForwarder.ts","webpack:///../../libs/common/src/emailForwarders/fastmailForwarder.ts","webpack:///../../libs/common/src/emailForwarders/firefoxRelayForwarder.ts","webpack:///../../libs/common/src/emailForwarders/forwarderOptions.ts","webpack:///../../libs/common/src/emailForwarders/simpleLoginForwarder.ts","webpack:///../../libs/common/src/services/usernameGeneration.service.ts","webpack:///../../libs/common/src/services/vaultTimeout/vaultTimeoutSettings.service.ts","webpack:///../../libs/common/src/models/domain/decryptParameters.ts","webpack:///../../libs/common/src/services/webCryptoFunction.service.ts","webpack:///./src/browser/browserApi.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/popup/services/popup-utils.service.ts","webpack:///./src/models/autofillScript.ts","webpack:///./src/services/autofillConstants.ts","webpack:///./src/services/autofill.service.ts","webpack:///./src/services/browser-environment.service.ts","webpack:///../../libs/common/src/services/environment.service.ts","webpack:///../../libs/common/src/models/domain/encryptedOrganizationKey.ts","webpack:///../../libs/common/src/services/crypto.service.ts","webpack:///./src/services/browserCrypto.service.ts","webpack:///../../libs/common/src/enums/clientType.ts","webpack:///./src/services/abstractChromeStorageApi.service.ts","webpack:///./src/services/browserLocalStorage.service.ts","webpack:///./src/services/browserMessaging.service.ts","webpack:///./src/services/browserMessagingPrivateModeBackground.service.ts","webpack:///./src/services/browserPlatformUtils.service.ts","webpack:///../../libs/common/src/enums/storageLocation.ts","webpack:///../../libs/common/src/models/domain/state.ts","webpack:///../../libs/common/src/services/state.service.ts","webpack:///./src/services/state.service.ts","webpack:///./src/decorators/session-sync-observable/session-syncer.ts","webpack:///./src/decorators/session-sync-observable/sync-item-metadata.ts","webpack:///./src/decorators/session-sync-observable/session-sync.decorator.ts","webpack:///./src/services/folders/folder.service.ts","webpack:///../../libs/common/src/services/folder/folder.service.ts","webpack:///./src/decorators/session-sync-observable/browser-session.decorator.ts","webpack:///./src/services/i18n.service.ts","webpack:///../../libs/common/src/services/i18n.service.ts","webpack:///./src/services/keyGeneration.service.ts","webpack:///./src/services/browserMemoryStorage.service.ts","webpack:///./src/services/localBackedSessionStorage.service.ts","webpack:///./src/decorators/dev-flag.decorator.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/abstractions/state.service.ts","webpack:///../../libs/common/src/abstractions/organization.service.ts","webpack:///../../libs/common/src/abstractions/folder/folder.service.abstraction.ts","webpack:///../../libs/common/src/abstractions/cipher.service.ts","webpack:///../../libs/common/src/abstractions/collection.service.ts","webpack:///../../libs/common/src/abstractions/policy/policy.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/services/vault-filter.service.ts","webpack:///./src/services/vaultFilter.service.ts","webpack:///./src/services/vaultTimeout/vaultTimeout.service.ts","webpack:///../../libs/common/src/services/vaultTimeout/vaultTimeout.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/contextMenus.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/background/models/notificationQueueMessageType.ts","webpack:///./src/background/notification.background.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/background/tabs.background.ts","webpack:///./src/background/webRequest.background.ts","webpack:///./src/background/main.background.ts","webpack:///../../libs/common/src/abstractions/messaging.service.ts","webpack:///../../libs/common/src/services/noopEvent.service.ts","webpack:///./src/commands/autoFillActiveTabCommand.ts","webpack:///./src/listeners/onCommandListener.ts","webpack:///./src/background/service_factories/factory-options.ts","webpack:///./src/background/service_factories/log-service.factory.ts","webpack:///./src/background/service_factories/crypto-function-service.factory.ts","webpack:///./src/background/service_factories/storage-service.factory.ts","webpack:///./src/background/service_factories/encrypt-service.factory.ts","webpack:///./src/background/service_factories/key-generation-service.factory.ts","webpack:///./src/background/service_factories/state-service.factory.ts","webpack:///./src/background/service_factories/state-migration-service.factory.ts","webpack:///./src/background.ts","webpack:///./src/listeners/onInstallListener.ts","webpack:///./src/background/service_factories/environment-service.factory.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum StateVersion {\n  One = 1, // Original flat key/value pair store\n  Two = 2, // Move to a typed State object\n  Three = 3, // Fix migration of users' premium status\n  Four = 4, // Fix 'Never Lock' option by removing stale data\n  Five = 5, // Migrate to new storage of encrypted organization keys\n  Six = 6, // Delete account.keys.legacyEtmKey property\n  Latest = Six,\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/globalState\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/globalState\";\n\nimport { AccountFactory } from \"./accountFactory\";\nimport { GlobalStateFactory } from \"./globalStateFactory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nexport class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n\n  static fromJSON(obj: Jsonify<EnvironmentUrls>): EnvironmentUrls {\n    return Object.assign(new EnvironmentUrls(), obj);\n  }\n}\n","export class WindowState {\n  width?: number;\n  height?: number;\n  isMaximized?: boolean;\n  // TODO: displayBounds is an Electron.Rectangle.\n  // We need to establish some kind of client-specific global state, similiar to the way we already extend a base Account.\n  displayBounds: any;\n  x?: number;\n  y?: number;\n}\n","import { StateVersion } from \"../../enums/stateVersion\";\nimport { ThemeType } from \"../../enums/themeType\";\n\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { WindowState } from \"./windowState\";\n\nexport class GlobalState {\n  enableAlwaysOnTop?: boolean;\n  installedVersion?: string;\n  locale?: string;\n  organizationInvitation?: any;\n  ssoCodeVerifier?: string;\n  ssoOrganizationIdentifier?: string;\n  ssoState?: string;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  window?: WindowState = new WindowState();\n  twoFactorToken?: string;\n  disableFavicon?: boolean;\n  biometricAwaitingAcceptance?: boolean;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBiometrics?: boolean;\n  biometricText?: string;\n  noAutoPromptBiometrics?: boolean;\n  noAutoPromptBiometricsText?: string;\n  stateVersion: StateVersion = StateVersion.One;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n  enableDuckDuckGoBrowserIntegration?: boolean;\n}\n","/* eslint-disable no-useless-escape */\nimport * as tldjs from \"tldjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\ndeclare global {\n  /* eslint-disable-next-line no-var */\n  var bitwardenContainerService: BitwardenContainerService;\n}\n\ninterface BitwardenContainerService {\n  getCryptoService: () => CryptoService;\n  getEncryptService: () => AbstractEncryptService;\n}\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: typeof global = null;\n  static tldEndingRegex =\n    /.*\\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n\n    if (Utils.isNode) {\n      Utils.global = global;\n    } else if (Utils.isBrowser) {\n      Utils.global = window;\n    } else {\n      // If it's not browser or node then it must be a service worker\n      Utils.global = self;\n    }\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = Utils.global.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return Utils.global.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"utf8\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      const encodedString = String.fromCharCode.apply(null, bytes);\n      return decodeURIComponent(escape(encodedString));\n    }\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static isGuid(id: string) {\n    return RegExp(\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,\n      \"i\"\n    ).test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.hostname !== \"\" ? url.hostname : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    let httpUrl = uriString.startsWith(\"http://\") || uriString.startsWith(\"https://\");\n    if (\n      !httpUrl &&\n      uriString.indexOf(\"://\") < 0 &&\n      Utils.tldEndingRegex.test(uriString) &&\n      uriString.indexOf(\"@\") < 0\n    ) {\n      uriString = \"http://\" + uriString;\n      httpUrl = true;\n    }\n\n    if (httpUrl) {\n      try {\n        const url = Utils.getUrlObject(uriString);\n        const validHostname = tldjs?.isValid != null ? tldjs.isValid(url.hostname) : true;\n        if (!validHostname) {\n          return null;\n        }\n\n        if (url.hostname === \"localhost\" || Utils.validIpAddress(url.hostname)) {\n          return url.hostname;\n        }\n\n        const urlDomain =\n          tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(url.hostname) : null;\n        return urlDomain != null ? urlDomain : url.hostname;\n      } catch (e) {\n        // Invalid domain, try another approach below.\n      }\n    }\n\n    try {\n      const domain = tldjs != null && tldjs.getDomain != null ? tldjs.getDomain(uriString) : null;\n\n      if (domain != null) {\n        return domain;\n      }\n    } catch {\n      return null;\n    }\n\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1])\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction(i18nService: I18nService, prop: string) {\n    return (a: any, b: any) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop], b[prop])\n        : a[prop].localeCompare(b[prop]);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (uriString == null) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n    if (uriString === \"\") {\n      return null;\n    }\n\n    let url = Utils.getUrlObject(uriString);\n    if (url == null) {\n      const hasHttpProtocol =\n        uriString.indexOf(\"http://\") === 0 || uriString.indexOf(\"https://\") === 0;\n      if (!hasHttpProtocol && uriString.indexOf(\".\") > -1) {\n        url = Utils.getUrlObject(\"http://\" + uriString);\n      }\n    }\n    return url;\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  /**\n   * There are a few ways to calculate text color for contrast, this one seems to fit accessibility guidelines best.\n   * https://stackoverflow.com/a/3943023/6869691\n   *\n   * @param {string} bgColor\n   * @param {number} [threshold] see stackoverflow link above\n   * @param {boolean} [svgTextFill]\n   * Indicates if this method is performed on an SVG <text> 'fill' attribute (e.g. <text fill=\"black\"></text>).\n   * This check is necessary because the '!important' tag cannot be used in a 'fill' attribute.\n   */\n  static pickTextColorBasedOnBgColor(bgColor: string, threshold = 186, svgTextFill = false) {\n    const bgColorHexNums = bgColor.charAt(0) === \"#\" ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(bgColorHexNums.substring(0, 2), 16); // hexToR\n    const g = parseInt(bgColorHexNums.substring(2, 4), 16); // hexToG\n    const b = parseInt(bgColorHexNums.substring(4, 6), 16); // hexToB\n    const blackColor = svgTextFill ? \"black\" : \"black !important\";\n    const whiteColor = svgTextFill ? \"white\" : \"white !important\";\n    return r * 0.299 + g * 0.587 + b * 0.114 > threshold ? blackColor : whiteColor;\n  }\n\n  static stringToColor(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color;\n  }\n\n  /**\n   * @throws Will throw an error if the ContainerService has not been attached to the window object\n   */\n  static getContainerService(): BitwardenContainerService {\n    if (this.global.bitwardenContainerService == null) {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n    return this.global.bitwardenContainerService;\n  }\n\n  private static validIpAddress(ipString: string): boolean {\n    const ipRegex =\n      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return ipRegex.test(ipString);\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4)\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      } else if (typeof URL === \"function\") {\n        return new URL(uriString);\n      } else if (typeof window !== \"undefined\") {\n        const hasProtocol = uriString.indexOf(\"://\") > -1;\n        if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n          uriString = \"http://\" + uriString;\n        } else if (!hasProtocol) {\n          return null;\n        }\n        const anchor = window.document.createElement(\"a\");\n        anchor.href = uriString;\n        return anchor as any;\n      }\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { DeviceType } from \"../../enums/deviceType\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n  protected passwordlessAuthRequest: string;\n\n  constructor(protected twoFactor: TokenRequestTwoFactor, device?: DeviceRequest) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenRequestTwoFactor) {\n    this.twoFactor = twoFactor;\n  }\n\n  setPasswordlessAccessCode(accessCode: string) {\n    this.passwordlessAuthRequest = accessCode;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    //passswordless login\n    if (this.passwordlessAuthRequest) {\n      obj.authRequest = this.passwordlessAuthRequest;\n    }\n\n    if (this.twoFactor.token && this.twoFactor.provider != null) {\n      obj.twoFactorToken = this.twoFactor.token;\n      obj.twoFactorProvider = this.twoFactor.provider;\n      obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n    }\n\n    return obj;\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class ApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n}\n","import { TwoFactorProviderType } from \"../../../enums/twoFactorProviderType\";\n\nexport class TokenRequestTwoFactor {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false\n  ) {}\n}\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nimport { LoginUriApi } from \"./loginUriApi\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { BaseResponse } from \"../response/baseResponse\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nimport { AttachmentResponse } from \"./attachmentResponse\";\nimport { BaseResponse } from \"./baseResponse\";\nimport { PasswordHistoryResponse } from \"./passwordHistoryResponse\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { DeviceType } from \"@bitwarden/common/enums/deviceType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class AuthRequestResponse extends BaseResponse {\n  id: string;\n  publicKey: string;\n  requestDeviceType: DeviceType;\n  requestIpAddress: string;\n  key: string;\n  masterPasswordHash: string;\n  creationDate: string;\n  requestApproved: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n    this.requestDeviceType = this.getResponseProperty(\"RequestDeviceType\");\n    this.requestIpAddress = this.getResponseProperty(\"RequestIpAddress\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.masterPasswordHash = this.getResponseProperty(\"MasterPasswordHash\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.requestApproved = this.getResponseProperty(\"RequestApproved\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nimport { ICaptchaProtectedResponse } from \"./ICaptchaProtectedResponse\";\n\nexport class RegisterResponse extends BaseResponse implements ICaptchaProtectedResponse {\n  captchaBypassToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaBypassToken = this.getResponseProperty(\"CaptchaBypassToken\");\n  }\n}\n","import { PaymentMethodType } from \"../../enums/paymentMethodType\";\nimport { TransactionType } from \"../../enums/transactionType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billingResponse\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { BillingSourceResponse } from \"./billingResponse\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n  }\n}\n\nexport class CollectionGroupDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\"\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\"\n    );\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { GlobalDomainResponse } from \"./globalDomainResponse\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d)\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { EmergencyAccessStatusType } from \"../../enums/emergencyAccessStatusType\";\nimport { EmergencyAccessType } from \"../../enums/emergencyAccessType\";\nimport { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\n\nexport class EmergencyAccessGranteeDetailsResponse extends BaseResponse {\n  id: string;\n  granteeId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.granteeId = this.getResponseProperty(\"GranteeId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessGrantorDetailsResponse extends BaseResponse {\n  id: string;\n  grantorId: string;\n  name: string;\n  email: string;\n  type: EmergencyAccessType;\n  status: EmergencyAccessStatusType;\n  waitTimeDays: number;\n  creationDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.grantorId = this.getResponseProperty(\"GrantorId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.waitTimeDays = this.getResponseProperty(\"WaitTimeDays\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n\nexport class EmergencyAccessTakeoverResponse extends BaseResponse {\n  keyEncrypted: string;\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n\nexport class EmergencyAccessViewResponse extends BaseResponse {\n  keyEncrypted: string;\n  ciphers: CipherResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    this.keyEncrypted = this.getResponseProperty(\"KeyEncrypted\");\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (status === 429) {\n      this.message = \"Rate limit exceeded. Try again later.\";\n    } else if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { DeviceType } from \"../../enums/deviceType\";\nimport { EventType } from \"../../enums/eventType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class GroupResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  accessAll: boolean;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class GroupDetailsResponse extends GroupResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  forcePasswordReset: boolean;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","import { OrganizationConnectionType } from \"../../enums/organizationConnectionType\";\nimport { BillingSyncConfigApi } from \"../api/billingSyncConfigApi\";\nimport { ScimConfigApi } from \"../api/scimConfigApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi | ScimConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionResponse } from \"./collectionResponse\";\nimport { ListResponse } from \"./listResponse\";\n\nexport class OrganizationExportResponse extends BaseResponse {\n  collections: ListResponse<CollectionResponse>;\n  ciphers: ListResponse<CipherResponse>;\n\n  constructor(response: any) {\n    super(response);\n    this.collections = this.getResponseProperty(\"Collections\");\n    this.ciphers = this.getResponseProperty(\"Ciphers\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class OrganizationUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `createNewCollections`, `editAnyCollection`, and\n   * `deleteAnyCollection`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAllCollections: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  /**\n   * @deprecated Sep 29 2021: This permission has been split out to `editAssignedCollections` and\n   * `deleteAssignedCollections`. It exists here for backwards compatibility with Server versions <= 1.43.0\n   */\n  manageAssignedCollections: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    // For backwards compatibility with Server <= 1.43.0\n    this.manageAllCollections = this.getResponseProperty(\"ManageAllCollections\");\n    this.manageAssignedCollections = this.getResponseProperty(\"ManageAssignedCollections\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n    this.manageScim = this.getResponseProperty(\"ManageScim\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SelectionReadOnlyResponse } from \"./selectionReadOnlyResponse\";\n\nexport class OrganizationUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n    this.accessAll = this.getResponseProperty(\"AccessAll\");\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n  }\n}\n\nexport class OrganizationUserUserDetailsResponse extends OrganizationUserResponse {\n  name: string;\n  email: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n  }\n}\n\nexport class OrganizationUserDetailsResponse extends OrganizationUserResponse {\n  collections: SelectionReadOnlyResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new SelectionReadOnlyResponse(c));\n    }\n  }\n}\n\nexport class OrganizationUserResetPasswordDetailsReponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  resetPasswordKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.resetPasswordKey = this.getResponseProperty(\"ResetPasswordKey\");\n    this.encryptedPrivateKey = this.getResponseProperty(\"EncryptedPrivateKey\");\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useScim = this.getResponseProperty(\"UseScim\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\"\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\"\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileOrganizationResponse } from \"./profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"./profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"./profileProviderResponse\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o)\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { PlanType } from \"../../enums/planType\";\nimport { ProductType } from \"../../enums/productType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  baseSeats: number;\n  baseStorageGb: number;\n  maxCollections: number;\n  maxUsers: number;\n\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasPremiumAccessOption: boolean;\n  trialPeriodDays: number;\n\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripeStoragePlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  additionalStoragePricePerGb: number;\n  premiumAccessOptionPrice: number;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxUsers = this.getResponseProperty(\"MaxUsers\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"SortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { KdfType } from \"../../enums/kdfType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n  userCount: number;\n  seats?: number;\n  plan?: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.userCount = this.getResponseProperty(\"UserCount\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.plan = this.getResponseProperty(\"Plan\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../organizationUserBulkPublicKeyResponse\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { ProviderUserStatusType } from \"../../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../../enums/providerUserType\";\nimport { PermissionsApi } from \"../../api/permissionsApi\";\nimport { BaseResponse } from \"../baseResponse\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../response/baseResponse\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { FileUploadType } from \"../../enums/fileUploadType\";\n\nimport { BaseResponse } from \"./baseResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n  usingInAppPurchase: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    this.usingInAppPurchase = this.getResponseProperty(\"UsingInAppPurchase\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialEndDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\nimport { CipherResponse } from \"./cipherResponse\";\nimport { CollectionDetailsResponse } from \"./collectionResponse\";\nimport { DomainsResponse } from \"./domainsResponse\";\nimport { FolderResponse } from \"./folderResponse\";\nimport { PolicyResponse } from \"./policyResponse\";\nimport { ProfileResponse } from \"./profileResponse\";\nimport { SendResponse } from \"./sendResponse\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { Utils } from \"../../misc/utils\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"./baseResponse\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","import { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { DeviceType } from \"../enums/deviceType\";\nimport { OrganizationConnectionType } from \"../enums/organizationConnectionType\";\nimport { Utils } from \"../misc/utils\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { BitPayInvoiceRequest } from \"../models/request/bitPayInvoiceRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { DeleteRecoverRequest } from \"../models/request/deleteRecoverRequest\";\nimport { DeviceRequest } from \"../models/request/deviceRequest\";\nimport { DeviceVerificationRequest } from \"../models/request/deviceVerificationRequest\";\nimport { EmailRequest } from \"../models/request/emailRequest\";\nimport { EmailTokenRequest } from \"../models/request/emailTokenRequest\";\nimport { EmergencyAccessAcceptRequest } from \"../models/request/emergencyAccessAcceptRequest\";\nimport { EmergencyAccessConfirmRequest } from \"../models/request/emergencyAccessConfirmRequest\";\nimport { EmergencyAccessInviteRequest } from \"../models/request/emergencyAccessInviteRequest\";\nimport { EmergencyAccessPasswordRequest } from \"../models/request/emergencyAccessPasswordRequest\";\nimport { EmergencyAccessUpdateRequest } from \"../models/request/emergencyAccessUpdateRequest\";\nimport { EventRequest } from \"../models/request/eventRequest\";\nimport { GroupRequest } from \"../models/request/groupRequest\";\nimport { IapCheckRequest } from \"../models/request/iapCheckRequest\";\nimport { ApiTokenRequest } from \"../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KdfRequest } from \"../models/request/kdfRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { OrganizationSponsorshipCreateRequest } from \"../models/request/organization/organizationSponsorshipCreateRequest\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../models/request/organization/organizationSponsorshipRedeemRequest\";\nimport { OrganizationConnectionRequest } from \"../models/request/organizationConnectionRequest\";\nimport { OrganizationImportRequest } from \"../models/request/organizationImportRequest\";\nimport { OrganizationUserAcceptRequest } from \"../models/request/organizationUserAcceptRequest\";\nimport { OrganizationUserBulkConfirmRequest } from \"../models/request/organizationUserBulkConfirmRequest\";\nimport { OrganizationUserBulkRequest } from \"../models/request/organizationUserBulkRequest\";\nimport { OrganizationUserConfirmRequest } from \"../models/request/organizationUserConfirmRequest\";\nimport { OrganizationUserInviteRequest } from \"../models/request/organizationUserInviteRequest\";\nimport { OrganizationUserResetPasswordEnrollmentRequest } from \"../models/request/organizationUserResetPasswordEnrollmentRequest\";\nimport { OrganizationUserResetPasswordRequest } from \"../models/request/organizationUserResetPasswordRequest\";\nimport { OrganizationUserUpdateGroupsRequest } from \"../models/request/organizationUserUpdateGroupsRequest\";\nimport { OrganizationUserUpdateRequest } from \"../models/request/organizationUserUpdateRequest\";\nimport { PasswordHintRequest } from \"../models/request/passwordHintRequest\";\nimport { PasswordRequest } from \"../models/request/passwordRequest\";\nimport { PasswordlessCreateAuthRequest } from \"../models/request/passwordlessCreateAuthRequest\";\nimport { PaymentRequest } from \"../models/request/paymentRequest\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ProviderAddOrganizationRequest } from \"../models/request/provider/providerAddOrganizationRequest\";\nimport { ProviderOrganizationCreateRequest } from \"../models/request/provider/providerOrganizationCreateRequest\";\nimport { ProviderSetupRequest } from \"../models/request/provider/providerSetupRequest\";\nimport { ProviderUpdateRequest } from \"../models/request/provider/providerUpdateRequest\";\nimport { ProviderUserAcceptRequest } from \"../models/request/provider/providerUserAcceptRequest\";\nimport { ProviderUserBulkConfirmRequest } from \"../models/request/provider/providerUserBulkConfirmRequest\";\nimport { ProviderUserBulkRequest } from \"../models/request/provider/providerUserBulkRequest\";\nimport { ProviderUserConfirmRequest } from \"../models/request/provider/providerUserConfirmRequest\";\nimport { ProviderUserInviteRequest } from \"../models/request/provider/providerUserInviteRequest\";\nimport { ProviderUserUpdateRequest } from \"../models/request/provider/providerUserUpdateRequest\";\nimport { RegisterRequest } from \"../models/request/registerRequest\";\nimport { SecretVerificationRequest } from \"../models/request/secretVerificationRequest\";\nimport { SelectionReadOnlyRequest } from \"../models/request/selectionReadOnlyRequest\";\nimport { SendAccessRequest } from \"../models/request/sendAccessRequest\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { SetPasswordRequest } from \"../models/request/setPasswordRequest\";\nimport { StorageRequest } from \"../models/request/storageRequest\";\nimport { TaxInfoUpdateRequest } from \"../models/request/taxInfoUpdateRequest\";\nimport { TwoFactorEmailRequest } from \"../models/request/twoFactorEmailRequest\";\nimport { TwoFactorProviderRequest } from \"../models/request/twoFactorProviderRequest\";\nimport { TwoFactorRecoveryRequest } from \"../models/request/twoFactorRecoveryRequest\";\nimport { UpdateDomainsRequest } from \"../models/request/updateDomainsRequest\";\nimport { UpdateKeyRequest } from \"../models/request/updateKeyRequest\";\nimport { UpdateProfileRequest } from \"../models/request/updateProfileRequest\";\nimport { UpdateTempPasswordRequest } from \"../models/request/updateTempPasswordRequest\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../models/request/updateTwoFactorAuthenticatorRequest\";\nimport { UpdateTwoFactorDuoRequest } from \"../models/request/updateTwoFactorDuoRequest\";\nimport { UpdateTwoFactorEmailRequest } from \"../models/request/updateTwoFactorEmailRequest\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../models/request/updateTwoFactorWebAuthnDeleteRequest\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../models/request/updateTwoFactorWebAuthnRequest\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../models/request/updateTwoFactorYubioOtpRequest\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verifyDeleteRecoverRequest\";\nimport { VerifyEmailRequest } from \"../models/request/verifyEmailRequest\";\nimport { ApiKeyResponse } from \"../models/response/apiKeyResponse\";\nimport { AttachmentResponse } from \"../models/response/attachmentResponse\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { AuthRequestResponse } from \"../models/response/authRequestResponse\";\nimport { RegisterResponse } from \"../models/response/authentication/registerResponse\";\nimport { BillingHistoryResponse } from \"../models/response/billingHistoryResponse\";\nimport { BillingPaymentResponse } from \"../models/response/billingPaymentResponse\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport {\n  CollectionGroupDetailsResponse,\n  CollectionResponse,\n} from \"../models/response/collectionResponse\";\nimport { DeviceVerificationResponse } from \"../models/response/deviceVerificationResponse\";\nimport { DomainsResponse } from \"../models/response/domainsResponse\";\nimport {\n  EmergencyAccessGranteeDetailsResponse,\n  EmergencyAccessGrantorDetailsResponse,\n  EmergencyAccessTakeoverResponse,\n  EmergencyAccessViewResponse,\n} from \"../models/response/emergencyAccessResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { EventResponse } from \"../models/response/eventResponse\";\nimport { GroupDetailsResponse, GroupResponse } from \"../models/response/groupResponse\";\nimport { IdentityCaptchaResponse } from \"../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\nimport { KeyConnectorUserKeyResponse } from \"../models/response/keyConnectorUserKeyResponse\";\nimport { ListResponse } from \"../models/response/listResponse\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"../models/response/organizationConnectionResponse\";\nimport { OrganizationExportResponse } from \"../models/response/organizationExportResponse\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../models/response/organizationSponsorshipSyncStatusResponse\";\nimport { OrganizationUserBulkPublicKeyResponse } from \"../models/response/organizationUserBulkPublicKeyResponse\";\nimport { OrganizationUserBulkResponse } from \"../models/response/organizationUserBulkResponse\";\nimport {\n  OrganizationUserDetailsResponse,\n  OrganizationUserResetPasswordDetailsReponse,\n  OrganizationUserUserDetailsResponse,\n} from \"../models/response/organizationUserResponse\";\nimport { PaymentResponse } from \"../models/response/paymentResponse\";\nimport { PlanResponse } from \"../models/response/planResponse\";\nimport { PolicyResponse } from \"../models/response/policyResponse\";\nimport { PreloginResponse } from \"../models/response/preloginResponse\";\nimport { ProfileResponse } from \"../models/response/profileResponse\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../models/response/provider/providerOrganizationResponse\";\nimport { ProviderResponse } from \"../models/response/provider/providerResponse\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../models/response/provider/providerUserBulkPublicKeyResponse\";\nimport { ProviderUserBulkResponse } from \"../models/response/provider/providerUserBulkResponse\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../models/response/provider/providerUserResponse\";\nimport { SelectionReadOnlyResponse } from \"../models/response/selectionReadOnlyResponse\";\nimport { SendAccessResponse } from \"../models/response/sendAccessResponse\";\nimport { SendFileDownloadDataResponse } from \"../models/response/sendFileDownloadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SsoPreValidateResponse } from \"../models/response/ssoPreValidateResponse\";\nimport { SubscriptionResponse } from \"../models/response/subscriptionResponse\";\nimport { SyncResponse } from \"../models/response/syncResponse\";\nimport { TaxInfoResponse } from \"../models/response/taxInfoResponse\";\nimport { TaxRateResponse } from \"../models/response/taxRateResponse\";\nimport { TwoFactorAuthenticatorResponse } from \"../models/response/twoFactorAuthenticatorResponse\";\nimport { TwoFactorDuoResponse } from \"../models/response/twoFactorDuoResponse\";\nimport { TwoFactorEmailResponse } from \"../models/response/twoFactorEmailResponse\";\nimport { TwoFactorProviderResponse } from \"../models/response/twoFactorProviderResponse\";\nimport { TwoFactorRecoverResponse } from \"../models/response/twoFactorRescoverResponse\";\nimport {\n  TwoFactorWebAuthnResponse,\n  ChallengeResponse,\n} from \"../models/response/twoFactorWebAuthnResponse\";\nimport { TwoFactorYubiKeyResponse } from \"../models/response/twoFactorYubiKeyResponse\";\nimport { UserKeyResponse } from \"../models/response/userKeyResponse\";\nimport { SendAccessView } from \"../models/view/sendAccessView\";\n\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof ApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        await this.tokenService.clearTwoFactorToken();\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  async postAuthRequest(request: PasswordlessCreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/\", request, false, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthResponse(id: string, accessCode: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}/response?code=${accessCode}`;\n    const r = await this.send(\"GET\", path, null, false, true);\n    return new AuthRequestResponse(r);\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  async postRegister(request: RegisterRequest): Promise<RegisterResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      true,\n      this.platformUtilsService.isDev()\n        ? this.environmentService.getIdentityUrl()\n        : this.environmentService.getApiUrl()\n    );\n    return new RegisterResponse(r);\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  async postIapCheck(request: IapCheckRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/iap-check\", request, true, false);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  postCancelPremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/cancel-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountKey(request: UpdateKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/key\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, false);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<void> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Send APIs\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.send(\"GET\", \"/sends/\" + sendId + \"/file/\" + fileId, null, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.send(\"PUT\", \"/sends/\" + id + \"/remove-password\", null, true, true);\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getFullCipherDetails(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/details\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkDeleteRequest\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionDetails(\n    organizationId: string,\n    id: string\n  ): Promise<CollectionGroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new CollectionGroupDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest\n  ): Promise<CollectionResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true\n    );\n    return new CollectionResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[]\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupDetails(organizationId: string, id: string): Promise<GroupDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/details\",\n      null,\n      true,\n      true\n    );\n    return new GroupDetailsResponse(r);\n  }\n\n  async getGroups(organizationId: string): Promise<ListResponse<GroupResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, GroupResponse);\n  }\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async postGroup(organizationId: string, request: GroupRequest): Promise<GroupResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/groups\",\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroup(\n    organizationId: string,\n    id: string,\n    request: GroupRequest\n  ): Promise<GroupResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      request,\n      true,\n      true\n    );\n    return new GroupResponse(r);\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteGroup(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Organization User APIs\n\n  async getOrganizationUser(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserDetailsResponse(r);\n  }\n\n  async getOrganizationUserGroups(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      null,\n      true,\n      true\n    );\n    return r;\n  }\n\n  async getOrganizationUsers(\n    organizationId: string\n  ): Promise<ListResponse<OrganizationUserUserDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserUserDetailsResponse);\n  }\n\n  async getOrganizationUserResetPasswordDetails(\n    organizationId: string,\n    id: string\n  ): Promise<OrganizationUserResetPasswordDetailsReponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password-details\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationUserResetPasswordDetailsReponse(r);\n  }\n\n  postOrganizationUserInvite(\n    organizationId: string,\n    request: OrganizationUserInviteRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/invite\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserReinvite(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyOrganizationUserReinvite(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  postOrganizationUserAccept(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postOrganizationUserConfirm(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postOrganizationUsersPublicKey(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkPublicKeyResponse);\n  }\n\n  async postOrganizationUserBulkConfirm(\n    organizationId: string,\n    request: OrganizationUserBulkConfirmRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  putOrganizationUser(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserGroups(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserUpdateGroupsRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/groups\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPasswordEnrollment(\n    organizationId: string,\n    userId: string,\n    request: OrganizationUserResetPasswordEnrollmentRequest\n  ): Promise<void> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + userId + \"/reset-password-enrollment\",\n      request,\n      true,\n      false\n    );\n  }\n\n  putOrganizationUserResetPassword(\n    organizationId: string,\n    id: string,\n    request: OrganizationUserResetPasswordRequest\n  ): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/reset-password\",\n      request,\n      true,\n      false\n    );\n  }\n\n  deleteOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/users\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  revokeOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/revoke\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async revokeManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/revoke\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  restoreOrganizationUser(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/\" + id + \"/restore\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async restoreManyOrganizationUsers(\n    organizationId: string,\n    request: OrganizationUserBulkRequest\n  ): Promise<ListResponse<OrganizationUserBulkResponse>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/users/restore\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, OrganizationUserBulkResponse);\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans/\", null, false, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Emergency Access APIs\n\n  async getEmergencyAccessTrusted(): Promise<ListResponse<EmergencyAccessGranteeDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/trusted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGranteeDetailsResponse);\n  }\n\n  async getEmergencyAccessGranted(): Promise<ListResponse<EmergencyAccessGrantorDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/granted\", null, true, true);\n    return new ListResponse(r, EmergencyAccessGrantorDetailsResponse);\n  }\n\n  async getEmergencyAccess(id: string): Promise<EmergencyAccessGranteeDetailsResponse> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id, null, true, true);\n    return new EmergencyAccessGranteeDetailsResponse(r);\n  }\n\n  async getEmergencyGrantorPolicies(id: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.send(\"GET\", \"/emergency-access/\" + id + \"/policies\", null, true, true);\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  putEmergencyAccess(id: string, request: EmergencyAccessUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/emergency-access/\" + id, request, true, false);\n  }\n\n  deleteEmergencyAccess(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/emergency-access/\" + id, null, true, false);\n  }\n\n  postEmergencyAccessInvite(request: EmergencyAccessInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/invite\", request, true, false);\n  }\n\n  postEmergencyAccessReinvite(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reinvite\", null, true, false);\n  }\n\n  postEmergencyAccessAccept(id: string, request: EmergencyAccessAcceptRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/accept\", request, true, false);\n  }\n\n  postEmergencyAccessConfirm(id: string, request: EmergencyAccessConfirmRequest): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/confirm\", request, true, false);\n  }\n\n  postEmergencyAccessInitiate(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/initiate\", null, true, false);\n  }\n\n  postEmergencyAccessApprove(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/approve\", null, true, false);\n  }\n\n  postEmergencyAccessReject(id: string): Promise<any> {\n    return this.send(\"POST\", \"/emergency-access/\" + id + \"/reject\", null, true, false);\n  }\n\n  async postEmergencyAccessTakeover(id: string): Promise<EmergencyAccessTakeoverResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/takeover\", null, true, true);\n    return new EmergencyAccessTakeoverResponse(r);\n  }\n\n  async postEmergencyAccessPassword(\n    id: string,\n    request: EmergencyAccessPasswordRequest\n  ): Promise<any> {\n    await this.send(\"POST\", \"/emergency-access/\" + id + \"/password\", request, true, true);\n  }\n\n  async postEmergencyAccessView(id: string): Promise<EmergencyAccessViewResponse> {\n    const r = await this.send(\"POST\", \"/emergency-access/\" + id + \"/view\", null, true, true);\n    return new EmergencyAccessViewResponse(r);\n  }\n\n  // Organization APIs\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig }\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token\n      ),\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const response = await this.fetch(\n      new Request(this.environmentService.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      })\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getUserKeyFromKeyConnector(keyConnectorUrl: string): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      })\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getOrganizationExport(organizationId: string): Promise<OrganizationExportResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/export\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationExportResponse(r);\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersion()\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      })\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const decodedToken = await this.tokenService.decodeToken();\n    const response = await this.fetch(\n      new Request(this.environmentService.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      })\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        tokenResponse.refreshToken,\n        null\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n\n    const tokenRequest = new ApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenRequestTwoFactor(),\n      deviceRequest\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    await this.tokenService.setToken(response.accessToken);\n  }\n\n  async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void\n  ): Promise<any> {\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? this.environmentService.getApiUrl() : apiUrl;\n\n    const requestUrl = apiUrl + path;\n    // Prevent directory traversal from malicious paths\n    if (new URL(requestUrl).href !== requestUrl) {\n      return Promise.reject(\"Invalid request url path.\");\n    }\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    const responseType = response.headers.get(\"content-type\");\n    const responseIsJson = responseType != null && responseType.indexOf(\"application/json\") !== -1;\n    if (hasResponse && response.status === 200 && responseIsJson) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean\n  ): Promise<ErrorResponse> {\n    if (\n      authed &&\n      ((tokenError && response.status === 400) ||\n        response.status === 401 ||\n        response.status === 403)\n    ) {\n      await this.logoutCallback(true);\n      return null;\n    }\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private getCredentials(): RequestCredentials {\n    if (!this.isWebClient || this.environmentService.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { AppIdService as AppIdServiceAbstraction } from \"../abstractions/appId.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { Utils } from \"../misc/utils\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(private storageService: AbstractStorageService) {}\n\n  getAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"appId\");\n  }\n\n  getAnonymousAppId(): Promise<string> {\n    return this.makeAndGetAppId(\"anonymousAppId\");\n  }\n\n  private async makeAndGetAppId(key: string) {\n    const existingId = await this.storageService.get<string>(key, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    if (existingId != null) {\n      return existingId;\n    }\n\n    const guid = Utils.newGuid();\n    await this.storageService.save(key, guid, {\n      htmlStorageLocation: HtmlStorageLocation.Local,\n    });\n    return guid;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { throttle } from \"../misc/throttle\";\nimport { Utils } from \"../misc/utils\";\nimport { BreachAccountResponse } from \"../models/response/breachAccountResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  Api = 2,\n  Passwordless = 3,\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n","import { Jsonify } from \"type-fest\";\n\nimport {\n  ServerConfigResponse,\n  ThirdPartyServerConfigResponse,\n  EnvironmentServerConfigResponse,\n} from \"../response/server-config-response\";\n\nexport class ServerConfigData {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: string;\n\n  constructor(serverConfigResponse: Partial<ServerConfigResponse>) {\n    this.version = serverConfigResponse?.version;\n    this.gitHash = serverConfigResponse?.gitHash;\n    this.server = serverConfigResponse?.server\n      ? new ThirdPartyServerConfigData(serverConfigResponse.server)\n      : null;\n    this.utcDate = new Date().toISOString();\n    this.environment = serverConfigResponse?.environment\n      ? new EnvironmentServerConfigData(serverConfigResponse.environment)\n      : null;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfigData>): ServerConfigData {\n    return Object.assign(new ServerConfigData({}), obj, {\n      server: obj?.server ? ThirdPartyServerConfigData.fromJSON(obj.server) : null,\n      environment: obj?.environment ? EnvironmentServerConfigData.fromJSON(obj.environment) : null,\n    });\n  }\n}\n\nexport class ThirdPartyServerConfigData {\n  name: string;\n  url: string;\n\n  constructor(response: Partial<ThirdPartyServerConfigResponse>) {\n    this.name = response.name;\n    this.url = response.url;\n  }\n\n  static fromJSON(obj: Jsonify<ThirdPartyServerConfigData>): ThirdPartyServerConfigData {\n    return Object.assign(new ThirdPartyServerConfigData({}), obj);\n  }\n}\n\nexport class EnvironmentServerConfigData {\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(response: Partial<EnvironmentServerConfigResponse>) {\n    this.vault = response.vault;\n    this.api = response.api;\n    this.identity = response.identity;\n    this.notifications = response.notifications;\n    this.sso = response.sso;\n  }\n\n  static fromJSON(obj: Jsonify<EnvironmentServerConfigData>): EnvironmentServerConfigData {\n    return Object.assign(new EnvironmentServerConfigData({}), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { IEncrypted } from \"@bitwarden/common/interfaces/IEncrypted\";\n\nimport { EncryptionType } from \"../../enums/encryptionType\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncString implements IEncrypted {\n  encryptedString?: string;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string\n  ) {\n    if (data != null) {\n      this.initFromData(encryptedStringOrType as EncryptionType, data, iv, mac);\n    } else {\n      this.initFromEncryptedString(encryptedStringOrType as string);\n    }\n  }\n\n  get ivBytes(): ArrayBuffer {\n    return this.iv == null ? null : Utils.fromB64ToArray(this.iv).buffer;\n  }\n\n  get macBytes(): ArrayBuffer {\n    return this.mac == null ? null : Utils.fromB64ToArray(this.mac).buffer;\n  }\n\n  get dataBytes(): ArrayBuffer {\n    return this.data == null ? null : Utils.fromB64ToArray(this.data).buffer;\n  }\n\n  toJSON() {\n    return this.encryptedString;\n  }\n\n  static fromJSON(obj: Jsonify<EncString>): EncString {\n    return new EncString(obj);\n  }\n\n  private initFromData(encType: EncryptionType, data: string, iv: string, mac: string) {\n    if (iv != null) {\n      this.encryptedString = encType + \".\" + iv + \"|\" + data;\n    } else {\n      this.encryptedString = encType + \".\" + data;\n    }\n\n    // mac\n    if (mac != null) {\n      this.encryptedString += \"|\" + mac;\n    }\n\n    this.encryptionType = encType;\n    this.data = data;\n    this.iv = iv;\n    this.mac = mac;\n  }\n\n  private initFromEncryptedString(encryptedString: string) {\n    this.encryptedString = encryptedString as string;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const { encType, encPieces } = this.parseEncryptedString(this.encryptedString);\n    this.encryptionType = encType;\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        if (encPieces.length !== 3) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        if (encPieces.length !== 2) {\n          return;\n        }\n\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        if (encPieces.length !== 1) {\n          return;\n        }\n\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  private parseEncryptedString(encryptedString: string): {\n    encType: EncryptionType;\n    encPieces: string[];\n  } {\n    const headerPieces = encryptedString.split(\".\");\n    let encType: EncryptionType;\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = encryptedString.split(\"|\");\n      encType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    return {\n      encType,\n      encPieces,\n    };\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    try {\n      if (key == null) {\n        key = await this.getKeyForDecryption(orgId);\n      }\n      if (key == null) {\n        throw new Error(\"No key to decrypt EncString with orgId \" + orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      this.decryptedValue = await encryptService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getKeyForUserEncryption();\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { EncryptionType } from \"../../enums/encryptionType\";\n\nexport class SymmetricCryptoKey {\n  key: ArrayBuffer;\n  encKey?: ArrayBuffer;\n  macKey?: ArrayBuffer;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: ArrayBuffer, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  toJSON() {\n    // The whole object is constructed from the initial key, so just store the B64 key\n    return { keyB64: this.keyB64 };\n  }\n\n  static fromJSON(obj: Jsonify<SymmetricCryptoKey>): SymmetricCryptoKey {\n    if (obj == null) {\n      return null;\n    }\n\n    const arrayBuffer = Utils.fromB64ToArray(obj.keyB64).buffer;\n    return new SymmetricCryptoKey(arrayBuffer);\n  }\n}\n","import { Except, Jsonify } from \"type-fest\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { DeepJsonify } from \"@bitwarden/common/types/deep-jsonify\";\n\nimport { AuthenticationStatus } from \"../../enums/authenticationStatus\";\nimport { KdfType } from \"../../enums/kdfType\";\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { CollectionData } from \"../data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../data/eventData\";\nimport { FolderData } from \"../data/folderData\";\nimport { OrganizationData } from \"../data/organizationData\";\nimport { PolicyData } from \"../data/policyData\";\nimport { ProviderData } from \"../data/providerData\";\nimport { SendData } from \"../data/sendData\";\nimport { ServerConfigData } from \"../data/server-config.data\";\nimport { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { SendView } from \"../view/sendView\";\n\nimport { EncString } from \"./encString\";\nimport { EnvironmentUrls } from \"./environmentUrls\";\nimport { GeneratedPasswordHistory } from \"./generatedPasswordHistory\";\nimport { Policy } from \"./policy\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n\n  toJSON() {\n    return {\n      encrypted: this.encrypted,\n      decrypted:\n        this.decrypted instanceof ArrayBuffer\n          ? Utils.fromBufferToByteString(this.decrypted)\n          : this.decrypted,\n    };\n  }\n\n  static fromJSON<TEncrypted, TDecrypted>(\n    obj: Jsonify<EncryptionPair<Jsonify<TEncrypted>, Jsonify<TDecrypted>>>,\n    decryptedFromJson?: (decObj: Jsonify<TDecrypted> | string) => TDecrypted,\n    encryptedFromJson?: (encObj: Jsonify<TEncrypted>) => TEncrypted\n  ) {\n    if (obj == null) {\n      return null;\n    }\n\n    const pair = new EncryptionPair<TEncrypted, TDecrypted>();\n    if (obj?.encrypted != null) {\n      pair.encrypted = encryptedFromJson\n        ? encryptedFromJson(obj.encrypted)\n        : (obj.encrypted as TEncrypted);\n    }\n    if (obj?.decrypted != null) {\n      pair.decrypted = decryptedFromJson\n        ? decryptedFromJson(obj.decrypted)\n        : (obj.decrypted as TDecrypted);\n    }\n    return pair;\n  }\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n  decrypted?: TDecrypted[];\n}\n\n// This is a temporary structure to handle migrated `DataEncryptionPair` to\n//  avoid needing a data migration at this stage. It should be replaced with\n//  proper data migrations when `DataEncryptionPair` is deprecated.\nexport class TemporaryDataEncryption<TEncrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  folders? = new TemporaryDataEncryption<FolderData>();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  collections?: DataEncryptionPair<CollectionData, CollectionView> = new DataEncryptionPair<\n    CollectionData,\n    CollectionView\n  >();\n  policies?: DataEncryptionPair<PolicyData, Policy> = new DataEncryptionPair<PolicyData, Policy>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: any;\n  eventCollection?: EventData[];\n  organizations?: { [id: string]: OrganizationData };\n  providers?: { [id: string]: ProviderData };\n}\n\nexport class AccountKeys {\n  cryptoMasterKey?: SymmetricCryptoKey;\n  cryptoMasterKeyAuto?: string;\n  cryptoMasterKeyB64?: string;\n  cryptoMasterKeyBiometric?: string;\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n  organizationKeys?: EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Record<string, SymmetricCryptoKey>\n  > = new EncryptionPair<\n    { [orgId: string]: EncryptedOrganizationKeyData },\n    Record<string, SymmetricCryptoKey>\n  >();\n  providerKeys?: EncryptionPair<any, Record<string, SymmetricCryptoKey>> = new EncryptionPair<\n    any,\n    Record<string, SymmetricCryptoKey>\n  >();\n  privateKey?: EncryptionPair<string, ArrayBuffer> = new EncryptionPair<string, ArrayBuffer>();\n  publicKey?: ArrayBuffer;\n  apiKeyClientSecret?: string;\n\n  toJSON() {\n    return Object.assign(this as Except<AccountKeys, \"publicKey\">, {\n      publicKey: Utils.fromBufferToByteString(this.publicKey),\n    });\n  }\n\n  static fromJSON(obj: DeepJsonify<AccountKeys>): AccountKeys {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(\n      new AccountKeys(),\n      { cryptoMasterKey: SymmetricCryptoKey.fromJSON(obj?.cryptoMasterKey) },\n      {\n        cryptoSymmetricKey: EncryptionPair.fromJSON(\n          obj?.cryptoSymmetricKey,\n          SymmetricCryptoKey.fromJSON\n        ),\n      },\n      { organizationKeys: AccountKeys.initRecordEncryptionPairsFromJSON(obj?.organizationKeys) },\n      { providerKeys: AccountKeys.initRecordEncryptionPairsFromJSON(obj?.providerKeys) },\n      {\n        privateKey: EncryptionPair.fromJSON<string, ArrayBuffer>(\n          obj?.privateKey,\n          (decObj: string) => Utils.fromByteStringToArray(decObj).buffer\n        ),\n      },\n      {\n        publicKey: Utils.fromByteStringToArray(obj?.publicKey)?.buffer,\n      }\n    );\n  }\n\n  static initRecordEncryptionPairsFromJSON(obj: any) {\n    return EncryptionPair.fromJSON(obj, (decObj: any) => {\n      if (obj == null) {\n        return null;\n      }\n\n      const record: Record<string, SymmetricCryptoKey> = {};\n      for (const id in decObj) {\n        record[id] = SymmetricCryptoKey.fromJSON(decObj[id]);\n      }\n      return record;\n    });\n  }\n}\n\nexport class AccountProfile {\n  apiKeyClientId?: string;\n  authenticationStatus?: AuthenticationStatus;\n  convertAccountToKeyConnector?: boolean;\n  email?: string;\n  emailVerified?: boolean;\n  entityId?: string;\n  entityType?: string;\n  everBeenUnlocked?: boolean;\n  forcePasswordReset?: boolean;\n  hasPremiumPersonally?: boolean;\n  hasPremiumFromOrganization?: boolean;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfType?: KdfType;\n\n  static fromJSON(obj: Jsonify<AccountProfile>): AccountProfile {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountProfile(), obj);\n  }\n}\n\nexport class AccountSettings {\n  autoConfirmFingerPrints?: boolean;\n  autoFillOnPageLoadDefault?: boolean;\n  biometricUnlock?: boolean;\n  clearClipboard?: number;\n  collapsedGroupings?: string[];\n  defaultUriMatch?: UriMatchType;\n  disableAddLoginNotification?: boolean;\n  disableAutoBiometricsPrompt?: boolean;\n  disableAutoTotpCopy?: boolean;\n  disableBadgeCounter?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n  disableGa?: boolean;\n  dontShowCardsCurrentTab?: boolean;\n  dontShowIdentitiesCurrentTab?: boolean;\n  enableAlwaysOnTop?: boolean;\n  enableAutoFillOnPageLoad?: boolean;\n  enableBiometric?: boolean;\n  enableFullWidth?: boolean;\n  enableGravitars?: boolean;\n  environmentUrls: EnvironmentUrls = new EnvironmentUrls();\n  equivalentDomains?: any;\n  minimizeOnCopyToClipboard?: boolean;\n  neverDomains?: { [id: string]: any };\n  passwordGenerationOptions?: any;\n  usernameGenerationOptions?: any;\n  generatorOptions?: any;\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n  protectedPin?: string;\n  settings?: AccountSettingsSettings; // TODO: Merge whatever is going on here into the AccountSettings model properly\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n  serverConfig?: ServerConfigData;\n\n  static fromJSON(obj: Jsonify<AccountSettings>): AccountSettings {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountSettings(), obj, {\n      environmentUrls: EnvironmentUrls.fromJSON(obj?.environmentUrls),\n      pinProtected: EncryptionPair.fromJSON<string, EncString>(\n        obj?.pinProtected,\n        EncString.fromJSON\n      ),\n      serverConfig: ServerConfigData.fromJSON(obj?.serverConfig),\n    });\n  }\n}\n\nexport type AccountSettingsSettings = {\n  equivalentDomains?: { [id: string]: any };\n};\n\nexport class AccountTokens {\n  accessToken?: string;\n  refreshToken?: string;\n  securityStamp?: string;\n\n  static fromJSON(obj: Jsonify<AccountTokens>): AccountTokens {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountTokens(), obj);\n  }\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n    });\n  }\n\n  static fromJSON(json: Jsonify<Account>): Account {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Account({}), json, {\n      keys: AccountKeys.fromJSON(json?.keys),\n      profile: AccountProfile.fromJSON(json?.profile),\n      settings: AccountSettings.fromJSON(json?.settings),\n      tokens: AccountTokens.fromJSON(json?.tokens),\n    });\n  }\n}\n","import { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Utils } from \"../../misc/utils\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  resetMasterPassword = false;\n  forcePasswordReset = false;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../../enums/twoFactorProviderType\";\nimport { Account, AccountProfile, AccountTokens } from \"../../models/domain/account\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n  PasswordlessLogInCredentials,\n} from \"../../models/domain/logInCredentials\";\nimport { DeviceRequest } from \"../../models/request/deviceRequest\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\nimport { KeysRequest } from \"../../models/request/keysRequest\";\nimport { IdentityCaptchaResponse } from \"../../models/response/identityCaptchaResponse\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\nimport { IdentityTwoFactorResponse } from \"../../models/response/identityTwoFactorResponse\";\n\nexport abstract class LogInStrategy {\n  protected abstract tokenRequest: ApiTokenRequest | PasswordTokenRequest | SsoTokenRequest;\n  protected captchaBypassToken: string = null;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService\n  ) {}\n\n  abstract logIn(\n    credentials:\n      | ApiLogInCredentials\n      | PasswordLogInCredentials\n      | SsoLogInCredentials\n      | PasswordlessLogInCredentials\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string = null\n  ): Promise<AuthResult> {\n    this.tokenRequest.setTwoFactor(twoFactor);\n    return this.startLogIn();\n  }\n\n  protected async startLogIn(): Promise<AuthResult> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const response = await this.apiService.postIdentityToken(this.tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return this.processTwoFactorResponse(response);\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return this.processCaptchaResponse(response);\n    } else if (response instanceof IdentityTokenResponse) {\n      return this.processTokenResponse(response);\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected onSuccessfulLogin(response: IdentityTokenResponse): Promise<void> {\n    // Implemented in subclass if required\n    return null;\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  protected async buildTwoFactor(userProvidedTwoFactor?: TokenRequestTwoFactor) {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    const storedTwoFactorToken = await this.tokenService.getTwoFactorToken();\n    if (storedTwoFactorToken != null) {\n      return new TokenRequestTwoFactor(TwoFactorProviderType.Remember, storedTwoFactorToken, false);\n    }\n\n    return new TokenRequestTwoFactor();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    const accountInformation = await this.tokenService.decodeToken(tokenResponse.accessToken);\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId: accountInformation.sub,\n            email: accountInformation.email,\n            hasPremiumPersonally: accountInformation.premium,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n          ...{\n            accessToken: tokenResponse.accessToken,\n            refreshToken: tokenResponse.refreshToken,\n          },\n        },\n      })\n    );\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.resetMasterPassword = response.resetMasterPassword;\n    result.forcePasswordReset = response.forcePasswordReset;\n\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      await this.tokenService.setTwoFactorToken(response);\n    }\n\n    const newSsoUser = response.key == null;\n    if (!newSsoUser) {\n      await this.cryptoService.setEncKey(response.key);\n      await this.cryptoService.setEncPrivateKey(\n        response.privateKey ?? (await this.createKeyPairForOldAccount())\n      );\n    }\n\n    await this.onSuccessfulLogin(response);\n\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n    this.twoFactorService.setProviders(response);\n    this.captchaBypassToken = response.captchaToken ?? null;\n    return result;\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n\n  private async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../../abstractions/environment.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { ApiLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { ApiTokenRequest } from \"../../models/request/identityToken/apiTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class ApiLogInStrategy extends LogInStrategy {\n  tokenRequest: ApiTokenRequest;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    if (tokenResponse.apiUseKeyConnector) {\n      const keyConnectorUrl = this.environmentService.getKeyConnectorUrl();\n      await this.keyConnectorService.getAndSetKey(keyConnectorUrl);\n    }\n  }\n\n  async logIn(credentials: ApiLogInCredentials) {\n    this.tokenRequest = new ApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n    await this.stateService.setApiKeyClientId(this.tokenRequest.clientId);\n    await this.stateService.setApiKeyClientSecret(this.tokenRequest.clientSecret);\n  }\n}\n","import { ClientType } from \"../../../enums/clientType\";\nimport { Utils } from \"../../../misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captchaProtectedRequest\";\nimport { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { AuthService } from \"../../abstractions/auth.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { HashPurpose } from \"../../enums/hashPurpose\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport { PasswordLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class PasswordLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localHashedPassword: string;\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin() {\n    await this.cryptoService.setKey(this.key);\n    await this.cryptoService.setKeyHash(this.localHashedPassword);\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  async logIn(credentials: PasswordLogInCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    this.key = await this.authService.makePreloginKey(masterPassword, email);\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    this.localHashedPassword = await this.cryptoService.hashPassword(\n      masterPassword,\n      this.key,\n      HashPurpose.LocalAuthorization\n    );\n    const hashedPassword = await this.cryptoService.hashPassword(masterPassword, this.key);\n\n    this.tokenRequest = new PasswordTokenRequest(\n      email,\n      hashedPassword,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { AuthService } from \"../../abstractions/auth.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { AuthResult } from \"../../models/domain/authResult\";\nimport { PasswordlessLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { PasswordTokenRequest } from \"../../models/request/identityToken/passwordTokenRequest\";\nimport { TokenRequestTwoFactor } from \"../../models/request/identityToken/tokenRequestTwoFactor\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class PasswordlessLogInStrategy extends LogInStrategy {\n  get email() {\n    return this.tokenRequest.email;\n  }\n\n  get masterPasswordHash() {\n    return this.tokenRequest.masterPasswordHash;\n  }\n\n  tokenRequest: PasswordTokenRequest;\n\n  private localHashedPassword: string;\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private authService: AuthService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin() {\n    await this.cryptoService.setKey(this.key);\n    await this.cryptoService.setKeyHash(this.localHashedPassword);\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    this.tokenRequest.captchaResponse = captchaResponse ?? this.captchaBypassToken;\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  async logIn(credentials: PasswordlessLogInCredentials) {\n    this.localHashedPassword = credentials.localPasswordHash;\n    this.key = credentials.decKey;\n\n    this.tokenRequest = new PasswordTokenRequest(\n      credentials.email,\n      credentials.accessCode,\n      null,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    this.tokenRequest.setPasswordlessAccessCode(credentials.authRequestId);\n    return this.startLogIn();\n  }\n}\n","import { DeviceRequest } from \"../deviceRequest\";\n\nimport { TokenRequest } from \"./tokenRequest\";\nimport { TokenRequestTwoFactor } from \"./tokenRequestTwoFactor\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenRequestTwoFactor,\n    device?: DeviceRequest\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { AppIdService } from \"../../abstractions/appId.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { TwoFactorService } from \"../../abstractions/twoFactor.service\";\nimport { SsoLogInCredentials } from \"../../models/domain/logInCredentials\";\nimport { SsoTokenRequest } from \"../../models/request/identityToken/ssoTokenRequest\";\nimport { IdentityTokenResponse } from \"../../models/response/identityTokenResponse\";\n\nimport { LogInStrategy } from \"./logIn.strategy\";\n\nexport class SsoLogInStrategy extends LogInStrategy {\n  tokenRequest: SsoTokenRequest;\n  orgId: string;\n\n  constructor(\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    private keyConnectorService: KeyConnectorService\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService\n    );\n  }\n\n  async onSuccessfulLogin(tokenResponse: IdentityTokenResponse) {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (tokenResponse.keyConnectorUrl != null) {\n      if (!newSsoUser) {\n        await this.keyConnectorService.getAndSetKey(tokenResponse.keyConnectorUrl);\n      } else {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(tokenResponse, this.orgId);\n      }\n    }\n  }\n\n  async logIn(credentials: SsoLogInCredentials) {\n    this.orgId = credentials.orgId;\n    this.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor),\n      await this.buildDeviceRequest()\n    );\n\n    return this.startLogIn();\n  }\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KeyConnectorService } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { TwoFactorService } from \"../abstractions/twoFactor.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { AuthenticationType } from \"../enums/authenticationType\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { ApiLogInStrategy } from \"../misc/logInStrategies/apiLogin.strategy\";\nimport { PasswordLogInStrategy } from \"../misc/logInStrategies/passwordLogin.strategy\";\nimport { PasswordlessLogInStrategy } from \"../misc/logInStrategies/passwordlessLogin.strategy\";\nimport { SsoLogInStrategy } from \"../misc/logInStrategies/ssoLogin.strategy\";\nimport { AuthResult } from \"../models/domain/authResult\";\nimport {\n  ApiLogInCredentials,\n  PasswordLogInCredentials,\n  SsoLogInCredentials,\n  PasswordlessLogInCredentials,\n} from \"../models/domain/logInCredentials\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { TokenRequestTwoFactor } from \"../models/request/identityToken/tokenRequestTwoFactor\";\nimport { PreloginRequest } from \"../models/request/preloginRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { AuthRequestPushNotification } from \"../models/response/notificationResponse\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class AuthService implements AuthServiceAbstraction {\n  get email(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy ? this.logInStrategy.email : null;\n  }\n\n  get masterPasswordHash(): string {\n    return this.logInStrategy instanceof PasswordLogInStrategy\n      ? this.logInStrategy.masterPasswordHash\n      : null;\n  }\n\n  private logInStrategy:\n    | ApiLogInStrategy\n    | PasswordLogInStrategy\n    | SsoLogInStrategy\n    | PasswordlessLogInStrategy;\n  private sessionTimeout: any;\n\n  private pushNotificationSubject = new Subject<string>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService\n  ) {}\n\n  async logIn(\n    credentials:\n      | ApiLogInCredentials\n      | PasswordLogInCredentials\n      | SsoLogInCredentials\n      | PasswordlessLogInCredentials\n  ): Promise<AuthResult> {\n    this.clearState();\n\n    let strategy:\n      | ApiLogInStrategy\n      | PasswordLogInStrategy\n      | SsoLogInStrategy\n      | PasswordlessLogInStrategy;\n\n    switch (credentials.type) {\n      case AuthenticationType.Password:\n        strategy = new PasswordLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this\n        );\n        break;\n      case AuthenticationType.Sso:\n        strategy = new SsoLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this.keyConnectorService\n        );\n        break;\n      case AuthenticationType.Api:\n        strategy = new ApiLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this.environmentService,\n          this.keyConnectorService\n        );\n        break;\n      case AuthenticationType.Passwordless:\n        strategy = new PasswordlessLogInStrategy(\n          this.cryptoService,\n          this.apiService,\n          this.tokenService,\n          this.appIdService,\n          this.platformUtilsService,\n          this.messagingService,\n          this.logService,\n          this.stateService,\n          this.twoFactorService,\n          this\n        );\n        break;\n    }\n\n    const result = await strategy.logIn(credentials as any);\n\n    if (result?.requiresTwoFactor) {\n      this.saveState(strategy);\n    }\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenRequestTwoFactor,\n    captchaResponse: string\n  ): Promise<AuthResult> {\n    if (this.logInStrategy == null) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    try {\n      const result = await this.logInStrategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear state if 2FA token has been accepted, otherwise we need to be able to try again\n      if (!result.requiresTwoFactor && !result.requiresCaptcha) {\n        this.clearState();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear state to be safe\n      if (!(e instanceof ErrorResponse)) {\n        this.clearState();\n      }\n      throw e;\n    }\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n\n  authingWithApiKey(): boolean {\n    return this.logInStrategy instanceof ApiLogInStrategy;\n  }\n\n  authingWithSso(): boolean {\n    return this.logInStrategy instanceof SsoLogInStrategy;\n  }\n\n  authingWithPassword(): boolean {\n    return this.logInStrategy instanceof PasswordLogInStrategy;\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // Keys aren't stored for a device that is locked or logged out\n    // Make sure we're logged in before checking this, otherwise we could mix up those states\n    const neverLock =\n      (await this.cryptoService.hasKeyStored(KeySuffixOptions.Auto, userId)) &&\n      !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n    if (neverLock) {\n      // TODO: This also _sets_ the key so when we check memory in the next line it finds a key.\n      // We should refactor here.\n      await this.cryptoService.getKey(KeySuffixOptions.Auto, userId);\n    }\n\n    const hasKeyInMemory = await this.cryptoService.hasKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<SymmetricCryptoKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfIterations: number = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfIterations = preloginResponse.kdfIterations;\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);\n  }\n\n  async authResponsePushNotifiction(notification: AuthRequestPushNotification): Promise<any> {\n    this.pushNotificationSubject.next(notification.id);\n  }\n\n  getPushNotifcationObs$(): Observable<any> {\n    return this.pushNotificationSubject.asObservable();\n  }\n\n  private saveState(\n    strategy:\n      | ApiLogInStrategy\n      | PasswordLogInStrategy\n      | SsoLogInStrategy\n      | PasswordlessLogInStrategy\n  ) {\n    this.logInStrategy = strategy;\n    this.startSessionTimeout();\n  }\n\n  private clearState() {\n    this.logInStrategy = null;\n    this.clearSessionTimeout();\n  }\n\n  private startSessionTimeout() {\n    this.clearSessionTimeout();\n    this.sessionTimeout = setTimeout(() => this.clearState(), sessionTimeoutLength);\n  }\n\n  private clearSessionTimeout() {\n    if (this.sessionTimeout != null) {\n      clearTimeout(this.sessionTimeout);\n    }\n  }\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export enum UriMatchType {\n  Domain = 0,\n  Host = 1,\n  StartsWith = 2,\n  Exact = 3,\n  RegularExpression = 4,\n  Never = 5,\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { AttachmentResponse } from \"../response/attachmentResponse\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/cardApi\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldApi } from \"../api/fieldApi\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identityApi\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\n\nexport class LoginUriData {\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/loginApi\";\n\nimport { LoginUriData } from \"./loginUriData\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/passwordHistoryResponse\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherResponse } from \"../response/cipherResponse\";\n\nimport { AttachmentData } from \"./attachmentData\";\nimport { CardData } from \"./cardData\";\nimport { FieldData } from \"./fieldData\";\nimport { IdentityData } from \"./identityData\";\nimport { LoginData } from \"./loginData\";\nimport { PasswordHistoryData } from \"./passwordHistoryData\";\nimport { SecureNoteData } from \"./secureNoteData\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Attachment } from \"../domain/attachment\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { View } from \"./view\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<AttachmentView>>): AttachmentView {\n    const key = obj.key == null ? null : SymmetricCryptoKey.fromJSON(obj.key);\n    return Object.assign(new AttachmentView(), obj, { key: key });\n  }\n}\n","import { View } from \"../view/view\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = []\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","import { Utils } from \"../../misc/utils\";\nimport { AttachmentData } from \"../data/attachmentData\";\nimport { AttachmentView } from \"../view/attachmentView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.key != null) {\n      view.key = await this.decryptAttachmentKey(orgId, encKey);\n    }\n\n    return view;\n  }\n\n  private async decryptAttachmentKey(orgId: string, encKey?: SymmetricCryptoKey) {\n    try {\n      if (encKey == null) {\n        encKey = await this.getKeyForDecryption(orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      const decValue = await encryptService.decryptToBytes(this.key, encKey);\n      return new SymmetricCryptoKey(decValue);\n    } catch (e) {\n      // TODO: error?\n    }\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getKeyForUserEncryption();\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"]\n    );\n    return a;\n  }\n}\n","import { LinkedIdType } from \"../enums/linkedIdType\";\nimport { ItemView } from \"../models/view/itemView\";\n\nexport class LinkedMetadata {\n  constructor(readonly propertyKey: string, private readonly _i18nKey?: string) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { LinkedMetadata } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { View } from \"./view\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CardLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CardView>>): CardView {\n    return Object.assign(new CardView(), obj);\n  }\n}\n","import { CardData } from \"../data/cardData\";\nimport { CardView } from \"../view/cardView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { Field } from \"../domain/field\";\n\nimport { View } from \"./view\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<FieldView>>): FieldView {\n    return Object.assign(new FieldView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { IdentityLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<IdentityView>>): IdentityView {\n    return Object.assign(new IdentityView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchType } from \"../../enums/uriMatchType\";\nimport { Utils } from \"../../misc/utils\";\nimport { LoginUri } from \"../domain/loginUri\";\n\nimport { View } from \"./view\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class LoginUriView implements View {\n  match: UriMatchType = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchType.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchType.RegularExpression) {\n      const uri = this.launchUri;\n      for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n        if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n          this._canLaunch = true;\n          return this._canLaunch;\n        }\n      }\n    }\n    this._canLaunch = false;\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && Utils.tldEndingRegex.test(this.uri)\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginUriView>>): LoginUriView {\n    return Object.assign(new LoginUriView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { LoginLinkedId as LinkedId } from \"../../enums/linkedIdType\";\nimport { linkedFieldOption } from \"../../misc/linkedFieldOption.decorator\";\nimport { Utils } from \"../../misc/utils\";\nimport { Login } from \"../domain/login\";\n\nimport { ItemView } from \"./itemView\";\nimport { LoginUriView } from \"./loginUriView\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = null;\n  autofillOnPageLoad: boolean = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginView>>): LoginView {\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUriView.fromJSON(uri));\n\n    return Object.assign(new LoginView(), obj, {\n      passwordRevisionDate: passwordRevisionDate,\n      uris: uris,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Password } from \"../domain/password\";\n\nimport { View } from \"./view\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<PasswordHistoryView>>): PasswordHistoryView {\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new PasswordHistoryView(), obj, {\n      lastUsedDate: lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote } from \"../domain/secureNote\";\n\nimport { ItemView } from \"./itemView\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SecureNoteView>>): SecureNoteView {\n    return Object.assign(new SecureNoteView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { LocalData } from \"../data/localData\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachmentView\";\nimport { CardView } from \"./cardView\";\nimport { FieldView } from \"./fieldView\";\nimport { IdentityView } from \"./identityView\";\nimport { LoginView } from \"./loginView\";\nimport { PasswordHistoryView } from \"./passwordHistoryView\";\nimport { SecureNoteView } from \"./secureNoteView\";\nimport { View } from \"./view\";\n\nexport class CipherView implements View {\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: LocalData;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CipherView>>): CipherView {\n    const view = new CipherView();\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => AttachmentView.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => FieldView.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => PasswordHistoryView.fromJSON(ph));\n\n    Object.assign(view, obj, {\n      revisionDate: revisionDate,\n      deletedDate: deletedDate,\n      attachments: attachments,\n      fields: fields,\n      passwordHistory: passwordHistory,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        view.card = CardView.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityView.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        view.login = LoginView.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteView.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return view;\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { FieldData } from \"../data/fieldData\";\nimport { FieldView } from \"../view/fieldView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"]\n    );\n    return f;\n  }\n}\n","import { IdentityData } from \"../data/identityData\";\nimport { IdentityView } from \"../view/identityView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { LoginUriData } from \"../data/loginUriData\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  match: UriMatchType;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n      },\n      []\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        match: null,\n      },\n      [\"match\"]\n    );\n    return u;\n  }\n}\n","import { LoginData } from \"../data/loginData\";\nimport { LoginView } from \"../view/loginView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { LoginUri } from \"./loginUri\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      []\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        view.uris.push(uri);\n      }\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    return l;\n  }\n}\n","import { PasswordHistoryData } from \"../data/passwordHistoryData\";\nimport { PasswordHistoryView } from \"../view/passwordHistoryView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNoteData } from \"../data/secureNoteData\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nimport Domain from \"./domainBase\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CipherData } from \"../data/cipherData\";\nimport { LocalData } from \"../data/localData\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secureNote\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class Cipher extends Domain {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: LocalData;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(obj?: CipherData, localData: LocalData = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"]\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  async decrypt(encKey?: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    const orgId = this.organizationId;\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(orgId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(orgId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(orgId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n}\n","import { EncryptionType } from \"@bitwarden/common/enums/encryptionType\";\nimport { IEncrypted } from \"@bitwarden/common/interfaces/IEncrypted\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nconst ENC_TYPE_LENGTH = 1;\nconst IV_LENGTH = 16;\nconst MAC_LENGTH = 32;\nconst MIN_DATA_LENGTH = 1;\n\nexport class EncArrayBuffer implements IEncrypted {\n  readonly encryptionType: EncryptionType = null;\n  readonly dataBytes: ArrayBuffer = null;\n  readonly ivBytes: ArrayBuffer = null;\n  readonly macBytes: ArrayBuffer = null;\n\n  constructor(readonly buffer: ArrayBuffer) {\n    const encBytes = new Uint8Array(buffer);\n    const encType = encBytes[0];\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH).buffer;\n        this.macBytes = encBytes.slice(\n          ENC_TYPE_LENGTH + IV_LENGTH,\n          ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH\n        ).buffer;\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH).buffer;\n        break;\n      }\n      case EncryptionType.AesCbc256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH).buffer;\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH).buffer;\n        break;\n      }\n      default:\n        this.throwDecryptionError();\n    }\n\n    this.encryptionType = encType;\n  }\n\n  private throwDecryptionError() {\n    throw new Error(\n      \"Error parsing encrypted ArrayBuffer: data is corrupted or has an invalid format.\"\n    );\n  }\n\n  static async fromResponse(response: {\n    arrayBuffer: () => Promise<ArrayBuffer>;\n  }): Promise<EncArrayBuffer> {\n    const buffer = await response.arrayBuffer();\n    if (buffer == null) {\n      throw new Error(\"Cannot create EncArrayBuffer from Response - Response is empty\");\n    }\n    return new EncArrayBuffer(buffer);\n  }\n\n  static fromB64(b64: string) {\n    const buffer = Utils.fromB64ToArray(b64).buffer;\n    return new EncArrayBuffer(buffer);\n  }\n}\n","import { CipherView } from \"../view/cipherView\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL)\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf()\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { CardApi } from \"../api/cardApi\";\nimport { FieldApi } from \"../api/fieldApi\";\nimport { IdentityApi } from \"../api/identityApi\";\nimport { LoginApi } from \"../api/loginApi\";\nimport { LoginUriApi } from \"../api/loginUriApi\";\nimport { SecureNoteApi } from \"../api/secureNoteApi\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachmentRequest\";\nimport { PasswordHistoryRequest } from \"./passwordHistoryRequest\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris = null;\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.uris != null) {\n          this.login.uris = cipher.login.uris.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            return uri;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipherWithIdRequest\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipherRequest\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService } from \"../abstractions/search.service\";\nimport { SettingsService } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { AccountSettingsSettings } from \"../models/domain/account\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport Domain from \"../models/domain/domainBase\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/loginUri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secureNote\";\nimport { SortedCiphersCache } from \"../models/domain/sortedCiphersCache\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { AttachmentRequest } from \"../models/request/attachmentRequest\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipherBulkDeleteRequest\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipherBulkMoveRequest\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipherBulkRestoreRequest\";\nimport { CipherBulkShareRequest } from \"../models/request/cipherBulkShareRequest\";\nimport { CipherCollectionsRequest } from \"../models/request/cipherCollectionsRequest\";\nimport { CipherCreateRequest } from \"../models/request/cipherCreateRequest\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CipherShareRequest } from \"../models/request/cipherShareRequest\";\nimport { CipherResponse } from \"../models/response/cipherResponse\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { AttachmentView } from \"../models/view/attachmentView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { PasswordHistoryView } from \"../models/view/passwordHistoryView\";\nimport { View } from \"../models/view/view\";\n\nconst DomainMatchBlacklist = new Map<string, Set<string>>([\n  [\"google.com\", new Set([\"script.google.com\"])],\n]);\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private settingsService: SettingsService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private searchService: () => SearchService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    await this.stateService.setDecryptedCiphers(value);\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService().clearIndex();\n      } else {\n        this.searchService().indexCiphers();\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher: Cipher = null\n  ): Promise<Cipher> {\n    // Adjust password history\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        const existingCipher = await originalCipher.decrypt();\n        model.passwordHistory = existingCipher.passwordHistory || [];\n        if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n          if (\n            existingCipher.login.password != null &&\n            existingCipher.login.password !== \"\" &&\n            existingCipher.login.password !== model.login.password\n          ) {\n            const ph = new PasswordHistoryView();\n            ph.password = existingCipher.login.password;\n            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n            model.passwordHistory.splice(0, 0, ph);\n          } else {\n            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n          }\n        }\n        if (existingCipher.hasFields) {\n          const existingHiddenFields = existingCipher.fields.filter(\n            (f) =>\n              f.type === FieldType.Hidden &&\n              f.name != null &&\n              f.name !== \"\" &&\n              f.value != null &&\n              f.value !== \"\"\n          );\n          const hiddenFields =\n            model.fields == null\n              ? []\n              : model.fields.filter(\n                  (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\"\n                );\n          existingHiddenFields.forEach((ef) => {\n            const matchedField = hiddenFields.find((f) => f.name === ef.name);\n            if (matchedField == null || matchedField.value !== ef.value) {\n              const ph = new PasswordHistoryView();\n              ph.password = ef.name + \": \" + ef.value;\n              ph.lastUsedDate = new Date();\n              model.passwordHistory.splice(0, 0, ph);\n            }\n          });\n        }\n      }\n      if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n        model.passwordHistory = null;\n      } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n        // only save last 5 history\n        model.passwordHistory = model.passwordHistory.slice(0, 5);\n      }\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n\n    if (key == null && cipher.organizationId != null) {\n      key = await this.cryptoService.getOrgKey(cipher.organizationId);\n      if (key == null) {\n        throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n      }\n    }\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    const userId = await this.stateService.getUserId();\n    if ((await this.getDecryptedCipherCache()) != null) {\n      if (\n        this.searchService != null &&\n        (this.searchService().indexedEntityId ?? userId) !== userId\n      ) {\n        await this.searchService().indexCiphers(userId, await this.getDecryptedCipherCache());\n      }\n      return await this.getDecryptedCipherCache();\n    }\n\n    const decCiphers: CipherView[] = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<number>[] = [];\n    const ciphers = await this.getAll();\n    ciphers.forEach(async (cipher) => {\n      promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n    });\n\n    await Promise.all(promises);\n    decCiphers.sort(this.getLocaleSortingFunction());\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchType = null\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const domain = Utils.getDomain(url);\n    const eqDomainsPromise =\n      domain == null\n        ? Promise.resolve([])\n        : firstValueFrom(this.settingsService.settings$).then(\n            (settings: AccountSettingsSettings) => {\n              let matches: any[] = [];\n              settings.equivalentDomains?.forEach((eqDomain: any) => {\n                if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {\n                  matches = matches.concat(eqDomain);\n                }\n              });\n\n              if (!matches.length) {\n                matches.push(domain);\n              }\n\n              return matches;\n            }\n          );\n\n    const result = await Promise.all([eqDomainsPromise, this.getAllDecrypted()]);\n    const matchingDomains = result[0];\n    const ciphers = result[1];\n\n    if (defaultMatch == null) {\n      defaultMatch = await this.stateService.getDefaultUriMatch();\n      if (defaultMatch == null) {\n        defaultMatch = UriMatchType.Domain;\n      }\n    }\n\n    return ciphers.filter((cipher) => {\n      if (cipher.deletedDate != null) {\n        return false;\n      }\n      if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {\n        return true;\n      }\n\n      if (url != null && cipher.type === CipherType.Login && cipher.login.uris != null) {\n        for (let i = 0; i < cipher.login.uris.length; i++) {\n          const u = cipher.login.uris[i];\n          if (u.uri == null) {\n            continue;\n          }\n\n          const match = u.match == null ? defaultMatch : u.match;\n          switch (match) {\n            case UriMatchType.Domain:\n              if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {\n                if (DomainMatchBlacklist.has(u.domain)) {\n                  const domainUrlHost = Utils.getHost(url);\n                  if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {\n                    return true;\n                  }\n                } else {\n                  return true;\n                }\n              }\n              break;\n            case UriMatchType.Host: {\n              const urlHost = Utils.getHost(url);\n              if (urlHost != null && urlHost === Utils.getHost(u.uri)) {\n                return true;\n              }\n              break;\n            }\n            case UriMatchType.Exact:\n              if (url === u.uri) {\n                return true;\n              }\n              break;\n            case UriMatchType.StartsWith:\n              if (url.startsWith(u.uri)) {\n                return true;\n              }\n              break;\n            case UriMatchType.RegularExpression:\n              try {\n                const regex = new RegExp(u.uri, \"i\");\n                if (regex.test(url)) {\n                  return true;\n                }\n              } catch (e) {\n                this.logService.error(e);\n              }\n              break;\n            case UriMatchType.Never:\n            default:\n              break;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const ciphers = await this.apiService.getCiphersOrganization(organizationId);\n    if (ciphers != null && ciphers.data != null && ciphers.data.length) {\n      const decCiphers: CipherView[] = [];\n      const promises: any[] = [];\n      ciphers.data.forEach((r) => {\n        const data = new CipherData(r);\n        const cipher = new Cipher(data);\n        promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));\n      });\n      await Promise.all(promises);\n      decCiphers.sort(this.getLocaleSortingFunction());\n      return decCiphers;\n    } else {\n      return [];\n    }\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await this.stateService.getNeverDomains();\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.stateService.setNeverDomains(domains);\n  }\n\n  async saveWithServer(cipher: Cipher): Promise<any> {\n    let response: CipherResponse;\n    if (cipher.id == null) {\n      if (cipher.collectionIds != null) {\n        const request = new CipherCreateRequest(cipher);\n        response = await this.apiService.postCipherCreate(request);\n      } else {\n        const request = new CipherRequest(cipher);\n        response = await this.apiService.postCipher(request);\n      }\n      cipher.id = response.id;\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId)\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encrypt(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encrypt(cipher).then((c) => {\n          encCiphers.push(c);\n        })\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin = false\n  ): Promise<Cipher> {\n    const key = await this.cryptoService.getOrgKey(cipher.organizationId);\n    const encFileName = await this.cryptoService.encrypt(filename, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(data, dataEncKey[0]);\n\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.uploadCipherAttachment(\n        admin,\n        uploadDataResponse,\n        encFileName,\n        encData\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          admin,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1]\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteCipher(id);\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.deleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string): Promise<any> {\n    await this.apiService.putDeleteCipher(id);\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[]): Promise<any> {\n    await this.apiService.putDeleteManyCiphers(new CipherBulkDeleteRequest(ids));\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putRestoreCipher(id);\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(ids: string[]): Promise<any> {\n    const response = await this.apiService.putRestoreManyCiphers(new CipherBulkRestoreRequest(ids));\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  // Helpers\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" })\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const encBuf = await EncArrayBuffer.fromResponse(attachmentResponse);\n    const decBuf = await this.cryptoService.decryptFromBytes(encBuf, null);\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const encFileName = await this.cryptoService.encrypt(attachmentView.fileName, key);\n\n    const dataEncKey = await this.cryptoService.makeEncKey(key);\n    const encData = await this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key\n            );\n            cipher.login.uris.push(loginUri);\n          }\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.stateService.getAutoFillOnPageLoadDefault();\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false)\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  parent: T;\n  node: T;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, name: string, parent: T) {\n    this.parent = parent;\n    this.node = node;\n    this.node.name = name;\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"../models/domain/treeNode\";\n\nexport class ServiceUtils {\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: ITreeNodeObject,\n    delimiter: string\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end = partIndex === parts.length - 1;\n    const partName = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== parts[partIndex]) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node with the same name.\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i].node,\n        delimiter\n      );\n      return;\n    }\n\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      if (end) {\n        nodeTree.push(new TreeNode(obj, partName, parent));\n        return;\n      }\n      const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter\n      );\n    }\n  }\n\n  static getTreeNodeObject(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    id: string\n  ): TreeNode<ITreeNodeObject> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { CollectionDetailsResponse } from \"../response/collectionResponse\";\n\nexport class CollectionData {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n  }\n}\n","import { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\nimport { CollectionGroupDetailsResponse } from \"../response/collectionResponse\";\n\nimport { View } from \"./view\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n\n  constructor(c?: Collection | CollectionGroupDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n    }\n  }\n}\n","import { CollectionData } from \"../data/collectionData\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\"]\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId\n    );\n  }\n}\n","import { CollectionService as CollectionServiceAbstraction } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ServiceUtils } from \"../misc/serviceUtils\";\nimport { Utils } from \"../misc/utils\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCollections(null, { userId: userId });\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    const collections = await this.stateService.getEncryptedCollections();\n    // eslint-disable-next-line\n    if (collections == null || !collections.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Collection(collections[id]);\n  }\n\n  async getAll(): Promise<Collection[]> {\n    const collections = await this.stateService.getEncryptedCollections();\n    const response: Collection[] = [];\n    for (const id in collections) {\n      // eslint-disable-next-line\n      if (collections.hasOwnProperty(id)) {\n        response.push(new Collection(collections[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    let decryptedCollections = await this.stateService.getDecryptedCollections();\n    if (decryptedCollections != null) {\n      return decryptedCollections;\n    }\n\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const collections = await this.getAll();\n    decryptedCollections = await this.decryptMany(collections);\n\n    await this.stateService.setDecryptedCollections(decryptedCollections);\n    return decryptedCollections;\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObject(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(collection: CollectionData | CollectionData[]): Promise<any> {\n    let collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      collections = {};\n    }\n\n    if (collection instanceof CollectionData) {\n      const c = collection as CollectionData;\n      collections[c.id] = c;\n    } else {\n      (collection as CollectionData[]).forEach((c) => {\n        collections[c.id] = c;\n      });\n    }\n\n    await this.replace(collections);\n  }\n\n  async replace(collections: { [id: string]: CollectionData }): Promise<any> {\n    await this.clearCache();\n    await this.stateService.setEncryptedCollections(collections);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearCache(userId);\n    await this.stateService.setEncryptedCollections(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const collections = await this.stateService.getEncryptedCollections();\n    if (collections == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      delete collections[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete collections[i];\n      });\n    }\n\n    await this.replace(collections);\n  }\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","import { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/logLevelType\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\n\nexport class ContainerService {\n  constructor(\n    private cryptoService: CryptoService,\n    private encryptService: AbstractEncryptService\n  ) {}\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  /**\n   * @throws Will throw if CryptoService was not instantiated and provided to the ContainerService constructor\n   */\n  getCryptoService(): CryptoService {\n    if (this.cryptoService == null) {\n      throw new Error(\"ContainerService.cryptoService not initialized.\");\n    }\n    return this.cryptoService;\n  }\n\n  /**\n   * @throws Will throw if EncryptService was not instantiated and provided to the ContainerService constructor\n   */\n  getEncryptService(): AbstractEncryptService {\n    if (this.encryptService == null) {\n      throw new Error(\"ContainerService.encryptService not initialized.\");\n    }\n    return this.encryptService;\n  }\n}\n","import { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class EncryptedObject {\n  iv: ArrayBuffer;\n  data: ArrayBuffer;\n  mac: ArrayBuffer;\n  key: SymmetricCryptoKey;\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { EncryptedObject } from \"@bitwarden/common/models/domain/encryptedObject\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { IEncrypted } from \"../interfaces/IEncrypted\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class EncryptService implements AbstractEncryptService {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n    private logMacFailures: boolean\n  ) {}\n\n  async encrypt(plainValue: string | ArrayBuffer, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: ArrayBuffer;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue).buffer;\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes.buffer);\n  }\n\n  async decryptToUtf8(encString: EncString, key: SymmetricCryptoKey): Promise<string> {\n    if (key == null) {\n      throw new Error(\"No key provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encString);\n\n    if (key.macKey != null && encString?.mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\"\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecryptFast(fastParams);\n  }\n\n  async decryptToBytes(encThing: IEncrypted, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (encThing == null) {\n      throw new Error(\"Nothing provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encThing);\n\n    if (key.macKey != null && encThing.macBytes == null) {\n      return null;\n    }\n\n    if (key.encType !== encThing.encryptionType) {\n      return null;\n    }\n\n    if (key.macKey != null && encThing.macBytes != null) {\n      const macData = new Uint8Array(encThing.ivBytes.byteLength + encThing.dataBytes.byteLength);\n      macData.set(new Uint8Array(encThing.ivBytes), 0);\n      macData.set(new Uint8Array(encThing.dataBytes), encThing.ivBytes.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(\n        macData.buffer,\n        key.macKey,\n        \"sha256\"\n      );\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(encThing.macBytes, computedMac);\n      if (!macsMatch) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    const result = await this.cryptoFunctionService.aesDecrypt(\n      encThing.dataBytes,\n      encThing.ivBytes,\n      key.encKey\n    );\n\n    return result ?? null;\n  }\n\n  private async aesEncrypt(data: ArrayBuffer, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n\n  /**\n   * Transform into new key for the old encrypt-then-mac scheme if required, otherwise return the current key unchanged\n   * @param encThing The encrypted object (e.g. encString or encArrayBuffer) that you want to decrypt\n   */\n  resolveLegacyKey(key: SymmetricCryptoKey, encThing: IEncrypted): SymmetricCryptoKey {\n    if (\n      encThing.encryptionType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      return new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n    }\n\n    return key;\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { EventType } from \"../../enums/eventType\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { EventService as EventServiceAbstraction } from \"../abstractions/event.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EventType } from \"../enums/eventType\";\nimport { EventData } from \"../models/data/eventData\";\nimport { EventRequest } from \"../models/request/eventRequest\";\n\nexport class EventService implements EventServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private apiService: ApiService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private logService: LogService,\n    private organizationService: OrganizationService\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false,\n    organizationId: string = null\n  ): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated();\n    if (!authed) {\n      return;\n    }\n    const organizations = await this.organizationService.getAll();\n    if (organizations == null) {\n      return;\n    }\n    const orgIds = new Set<string>(organizations.filter((o) => o.useEvents).map((o) => o.id));\n    if (orgIds.size === 0) {\n      return;\n    }\n    if (cipherId != null) {\n      const cipher = await this.cipherService.get(cipherId);\n      if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {\n        return;\n      }\n    }\n    if (organizationId != null) {\n      if (!orgIds.has(organizationId)) {\n        return;\n      }\n    }\n    let eventCollection = await this.stateService.getEventCollection();\n    if (eventCollection == null) {\n      eventCollection = [];\n    }\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    event.organizationId = organizationId;\n    eventCollection.push(event);\n    await this.stateService.setEventCollection(eventCollection);\n    if (uploadImmediately) {\n      await this.uploadEvents();\n    }\n  }\n\n  async uploadEvents(userId?: string): Promise<any> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n    const eventCollection = await this.stateService.getEventCollection({ userId: userId });\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      req.organizationId = e.organizationId;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n      this.clearEvents(userId);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async clearEvents(userId?: string): Promise<any> {\n    await this.stateService.setEventCollection(null, { userId: userId });\n  }\n}\n","export enum KdfType {\n  PBKDF2_SHA256 = 0,\n}\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const DEFAULT_KDF_ITERATIONS = 100000;\nexport const SEND_KDF_ITERATIONS = 100000;\n","import { Card as CardDomain } from \"../domain/card\";\nimport { EncString } from \"../domain/encString\";\nimport { CardView } from \"../view/cardView\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { LinkedIdType } from \"../../enums/linkedIdType\";\nimport { EncString } from \"../domain/encString\";\nimport { Field as FieldDomain } from \"../domain/field\";\nimport { FieldView } from \"../view/fieldView\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Identity as IdentityDomain } from \"../domain/identity\";\nimport { IdentityView } from \"../view/identityView\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { UriMatchType } from \"../../enums/uriMatchType\";\nimport { EncString } from \"../domain/encString\";\nimport { LoginUri as LoginUriDomain } from \"../domain/loginUri\";\nimport { LoginUriView } from \"../view/loginUriView\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  match: UriMatchType = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Login as LoginDomain } from \"../domain/login\";\nimport { LoginView } from \"../view/loginView\";\n\nimport { LoginUriExport } from \"./loginUriExport\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n  OrganizationUser_Revoked = 1511,\n  OrganizationUser_Restored = 1512,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { SecureNote as SecureNoteDomain } from \"../domain/secureNote\";\nimport { SecureNoteView } from \"../view/secureNoteView\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { EncString } from \"../domain/encString\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CardExport } from \"./cardExport\";\nimport { FieldExport } from \"./fieldExport\";\nimport { IdentityExport } from \"./identityExport\";\nimport { LoginExport } from \"./loginExport\";\nimport { SecureNoteExport } from \"./secureNoteExport\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n  }\n}\n","import { Cipher as CipherDomain } from \"../domain/cipher\";\nimport { CipherView } from \"../view/cipherView\";\n\nimport { CipherExport } from \"./cipherExport\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { EncString } from \"../domain/encString\";\nimport { CollectionView } from \"../view/collectionView\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../domain/collection\";\nimport { CollectionView } from \"../view/collectionView\";\n\nimport { CollectionExport } from \"./collectionExport\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EventType } from \"../../enums/eventType\";\nimport { EventView } from \"../view/eventView\";\n\nexport class EventExport {\n  message: string;\n  appIcon: string;\n  appName: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  date: string;\n  ip: string;\n  type: string;\n  installationId: string;\n\n  constructor(event: EventView) {\n    this.message = event.humanReadableMessage;\n    this.appIcon = event.appIcon;\n    this.appName = event.appName;\n    this.userId = event.userId;\n    this.userName = event.userName;\n    this.userEmail = event.userEmail;\n    this.date = event.date;\n    this.ip = event.ip;\n    this.type = EventType[event.type];\n    this.installationId = event.installationId;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/treeNode\";\n\nimport { View } from \"./view\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderView>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new FolderView(), obj, { revisionDate });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FolderData } from \"../data/folderData\";\nimport { FolderView } from \"../view/folderView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"]\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null\n    );\n  }\n\n  static fromJSON(obj: Jsonify<Folder>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new Folder(), obj, { name: EncString.fromJSON(obj.name), revisionDate });\n  }\n}\n","import { EncString } from \"../domain/encString\";\nimport { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../domain/folder\";\nimport { FolderView } from \"../view/folderView\";\n\nimport { FolderExport } from \"./folderExport\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","import * as papa from \"papaparse\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport {\n  ExportFormat,\n  ExportService as ExportServiceAbstraction,\n} from \"../abstractions/export.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { DEFAULT_KDF_ITERATIONS, KdfType } from \"../enums/kdfType\";\nimport { Utils } from \"../misc/utils\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Collection } from \"../models/domain/collection\";\nimport { Folder } from \"../models/domain/folder\";\nimport { CipherWithIdExport as CipherExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport as CollectionExport } from \"../models/export/collectionWithIdExport\";\nimport { EventExport } from \"../models/export/eventExport\";\nimport { FolderWithIdExport as FolderExport } from \"../models/export/folderWithIdExport\";\nimport { CollectionDetailsResponse } from \"../models/response/collectionResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { EventView } from \"../models/view/eventView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nexport class ExportService implements ExportServiceAbstraction {\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", organizationId?: string): Promise<string> {\n    if (organizationId) {\n      return await this.getOrganizationExport(organizationId, format);\n    }\n\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    } else {\n      return this.getDecryptedExport(format);\n    }\n  }\n\n  async getPasswordProtectedExport(password: string, organizationId?: string): Promise<string> {\n    const clearText = organizationId\n      ? await this.getOrganizationExport(organizationId, \"json\")\n      : await this.getExport(\"json\");\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const kdfIterations = DEFAULT_KDF_ITERATIONS;\n    const key = await this.cryptoService.makePinKey(\n      password,\n      salt,\n      KdfType.PBKDF2_SHA256,\n      kdfIterations\n    );\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfIterations: kdfIterations,\n      kdfType: KdfType.PBKDF2_SHA256,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\"\n  ): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getOrganizationEncryptedExport(organizationId);\n    } else {\n      return this.getOrganizationDecryptedExport(organizationId, format);\n    }\n  }\n\n  async getEventExport(events: EventView[]): Promise<string> {\n    return papa.unparse(events.map((e) => new EventExport(e)));\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      firstValueFrom(this.folderService.folderViews$).then((folders) => {\n        decFolders = folders;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const foldersMap = new Map<string, FolderView>();\n      decFolders.forEach((f) => {\n        if (f.id != null) {\n          foldersMap.set(f.id, f);\n        }\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n        if (c.organizationId != null) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.folder =\n          c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n        cipher.favorite = c.favorite ? 1 : null;\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        folders: [],\n        items: [],\n      };\n\n      decFolders.forEach((f) => {\n        if (f.id == null) {\n          return;\n        }\n        const folder = new FolderExport();\n        folder.build(f);\n        jsonDoc.folders.push(folder);\n      });\n\n      decCiphers.forEach((c) => {\n        if (c.organizationId != null) {\n          return;\n        }\n        const cipher = new CipherExport();\n        cipher.build(c);\n        cipher.collectionIds = null;\n        jsonDoc.items.push(cipher);\n      });\n\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      firstValueFrom(this.folderService.folders$).then((f) => {\n        folders = f;\n      })\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\"\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getOrganizationExport(organizationId).then((exportData) => {\n        const exportPromises: any = [];\n        if (exportData != null) {\n          if (\n            exportData.collections != null &&\n            exportData.collections.data != null &&\n            exportData.collections.data.length > 0\n          ) {\n            exportData.collections.data.forEach((c) => {\n              const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n              exportPromises.push(\n                collection.decrypt().then((decCol) => {\n                  decCollections.push(decCol);\n                })\n              );\n            });\n          }\n          if (\n            exportData.ciphers != null &&\n            exportData.ciphers.data != null &&\n            exportData.ciphers.data.length > 0\n          ) {\n            exportData.ciphers.data\n              .filter((c) => c.deletedDate === null)\n              .forEach((c) => {\n                const cipher = new Cipher(new CipherData(c));\n                exportPromises.push(\n                  cipher.decrypt().then((decCipher) => {\n                    decCiphers.push(decCipher);\n                  })\n                );\n              });\n          }\n        }\n        return Promise.all(exportPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      const collectionsMap = new Map<string, CollectionView>();\n      decCollections.forEach((c) => {\n        collectionsMap.set(c.id, c);\n      });\n\n      const exportCiphers: any[] = [];\n      decCiphers.forEach((c) => {\n        // only export logins and secure notes\n        if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n          return;\n        }\n\n        const cipher: any = {};\n        cipher.collections = [];\n        if (c.collectionIds != null) {\n          cipher.collections = c.collectionIds\n            .filter((id) => collectionsMap.has(id))\n            .map((id) => collectionsMap.get(id).name);\n        }\n        this.buildCommonCipher(cipher, c);\n        exportCiphers.push(cipher);\n      });\n\n      return papa.unparse(exportCiphers);\n    } else {\n      const jsonDoc: any = {\n        encrypted: false,\n        collections: [],\n        items: [],\n      };\n\n      decCollections.forEach((c) => {\n        const collection = new CollectionExport();\n        collection.build(c);\n        jsonDoc.collections.push(collection);\n      });\n\n      decCiphers.forEach((c) => {\n        const cipher = new CipherExport();\n        cipher.build(c);\n        jsonDoc.items.push(cipher);\n      });\n      return JSON.stringify(jsonDoc, null, \"  \");\n    }\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        const collectionPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n        return Promise.all(collectionPromises);\n      })\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        const cipherPromises: any = [];\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n        return Promise.all(cipherPromises);\n      })\n    );\n\n    await Promise.all(promises);\n\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: any = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n\n  private buildCommonCipher(cipher: any, c: CipherView) {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f: any) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import { LogService } from \"../abstractions/log.service\";\nimport { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n      ? a.month - b.month\n      : a.day !== b.day\n      ? a.day - b.day\n      : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { Utils } from \"../misc/utils\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\n\nexport class BitwardenFileUploadService {\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"../abstractions/fileUpload.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { FileUploadType } from \"../enums/fileUploadType\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { AttachmentUploadDataResponse } from \"../models/response/attachmentUploadDataResponse\";\nimport { SendFileUploadDataResponse } from \"../models/response/sendFileUploadDataResponse\";\n\nimport { AzureFileUploadService } from \"./azureFileUpload.service\";\nimport { BitwardenFileUploadService } from \"./bitwardenFileUpload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(private logService: LogService, private apiService: ApiService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService();\n  }\n\n  async uploadSendFile(\n    uploadData: SendFileUploadDataResponse,\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) =>\n              this.apiService.postSendFile(\n                uploadData.sendResponse.id,\n                uploadData.sendResponse.file.id,\n                fd\n              )\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewSendFileUploadUrl(\n              uploadData.sendResponse.id,\n              uploadData.sendResponse.file.id\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await this.apiService.deleteSend(uploadData.sendResponse.id);\n      throw e;\n    }\n  }\n\n  async uploadCipherAttachment(\n    admin: boolean,\n    uploadData: AttachmentUploadDataResponse,\n    encryptedFileName: EncString,\n    encryptedFileData: EncArrayBuffer\n  ) {\n    const response = admin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            encryptedFileName.encryptedString,\n            encryptedFileData,\n            (fd) => this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, fd)\n          );\n          break;\n        case FileUploadType.Azure: {\n          const renewalCallback = async () => {\n            const renewalResponse = await this.apiService.renewAttachmentUploadUrl(\n              response.id,\n              uploadData.attachmentId\n            );\n            return renewalResponse.url;\n          };\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            renewalCallback\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type.\");\n      }\n    } catch (e) {\n      if (admin) {\n        await this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        await this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n      throw e;\n    }\n  }\n}\n","import { FolderResponse } from \"../response/folderResponse\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: FolderResponse) {\n    this.name = response.name;\n    this.id = response.id;\n    this.revisionDate = response.revisionDate;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"@bitwarden/common/models/data/folderData\";\nimport { Folder } from \"@bitwarden/common/models/domain/folder\";\nimport { FolderRequest } from \"@bitwarden/common/models/request/folderRequest\";\nimport { FolderResponse } from \"@bitwarden/common/models/response/folderResponse\";\n\nexport class FolderApiService implements FolderApiServiceAbstraction {\n  constructor(private folderService: InternalFolderService, private apiService: ApiService) {}\n\n  async save(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.folderService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteFolder(id);\n    await this.folderService.delete(id);\n  }\n\n  async get(id: string): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  private async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  private deleteFolder(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n}\n","import { KdfType } from \"../../../enums/kdfType\";\nimport { KeysRequest } from \"../keysRequest\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    orgIdentifier: string,\n    keys: KeysRequest\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfIterations;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/keyConnector.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { OrganizationService } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { OrganizationUserType } from \"../enums/organizationUserType\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/account/setKeyConnectorKeyRequest\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/keyConnectorUserKeyRequest\";\nimport { KeysRequest } from \"../models/request/keysRequest\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private logoutCallback: (expired: boolean, userId?: string) => void\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const key = await this.cryptoService.getKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(key.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  async getAndSetKey(url: string) {\n    try {\n      const userKeyResponse = await this.apiService.getUserKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(userKeyResponse.key);\n      const k = new SymmetricCryptoKey(keyArr);\n      await this.cryptoService.setKey(k);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    const { kdf, kdfIterations, keyConnectorUrl } = tokenResponse;\n    const password = await this.cryptoFunctionService.randomBytes(64);\n\n    const k = await this.cryptoService.makeKey(\n      Utils.fromBufferToB64(password),\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfIterations\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(k.encKeyB64);\n    await this.cryptoService.setKey(k);\n\n    const encKey = await this.cryptoService.makeEncKey(k);\n    await this.cryptoService.setEncKey(encKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      encKey[1].encryptedString,\n      kdf,\n      kdfIterations,\n      orgId,\n      keys\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","import { MemoryStorageOptions, StorageOptions } from \"../models/domain/storageOptions\";\n\nexport abstract class AbstractStorageService {\n  abstract get<T>(key: string, options?: StorageOptions): Promise<T>;\n  abstract has(key: string, options?: StorageOptions): Promise<boolean>;\n  abstract save<T>(key: string, obj: T, options?: StorageOptions): Promise<void>;\n  abstract remove(key: string, options?: StorageOptions): Promise<void>;\n}\n\nexport abstract class AbstractCachedStorageService extends AbstractStorageService {\n  abstract getBypassCache<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T>;\n}\n\nexport interface MemoryStorageServiceInterface {\n  get<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T>;\n}\n","import {\n  AbstractStorageService,\n  MemoryStorageServiceInterface,\n} from \"@bitwarden/common/abstractions/storage.service\";\n\nexport class MemoryStorageService\n  extends AbstractStorageService\n  implements MemoryStorageServiceInterface\n{\n  private store = new Map<string, any>();\n\n  get<T>(key: string): Promise<T> {\n    if (this.store.has(key)) {\n      const obj = this.store.get(key);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return this.get(key) != null;\n  }\n\n  save(key: string, obj: any): Promise<any> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    this.store.set(key, obj);\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<any> {\n    this.store.delete(key);\n    return Promise.resolve();\n  }\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n\n  AuthRequest = 15,\n  AuthRequestResponse = 16,\n}\n","import { NotificationType } from \"../../enums/notificationType\";\n\nimport { BaseResponse } from \"./baseResponse\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      case NotificationType.AuthRequest:\n      case NotificationType.AuthRequestResponse:\n        this.payload = new AuthRequestPushNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class AuthRequestPushNotification extends BaseResponse {\n  id: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { AppIdService } from \"../abstractions/appId.service\";\nimport { AuthService } from \"../abstractions/auth.service\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SyncService } from \"../abstractions/sync/sync.service.abstraction\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { NotificationType } from \"../enums/notificationType\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notificationResponse\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private logService: LogService,\n    private stateService: StateService,\n    private authService: AuthService\n  ) {\n    this.environmentService.urls.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = this.environmentService.getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data))\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { OrganizationData } from \"../data/organizationData\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useScim = obj.useScim;\n    this.useResetPassword = obj.useResetPassword;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.isProviderUser = obj.isProviderUser;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n  }\n\n  get canAccess() {\n    if (this.type === OrganizationUserType.Owner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  get isManager() {\n    return (\n      this.type === OrganizationUserType.Manager ||\n      this.type === OrganizationUserType.Owner ||\n      this.type === OrganizationUserType.Admin\n    );\n  }\n\n  get isAdmin() {\n    return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;\n  }\n\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return (this.isAdmin || this.permissions.accessEventLogs) && this.useEvents;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.createNewCollections ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canEditAnyCollection() {\n    return (\n      this.isAdmin || (this.permissions.editAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canDeleteAnyCollection() {\n    return (\n      this.isAdmin ||\n      (this.permissions.deleteAnyCollection ?? this.permissions.manageAllCollections)\n    );\n  }\n\n  get canViewAllCollections() {\n    return this.canCreateNewCollections || this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  get canEditAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.editAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canDeleteAssignedCollections() {\n    return (\n      this.isManager ||\n      (this.permissions.deleteAssignedCollections ?? this.permissions.manageAssignedCollections)\n    );\n  }\n\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return (this.isAdmin || this.permissions.manageGroups) && this.useGroups;\n  }\n\n  get canManageSso() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageScim() {\n    return (this.isAdmin || this.permissions.manageScim) && this.useScim;\n  }\n\n  get canManagePolicies() {\n    return (this.isAdmin || this.permissions.managePolicies) && this.usePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  get canManageBilling() {\n    return this.isOwner && (this.isProviderUser || !this.hasProvider);\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n}\n","import { OrganizationService as OrganizationServiceAbstraction } from \"../abstractions/organization.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport class OrganizationService implements OrganizationServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Organization> {\n    const organizations = await this.stateService.getOrganizations();\n    // eslint-disable-next-line\n    if (organizations == null || !organizations.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Organization(organizations[id]);\n  }\n\n  async getByIdentifier(identifier: string): Promise<Organization> {\n    const organizations = await this.getAll();\n    if (organizations == null || organizations.length === 0) {\n      return null;\n    }\n\n    return organizations.find((o) => o.identifier === identifier);\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    const organizations = await this.stateService.getOrganizations({ userId: userId });\n    const response: Organization[] = [];\n    for (const id in organizations) {\n      // eslint-disable-next-line\n      if (organizations.hasOwnProperty(id) && !organizations[id].isProviderUser) {\n        response.push(new Organization(organizations[id]));\n      }\n    }\n    const sortedResponse = response.sort((a, b) => a.name.localeCompare(b.name));\n    return sortedResponse;\n  }\n\n  async save(organizations: { [id: string]: OrganizationData }) {\n    return await this.stateService.setOrganizations(organizations);\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    const orgs = await this.getAll();\n    return orgs.some(\n      (o) => o.familySponsorshipAvailable || o.familySponsorshipFriendlyName !== null\n    );\n  }\n\n  async hasOrganizations(userId?: string): Promise<boolean> {\n    const organizations = await this.getAll(userId);\n    return organizations.length > 0;\n  }\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EEFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  defaultType = \"\";\n  minLength = 0;\n  useUppercase = false;\n  useLowercase = false;\n  useNumbers = false;\n  numberCount = 0;\n  useSpecial = false;\n  specialCount = 0;\n  minNumberWords = 0;\n  capitalize = false;\n  includeNumber = false;\n\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"../abstractions/passwordGeneration.service\";\nimport { PolicyService } from \"../abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { PolicyType } from \"../enums/policyType\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncString } from \"../models/domain/encString\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { PasswordGeneratorPolicyOptions } from \"../models/domain/passwordGeneratorPolicyOptions\";\nimport { Policy } from \"../models/domain/policy\";\n\nconst DefaultOptions = {\n  length: 14,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 1,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async generatePassword(options: any): Promise<string> {\n    // overload defaults with given options\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.type === \"passphrase\") {\n      return this.generatePassphrase(options);\n    }\n\n    // sanitize\n    this.sanitizePasswordLength(o, true);\n\n    const minLength: number = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;\n    if (o.length < minLength) {\n      o.length = minLength;\n    }\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {\n      o.wordSeparator = \" \";\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EEFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EEFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: any\n  ): Promise<[any, PasswordGeneratorPolicyOptions]> {\n    let enforcedPolicyOptions = await this.getPasswordGeneratorPolicyOptions();\n    if (enforcedPolicyOptions != null) {\n      if (options.length < enforcedPolicyOptions.minLength) {\n        options.length = enforcedPolicyOptions.minLength;\n      }\n\n      if (enforcedPolicyOptions.useUppercase) {\n        options.uppercase = true;\n      }\n\n      if (enforcedPolicyOptions.useLowercase) {\n        options.lowercase = true;\n      }\n\n      if (enforcedPolicyOptions.useNumbers) {\n        options.number = true;\n      }\n\n      if (options.minNumber < enforcedPolicyOptions.numberCount) {\n        options.minNumber = enforcedPolicyOptions.numberCount;\n      }\n\n      if (enforcedPolicyOptions.useSpecial) {\n        options.special = true;\n      }\n\n      if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n        options.minSpecial = enforcedPolicyOptions.specialCount;\n      }\n\n      // Must normalize these fields because the receiving call expects all options to pass the current rules\n      if (options.minSpecial + options.minNumber > options.length) {\n        options.minSpecial = options.length - options.minNumber;\n      }\n\n      if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n        options.numWords = enforcedPolicyOptions.minNumberWords;\n      }\n\n      if (enforcedPolicyOptions.capitalize) {\n        options.capitalize = true;\n      }\n\n      if (enforcedPolicyOptions.includeNumber) {\n        options.includeNumber = true;\n      }\n\n      // Force default type if password/passphrase selected via policy\n      if (\n        enforcedPolicyOptions.defaultType === \"password\" ||\n        enforcedPolicyOptions.defaultType === \"passphrase\"\n      ) {\n        options.type = enforcedPolicyOptions.defaultType;\n      }\n    } else {\n      // UI layer expects an instantiated object to prevent more explicit null checks\n      enforcedPolicyOptions = new PasswordGeneratorPolicyOptions();\n    }\n    return [options, enforcedPolicyOptions];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies: Policy[] =\n      this.policyService == null\n        ? null\n        : await this.policyService.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<any> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    await this.stateService.setDecryptedPasswordGenerationHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  passwordStrength(password: string, userInputs: string[] = null): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    let globalUserInputs = [\"bitwarden\", \"bit\", \"warden\"];\n    if (userInputs != null && userInputs.length > 0) {\n      globalUserInputs = globalUserInputs.concat(userInputs);\n    }\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  normalizeOptions(options: any, enforcedPolicyOptions: PasswordGeneratorPolicyOptions) {\n    options.minLowercase = 0;\n    options.minUppercase = 0;\n\n    if (!options.length || options.length < 5) {\n      options.length = 5;\n    } else if (options.length > 128) {\n      options.length = 128;\n    }\n\n    if (options.length < enforcedPolicyOptions.minLength) {\n      options.length = enforcedPolicyOptions.minLength;\n    }\n\n    if (!options.minNumber) {\n      options.minNumber = 0;\n    } else if (options.minNumber > options.length) {\n      options.minNumber = options.length;\n    } else if (options.minNumber > 9) {\n      options.minNumber = 9;\n    }\n\n    if (options.minNumber < enforcedPolicyOptions.numberCount) {\n      options.minNumber = enforcedPolicyOptions.numberCount;\n    }\n\n    if (!options.minSpecial) {\n      options.minSpecial = 0;\n    } else if (options.minSpecial > options.length) {\n      options.minSpecial = options.length;\n    } else if (options.minSpecial > 9) {\n      options.minSpecial = 9;\n    }\n\n    if (options.minSpecial < enforcedPolicyOptions.specialCount) {\n      options.minSpecial = enforcedPolicyOptions.specialCount;\n    }\n\n    if (options.minSpecial + options.minNumber > options.length) {\n      options.minSpecial = options.length - options.minNumber;\n    }\n\n    if (options.numWords == null || options.length < 3) {\n      options.numWords = 3;\n    } else if (options.numWords > 20) {\n      options.numWords = 20;\n    }\n\n    if (options.numWords < enforcedPolicyOptions.minNumberWords) {\n      options.numWords = enforcedPolicyOptions.minNumberWords;\n    }\n\n    if (options.wordSeparator != null && options.wordSeparator.length > 1) {\n      options.wordSeparator = options.wordSeparator[0];\n    }\n\n    this.sanitizePasswordLength(options, false);\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[]\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  private sanitizePasswordLength(options: any, forGeneration: boolean) {\n    let minUppercaseCalc = 0;\n    let minLowercaseCalc = 0;\n    let minNumberCalc: number = options.minNumber;\n    let minSpecialCalc: number = options.minSpecial;\n\n    if (options.uppercase && options.minUppercase <= 0) {\n      minUppercaseCalc = 1;\n    } else if (!options.uppercase) {\n      minUppercaseCalc = 0;\n    }\n\n    if (options.lowercase && options.minLowercase <= 0) {\n      minLowercaseCalc = 1;\n    } else if (!options.lowercase) {\n      minLowercaseCalc = 0;\n    }\n\n    if (options.number && options.minNumber <= 0) {\n      minNumberCalc = 1;\n    } else if (!options.number) {\n      minNumberCalc = 0;\n    }\n\n    if (options.special && options.minSpecial <= 0) {\n      minSpecialCalc = 1;\n    } else if (!options.special) {\n      minSpecialCalc = 0;\n    }\n\n    // This should never happen but is a final safety net\n    if (!options.length || options.length < 1) {\n      options.length = 10;\n    }\n\n    const minLength: number = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;\n    // Normalize and Generation both require this modification\n    if (options.length < minLength) {\n      options.length = minLength;\n    }\n\n    // Apply other changes if the options object passed in is for generation\n    if (forGeneration) {\n      options.minUppercase = minUppercaseCalc;\n      options.minLowercase = minLowercaseCalc;\n      options.minNumber = minNumberCalc;\n      options.minSpecial = minSpecialCalc;\n    }\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyResponse } from \"../response/policyResponse\";\n\nexport class PolicyData {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: PolicyResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../data/policyData\";\n\nimport Domain from \"./domainBase\";\n\nexport class Policy extends Domain {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { PolicyData } from \"@bitwarden/common/models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"@bitwarden/common/models/domain/policy\";\nimport { PolicyRequest } from \"@bitwarden/common/models/request/policyRequest\";\nimport { ListResponse } from \"@bitwarden/common/models/response/listResponse\";\nimport { PolicyResponse } from \"@bitwarden/common/models/response/policyResponse\";\n\nexport class PolicyApiService implements PolicyApiServiceAbstraction {\n  constructor(\n    private policyService: InternalPolicyService,\n    private apiService: ApiService,\n    private stateService: StateService,\n    private organizationService: OrganizationService\n  ) {}\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        encodeURIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByInvitedUser(\n    organizationId: string,\n    userId: string\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/invited-user?\" + \"userId=\" + userId,\n      null,\n      false,\n      true\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPolicyForOrganization(policyType: PolicyType, organizationId: string): Promise<Policy> {\n    const org = await this.organizationService.get(organizationId);\n    if (org?.isProviderUser) {\n      const orgPolicies = await this.getPolicies(organizationId);\n      const policy = orgPolicies.data.find((p) => p.organizationId === organizationId);\n\n      if (policy == null) {\n        return null;\n      }\n\n      return new Policy(new PolicyData(policy));\n    }\n\n    const policies = await this.policyService.getAll(policyType);\n    return policies.find((p) => p.organizationId === organizationId);\n  }\n\n  async getMasterPasswordPoliciesForInvitedUsers(\n    orgId: string\n  ): Promise<MasterPasswordPolicyOptions> {\n    const userId = await this.stateService.getUserId();\n    const response = await this.getPoliciesByInvitedUser(orgId, userId);\n    const policies = await this.policyService.mapPoliciesFromToken(response);\n    return this.policyService.getMasterPasswordPolicyOptions(policies);\n  }\n\n  async putPolicy(organizationId: string, type: PolicyType, request: PolicyRequest): Promise<any> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true\n    );\n    const response = new PolicyResponse(r);\n    const data = new PolicyData(response);\n    await this.policyService.upsert(data);\n  }\n}\n","import Domain from \"./domainBase\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n}\n","import Domain from \"./domainBase\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1, // Not used, compile-time support only\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","import { OrganizationService } from \"../../abstractions/organization.service\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/masterPasswordPolicyOptions\";\nimport { Organization } from \"../../models/domain/organization\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../../models/response/listResponse\";\nimport { PolicyResponse } from \"../../models/response/policyResponse\";\n\nexport class PolicyService implements InternalPolicyServiceAbstraction {\n  policyCache: Policy[];\n\n  constructor(\n    private stateService: StateService,\n    private organizationService: OrganizationService\n  ) {}\n\n  async getAll(type?: PolicyType, userId?: string): Promise<Policy[]> {\n    let response: Policy[] = [];\n    const decryptedPolicies = await this.stateService.getDecryptedPolicies({ userId: userId });\n    if (decryptedPolicies != null) {\n      response = decryptedPolicies;\n    } else {\n      const diskPolicies = await this.stateService.getEncryptedPolicies({ userId: userId });\n      for (const id in diskPolicies) {\n        // eslint-disable-next-line\n        if (diskPolicies.hasOwnProperty(id)) {\n          response.push(new Policy(diskPolicies[id]));\n        }\n      }\n      await this.stateService.setDecryptedPolicies(response, { userId: userId });\n    }\n    if (type != null) {\n      return response.filter((policy) => policy.type === type);\n    } else {\n      return response;\n    }\n  }\n\n  async getMasterPasswordPolicyOptions(policies?: Policy[]): Promise<MasterPasswordPolicyOptions> {\n    let enforcedOptions: MasterPasswordPolicyOptions = null;\n\n    if (policies == null) {\n      policies = await this.getAll(PolicyType.MasterPassword);\n    } else {\n      policies = policies.filter((p) => p.type === PolicyType.MasterPassword);\n    }\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new MasterPasswordPolicyOptions();\n      }\n\n      if (\n        currentPolicy.data.minComplexity != null &&\n        currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n      ) {\n        enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.requireUpper) {\n        enforcedOptions.requireUpper = true;\n      }\n\n      if (currentPolicy.data.requireLower) {\n        enforcedOptions.requireLower = true;\n      }\n\n      if (currentPolicy.data.requireNumbers) {\n        enforcedOptions.requireNumbers = true;\n      }\n\n      if (currentPolicy.data.requireSpecial) {\n        enforcedOptions.requireSpecial = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  mapPoliciesFromToken(policiesResponse: ListResponse<PolicyResponse>): Policy[] {\n    if (policiesResponse == null || policiesResponse.data == null) {\n      return null;\n    }\n\n    const policiesData = policiesResponse.data.map((p) => new PolicyData(p));\n    return policiesData.map((p) => new Policy(p));\n  }\n\n  async policyAppliesToUser(\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) {\n    const policies = await this.getAll(policyType, userId);\n    const organizations = await this.organizationService.getAll(userId);\n    let filteredPolicies;\n\n    if (policyFilter != null) {\n      filteredPolicies = policies.filter((p) => p.enabled && policyFilter(p));\n    } else {\n      filteredPolicies = policies.filter((p) => p.enabled);\n    }\n\n    const policySet = new Set(filteredPolicies.map((p) => p.organizationId));\n\n    return organizations.some(\n      (o) =>\n        o.enabled &&\n        o.status >= OrganizationUserStatusType.Accepted &&\n        o.usePolicies &&\n        !this.isExcemptFromPolicies(o, policyType) &&\n        policySet.has(o.id)\n    );\n  }\n\n  async upsert(policy: PolicyData): Promise<any> {\n    let policies = await this.stateService.getEncryptedPolicies();\n    if (policies == null) {\n      policies = {};\n    }\n\n    policies[policy.id] = policy;\n\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null);\n    await this.stateService.setEncryptedPolicies(policies);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.stateService.setDecryptedPolicies(null, { userId: userId });\n    await this.stateService.setEncryptedPolicies(null, { userId: userId });\n  }\n\n  private isExcemptFromPolicies(organization: Organization, policyType: PolicyType) {\n    if (policyType === PolicyType.MaximumVaultTimeout) {\n      return organization.type === OrganizationUserType.Owner;\n    }\n\n    return organization.isExemptFromPolicies;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProviderData } from \"../data/providerData\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateService: StateService) {}\n\n  async get(id: string): Promise<Provider> {\n    const providers = await this.stateService.getProviders();\n    // eslint-disable-next-line\n    if (providers == null || !providers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Provider(providers[id]);\n  }\n\n  async getAll(): Promise<Provider[]> {\n    const providers = await this.stateService.getProviders();\n    const response: Provider[] = [];\n    for (const id in providers) {\n      // eslint-disable-next-line\n      if (providers.hasOwnProperty(id)) {\n        response.push(new Provider(providers[id]));\n      }\n    }\n    return response;\n  }\n\n  async save(providers: { [id: string]: ProviderData }) {\n    await this.stateService.setProviders(providers);\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as lunr from \"lunr\";\n\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  private static registeredPipeline = false;\n\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private readonly immediateSearchLocales: string[] = [\"zh-CN\", \"zh-TW\", \"ja\", \"ko\", \"vi\"];\n  private readonly defaultSearchableMinLength: number = 2;\n  private searchableMinLength: number = this.defaultSearchableMinLength;\n\n  constructor(\n    private cipherService: CipherService,\n    private logService: LogService,\n    private i18nService: I18nService\n  ) {\n    this.i18nService.locale$.subscribe((locale) => {\n      if (this.immediateSearchLocales.indexOf(locale) !== -1) {\n        this.searchableMinLength = 1;\n      } else {\n        this.searchableMinLength = this.defaultSearchableMinLength;\n      }\n    });\n\n    // Currently have to ensure this is only done a single time. Lunr allows you to register a function\n    // multiple times but they will add a warning message to the console. The way they do that breaks when ran on a service worker.\n    if (!SearchService.registeredPipeline) {\n      SearchService.registeredPipeline = true;\n      //register lunr pipeline function\n      lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n    }\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    query = SearchService.normalizeSearchQuery(query);\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  async indexCiphers(indexedEntityId?: string, ciphers?: CipherView[]): Promise<void> {\n    if (this.indexing) {\n      return;\n    }\n\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || (await this.cipherService.getAllDecrypted());\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.info(\"Finished search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[] = null\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = await this.cipherService.getAllDecrypted();\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        c.login &&\n        c.login.hasUris &&\n        c.login.uris.some((loginUri) => loginUri?.uri?.toLowerCase().indexOf(query) > -1)\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchType.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { SendFileApi } from \"../api/sendFileApi\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/sendTextApi\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendResponse } from \"../response/sendResponse\";\n\nimport { SendFileData } from \"./sendFileData\";\nimport { SendTextData } from \"./sendTextData\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendFile } from \"../domain/sendFile\";\n\nimport { View } from \"./view\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n}\n","import { SendText } from \"../domain/sendText\";\n\nimport { View } from \"./view\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { Send } from \"../domain/send\";\nimport { SymmetricCryptoKey } from \"../domain/symmetricCryptoKey\";\n\nimport { SendFileView } from \"./sendFileView\";\nimport { SendTextView } from \"./sendTextView\";\nimport { View } from \"./view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: ArrayBuffer;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n}\n","import { SendFileData } from \"../data/sendFileData\";\nimport { SendFileView } from \"../view/sendFileView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"]\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key\n    );\n    return view;\n  }\n}\n","import { SendTextData } from \"../data/sendTextData\";\nimport { SendTextView } from \"../view/sendTextView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      []\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key\n    );\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { Utils } from \"../../misc/utils\";\nimport { SendData } from \"../data/sendData\";\nimport { SendView } from \"../view/sendView\";\n\nimport Domain from \"./domainBase\";\nimport { EncString } from \"./encString\";\nimport { SendFile } from \"./sendFile\";\nimport { SendText } from \"./sendText\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"]\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    const cryptoService = Utils.getContainerService().getCryptoService();\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n}\n","import { SendType } from \"../../enums/sendType\";\nimport { SendFileApi } from \"../api/sendFileApi\";\nimport { SendTextApi } from \"../api/sendTextApi\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { FileUploadService } from \"../abstractions/fileUpload.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { SendService as SendServiceAbstraction } from \"../abstractions/send.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SEND_KDF_ITERATIONS } from \"../enums/kdfType\";\nimport { SendType } from \"../enums/sendType\";\nimport { Utils } from \"../misc/utils\";\nimport { SendData } from \"../models/data/sendData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/sendFile\";\nimport { SendText } from \"../models/domain/sendText\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { SendRequest } from \"../models/request/sendRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { SendResponse } from \"../models/response/sendResponse\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport class SendService implements SendServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private i18nService: I18nService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService\n  ) {}\n\n  async clearCache(): Promise<void> {\n    await this.stateService.setDecryptedSends(null);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      model.key = await this.cryptoFunctionService.randomBytes(16);\n      model.cryptoKey = await this.cryptoService.makeSendKey(model.key);\n    }\n    if (password != null) {\n      const passwordHash = await this.cryptoFunctionService.pbkdf2(\n        password,\n        model.key,\n        \"sha256\",\n        SEND_KDF_ITERATIONS\n      );\n      send.password = Utils.fromBufferToB64(passwordHash);\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  async get(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecrypted(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasKey();\n    if (!hasKey) {\n      throw new Error(\"No key.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async saveWithServer(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.apiService.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.apiService.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n\n          await this.fileUploadService.uploadSendFile(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1]\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.apiService.putSend(sendData[0].id, request);\n    }\n\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.apiService.postSendFileLegacy(fd);\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  async clear(): Promise<any> {\n    await this.stateService.setDecryptedSends(null);\n    await this.stateService.setEncryptedSends(null);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async deleteWithServer(id: string): Promise<any> {\n    await this.apiService.deleteSend(id);\n    await this.delete(id);\n  }\n\n  async removePasswordWithServer(id: string): Promise<any> {\n    const response = await this.apiService.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.upsert(data);\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(data, key);\n    return [encFileName, encFileData];\n  }\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\n\nimport { SettingsService as SettingsServiceAbstraction } from \"../abstractions/settings.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { Utils } from \"../misc/utils\";\nimport { AccountSettingsSettings } from \"../models/domain/account\";\n\nexport class SettingsService implements SettingsServiceAbstraction {\n  private _settings: BehaviorSubject<AccountSettingsSettings> = new BehaviorSubject({});\n\n  settings$ = this._settings.asObservable();\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._settings.next({});\n            return;\n          }\n\n          const data = await this.stateService.getSettings();\n\n          this._settings.next(data);\n        })\n      )\n      .subscribe();\n  }\n\n  async setEquivalentDomains(equivalentDomains: string[][]): Promise<void> {\n    const settings = this._settings.getValue() ?? {};\n\n    settings.equivalentDomains = equivalentDomains;\n\n    this._settings.next(settings);\n    await this.stateService.setSettings(settings);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._settings.next({});\n    }\n\n    await this.stateService.setSettings(null, { userId: userId });\n  }\n}\n","import { StateService } from \"../abstractions/state.service\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { Utils } from \"../misc/utils\";\nimport { IdentityTokenResponse } from \"../models/response/identityTokenResponse\";\n\nexport class TokenService implements TokenServiceAbstraction {\n  static decodeToken(token: string): Promise<any> {\n    if (token == null) {\n      throw new Error(\"Token not provided.\");\n    }\n\n    const parts = token.split(\".\");\n    if (parts.length !== 3) {\n      throw new Error(\"JWT must have 3 parts\");\n    }\n\n    const decoded = Utils.fromUrlB64ToUtf8(parts[1]);\n    if (decoded == null) {\n      throw new Error(\"Cannot decode the token\");\n    }\n\n    const decodedToken = JSON.parse(decoded);\n    return decodedToken;\n  }\n\n  constructor(private stateService: StateService) {}\n\n  async setTokens(\n    accessToken: string,\n    refreshToken: string,\n    clientIdClientSecret: [string, string]\n  ): Promise<any> {\n    await this.setToken(accessToken);\n    await this.setRefreshToken(refreshToken);\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0]);\n      await this.setClientSecret(clientIdClientSecret[1]);\n    }\n  }\n\n  async setClientId(clientId: string): Promise<any> {\n    return await this.stateService.setApiKeyClientId(clientId);\n  }\n\n  async getClientId(): Promise<string> {\n    return await this.stateService.getApiKeyClientId();\n  }\n\n  async setClientSecret(clientSecret: string): Promise<any> {\n    return await this.stateService.setApiKeyClientSecret(clientSecret);\n  }\n\n  async getClientSecret(): Promise<string> {\n    return await this.stateService.getApiKeyClientSecret();\n  }\n\n  async setToken(token: string): Promise<void> {\n    await this.stateService.setAccessToken(token);\n  }\n\n  async getToken(): Promise<string> {\n    return await this.stateService.getAccessToken();\n  }\n\n  async setRefreshToken(refreshToken: string): Promise<any> {\n    return await this.stateService.setRefreshToken(refreshToken);\n  }\n\n  async getRefreshToken(): Promise<string> {\n    return await this.stateService.getRefreshToken();\n  }\n\n  async setTwoFactorToken(tokenResponse: IdentityTokenResponse): Promise<any> {\n    return await this.stateService.setTwoFactorToken(tokenResponse.twoFactorToken);\n  }\n\n  async getTwoFactorToken(): Promise<string> {\n    return await this.stateService.getTwoFactorToken();\n  }\n\n  async clearTwoFactorToken(): Promise<any> {\n    return await this.stateService.setTwoFactorToken(null);\n  }\n\n  async clearToken(userId?: string): Promise<any> {\n    await this.stateService.setAccessToken(null, { userId: userId });\n    await this.stateService.setRefreshToken(null, { userId: userId });\n    await this.stateService.setApiKeyClientId(null, { userId: userId });\n    await this.stateService.setApiKeyClientSecret(null, { userId: userId });\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeToken(token?: string): Promise<any> {\n    token = token ?? (await this.stateService.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Token not found.\");\n    }\n\n    return TokenService.decodeToken(token);\n  }\n\n  async getTokenExpirationDate(): Promise<Date> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.exp === \"undefined\") {\n      return null;\n    }\n\n    const d = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    d.setUTCSeconds(decoded.exp);\n    return d;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const d = await this.getTokenExpirationDate();\n    if (d == null) {\n      return 0;\n    }\n\n    const msRemaining = d.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.sub === \"undefined\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as string;\n  }\n\n  async getEmail(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email === \"undefined\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email as string;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.email_verified === \"undefined\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified as boolean;\n  }\n\n  async getName(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.name === \"undefined\") {\n      return null;\n    }\n\n    return decoded.name as string;\n  }\n\n  async getIssuer(): Promise<string> {\n    const decoded = await this.decodeToken();\n    if (typeof decoded.iss === \"undefined\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss as string;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    const decoded = await this.decodeToken();\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n}\n","import { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StateVersion } from \"../enums/stateVersion\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport {\n  Account,\n  AccountSettings,\n  AccountSettingsSettings,\n  EncryptionPair,\n} from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\n\nimport { TokenService } from \"./token.service\";\n\n// Originally (before January 2022) storage was handled as a flat key/value pair store.\n// With the move to a typed object for state storage these keys should no longer be in use anywhere outside of this migration.\nconst v1Keys: { [key: string]: string } = {\n  accessToken: \"accessToken\",\n  alwaysShowDock: \"alwaysShowDock\",\n  autoConfirmFingerprints: \"autoConfirmFingerprints\",\n  autoFillOnPageLoadDefault: \"autoFillOnPageLoadDefault\",\n  biometricAwaitingAcceptance: \"biometricAwaitingAcceptance\",\n  biometricFingerprintValidated: \"biometricFingerprintValidated\",\n  biometricText: \"biometricText\",\n  biometricUnlock: \"biometric\",\n  clearClipboard: \"clearClipboardKey\",\n  clientId: \"apikey_clientId\",\n  clientSecret: \"apikey_clientSecret\",\n  collapsedGroupings: \"collapsedGroupings\",\n  convertAccountToKeyConnector: \"convertAccountToKeyConnector\",\n  defaultUriMatch: \"defaultUriMatch\",\n  disableAddLoginNotification: \"disableAddLoginNotification\",\n  disableAutoBiometricsPrompt: \"noAutoPromptBiometrics\",\n  disableAutoTotpCopy: \"disableAutoTotpCopy\",\n  disableBadgeCounter: \"disableBadgeCounter\",\n  disableChangedPasswordNotification: \"disableChangedPasswordNotification\",\n  disableContextMenuItem: \"disableContextMenuItem\",\n  disableFavicon: \"disableFavicon\",\n  disableGa: \"disableGa\",\n  dontShowCardsCurrentTab: \"dontShowCardsCurrentTab\",\n  dontShowIdentitiesCurrentTab: \"dontShowIdentitiesCurrentTab\",\n  emailVerified: \"emailVerified\",\n  enableAlwaysOnTop: \"enableAlwaysOnTopKey\",\n  enableAutoFillOnPageLoad: \"enableAutoFillOnPageLoad\",\n  enableBiometric: \"enabledBiometric\",\n  enableBrowserIntegration: \"enableBrowserIntegration\",\n  enableBrowserIntegrationFingerprint: \"enableBrowserIntegrationFingerprint\",\n  enableCloseToTray: \"enableCloseToTray\",\n  enableFullWidth: \"enableFullWidth\",\n  enableGravatars: \"enableGravatars\",\n  enableMinimizeToTray: \"enableMinimizeToTray\",\n  enableStartToTray: \"enableStartToTrayKey\",\n  enableTray: \"enableTray\",\n  encKey: \"encKey\", // Generated Symmetric Key\n  encOrgKeys: \"encOrgKeys\",\n  encPrivate: \"encPrivateKey\",\n  encProviderKeys: \"encProviderKeys\",\n  entityId: \"entityId\",\n  entityType: \"entityType\",\n  environmentUrls: \"environmentUrls\",\n  equivalentDomains: \"equivalentDomains\",\n  eventCollection: \"eventCollection\",\n  forcePasswordReset: \"forcePasswordReset\",\n  history: \"generatedPasswordHistory\",\n  installedVersion: \"installedVersion\",\n  kdf: \"kdf\",\n  kdfIterations: \"kdfIterations\",\n  key: \"key\", // Master Key\n  keyHash: \"keyHash\",\n  lastActive: \"lastActive\",\n  localData: \"sitesLocalData\",\n  locale: \"locale\",\n  mainWindowSize: \"mainWindowSize\",\n  minimizeOnCopyToClipboard: \"minimizeOnCopyToClipboardKey\",\n  neverDomains: \"neverDomains\",\n  noAutoPromptBiometricsText: \"noAutoPromptBiometricsText\",\n  openAtLogin: \"openAtLogin\",\n  passwordGenerationOptions: \"passwordGenerationOptions\",\n  pinProtected: \"pinProtectedKey\",\n  protectedPin: \"protectedPin\",\n  refreshToken: \"refreshToken\",\n  ssoCodeVerifier: \"ssoCodeVerifier\",\n  ssoIdentifier: \"ssoOrgIdentifier\",\n  ssoState: \"ssoState\",\n  stamp: \"securityStamp\",\n  theme: \"theme\",\n  userEmail: \"userEmail\",\n  userId: \"userId\",\n  usesConnector: \"usesKeyConnector\",\n  vaultTimeoutAction: \"vaultTimeoutAction\",\n  vaultTimeout: \"lockOption\",\n  rememberedEmail: \"rememberedEmail\",\n};\n\nconst v1KeyPrefixes: { [key: string]: string } = {\n  ciphers: \"ciphers_\",\n  collections: \"collections_\",\n  folders: \"folders_\",\n  lastSync: \"lastSync_\",\n  policies: \"policies_\",\n  twoFactorToken: \"twoFactorToken_\",\n  organizations: \"organizations_\",\n  providers: \"providers_\",\n  sends: \"sends_\",\n  settings: \"settings_\",\n};\n\nconst keys = {\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nexport class StateMigrationService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>\n  ) {}\n\n  async needsMigration(): Promise<boolean> {\n    const currentStateVersion = await this.getCurrentStateVersion();\n    return currentStateVersion == null || currentStateVersion < StateVersion.Latest;\n  }\n\n  async migrate(): Promise<void> {\n    let currentStateVersion = await this.getCurrentStateVersion();\n    while (currentStateVersion < StateVersion.Latest) {\n      switch (currentStateVersion) {\n        case StateVersion.One:\n          await this.migrateStateFrom1To2();\n          break;\n        case StateVersion.Two:\n          await this.migrateStateFrom2To3();\n          break;\n        case StateVersion.Three:\n          await this.migrateStateFrom3To4();\n          break;\n        case StateVersion.Four: {\n          const authenticatedAccounts = await this.getAuthenticatedAccounts();\n          for (const account of authenticatedAccounts) {\n            const migratedAccount = await this.migrateAccountFrom4To5(account);\n            await this.set(account.profile.userId, migratedAccount);\n          }\n          await this.setCurrentStateVersion(StateVersion.Five);\n          break;\n        }\n        case StateVersion.Five: {\n          const authenticatedAccounts = await this.getAuthenticatedAccounts();\n          for (const account of authenticatedAccounts) {\n            const migratedAccount = await this.migrateAccountFrom5To6(account);\n            await this.set(account.profile.userId, migratedAccount);\n          }\n          await this.setCurrentStateVersion(StateVersion.Six);\n          break;\n        }\n      }\n\n      currentStateVersion += 1;\n    }\n  }\n\n  protected async migrateStateFrom1To2(): Promise<void> {\n    const clearV1Keys = async (clearingUserId?: string) => {\n      for (const key in v1Keys) {\n        if (key == null) {\n          continue;\n        }\n        await this.set(v1Keys[key], null);\n      }\n      if (clearingUserId != null) {\n        for (const keyPrefix in v1KeyPrefixes) {\n          if (keyPrefix == null) {\n            continue;\n          }\n          await this.set(v1KeyPrefixes[keyPrefix] + userId, null);\n        }\n      }\n    };\n\n    // Some processes, like biometrics, may have already defined a value before migrations are run.\n    // We don't want to null out those values if they don't exist in the old storage scheme (like for new installs)\n    // So, the OOO for migration is that we:\n    // 1. Check for an existing storage value from the old storage structure OR\n    // 2. Check for a value already set by processes that run before migration OR\n    // 3. Assign the default value\n    const globals =\n      (await this.get<GlobalState>(keys.global)) ?? this.stateFactory.createGlobal(null);\n    globals.stateVersion = StateVersion.Two;\n    globals.environmentUrls =\n      (await this.get<EnvironmentUrls>(v1Keys.environmentUrls)) ?? globals.environmentUrls;\n    globals.locale = (await this.get<string>(v1Keys.locale)) ?? globals.locale;\n    globals.noAutoPromptBiometrics =\n      (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n      globals.noAutoPromptBiometrics;\n    globals.noAutoPromptBiometricsText =\n      (await this.get<string>(v1Keys.noAutoPromptBiometricsText)) ??\n      globals.noAutoPromptBiometricsText;\n    globals.ssoCodeVerifier =\n      (await this.get<string>(v1Keys.ssoCodeVerifier)) ?? globals.ssoCodeVerifier;\n    globals.ssoOrganizationIdentifier =\n      (await this.get<string>(v1Keys.ssoIdentifier)) ?? globals.ssoOrganizationIdentifier;\n    globals.ssoState = (await this.get<any>(v1Keys.ssoState)) ?? globals.ssoState;\n    globals.rememberedEmail =\n      (await this.get<string>(v1Keys.rememberedEmail)) ?? globals.rememberedEmail;\n    globals.theme = (await this.get<ThemeType>(v1Keys.theme)) ?? globals.theme;\n    globals.vaultTimeout = (await this.get<number>(v1Keys.vaultTimeout)) ?? globals.vaultTimeout;\n    globals.vaultTimeoutAction =\n      (await this.get<string>(v1Keys.vaultTimeoutAction)) ?? globals.vaultTimeoutAction;\n    globals.window = (await this.get<any>(v1Keys.mainWindowSize)) ?? globals.window;\n    globals.enableTray = (await this.get<boolean>(v1Keys.enableTray)) ?? globals.enableTray;\n    globals.enableMinimizeToTray =\n      (await this.get<boolean>(v1Keys.enableMinimizeToTray)) ?? globals.enableMinimizeToTray;\n    globals.enableCloseToTray =\n      (await this.get<boolean>(v1Keys.enableCloseToTray)) ?? globals.enableCloseToTray;\n    globals.enableStartToTray =\n      (await this.get<boolean>(v1Keys.enableStartToTray)) ?? globals.enableStartToTray;\n    globals.openAtLogin = (await this.get<boolean>(v1Keys.openAtLogin)) ?? globals.openAtLogin;\n    globals.alwaysShowDock =\n      (await this.get<boolean>(v1Keys.alwaysShowDock)) ?? globals.alwaysShowDock;\n    globals.enableBrowserIntegration =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegration)) ??\n      globals.enableBrowserIntegration;\n    globals.enableBrowserIntegrationFingerprint =\n      (await this.get<boolean>(v1Keys.enableBrowserIntegrationFingerprint)) ??\n      globals.enableBrowserIntegrationFingerprint;\n\n    const userId =\n      (await this.get<string>(v1Keys.userId)) ?? (await this.get<string>(v1Keys.entityId));\n\n    const defaultAccount = this.stateFactory.createAccount(null);\n    const accountSettings: AccountSettings = {\n      autoConfirmFingerPrints:\n        (await this.get<boolean>(v1Keys.autoConfirmFingerprints)) ??\n        defaultAccount.settings.autoConfirmFingerPrints,\n      autoFillOnPageLoadDefault:\n        (await this.get<boolean>(v1Keys.autoFillOnPageLoadDefault)) ??\n        defaultAccount.settings.autoFillOnPageLoadDefault,\n      biometricUnlock:\n        (await this.get<boolean>(v1Keys.biometricUnlock)) ??\n        defaultAccount.settings.biometricUnlock,\n      clearClipboard:\n        (await this.get<number>(v1Keys.clearClipboard)) ?? defaultAccount.settings.clearClipboard,\n      defaultUriMatch:\n        (await this.get<any>(v1Keys.defaultUriMatch)) ?? defaultAccount.settings.defaultUriMatch,\n      disableAddLoginNotification:\n        (await this.get<boolean>(v1Keys.disableAddLoginNotification)) ??\n        defaultAccount.settings.disableAddLoginNotification,\n      disableAutoBiometricsPrompt:\n        (await this.get<boolean>(v1Keys.disableAutoBiometricsPrompt)) ??\n        defaultAccount.settings.disableAutoBiometricsPrompt,\n      disableAutoTotpCopy:\n        (await this.get<boolean>(v1Keys.disableAutoTotpCopy)) ??\n        defaultAccount.settings.disableAutoTotpCopy,\n      disableBadgeCounter:\n        (await this.get<boolean>(v1Keys.disableBadgeCounter)) ??\n        defaultAccount.settings.disableBadgeCounter,\n      disableChangedPasswordNotification:\n        (await this.get<boolean>(v1Keys.disableChangedPasswordNotification)) ??\n        defaultAccount.settings.disableChangedPasswordNotification,\n      disableContextMenuItem:\n        (await this.get<boolean>(v1Keys.disableContextMenuItem)) ??\n        defaultAccount.settings.disableContextMenuItem,\n      disableGa: (await this.get<boolean>(v1Keys.disableGa)) ?? defaultAccount.settings.disableGa,\n      dontShowCardsCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowCardsCurrentTab)) ??\n        defaultAccount.settings.dontShowCardsCurrentTab,\n      dontShowIdentitiesCurrentTab:\n        (await this.get<boolean>(v1Keys.dontShowIdentitiesCurrentTab)) ??\n        defaultAccount.settings.dontShowIdentitiesCurrentTab,\n      enableAlwaysOnTop:\n        (await this.get<boolean>(v1Keys.enableAlwaysOnTop)) ??\n        defaultAccount.settings.enableAlwaysOnTop,\n      enableAutoFillOnPageLoad:\n        (await this.get<boolean>(v1Keys.enableAutoFillOnPageLoad)) ??\n        defaultAccount.settings.enableAutoFillOnPageLoad,\n      enableBiometric:\n        (await this.get<boolean>(v1Keys.enableBiometric)) ??\n        defaultAccount.settings.enableBiometric,\n      enableFullWidth:\n        (await this.get<boolean>(v1Keys.enableFullWidth)) ??\n        defaultAccount.settings.enableFullWidth,\n      enableGravitars:\n        (await this.get<boolean>(v1Keys.enableGravatars)) ??\n        defaultAccount.settings.enableGravitars,\n      environmentUrls: globals.environmentUrls ?? defaultAccount.settings.environmentUrls,\n      equivalentDomains:\n        (await this.get<any>(v1Keys.equivalentDomains)) ??\n        defaultAccount.settings.equivalentDomains,\n      minimizeOnCopyToClipboard:\n        (await this.get<boolean>(v1Keys.minimizeOnCopyToClipboard)) ??\n        defaultAccount.settings.minimizeOnCopyToClipboard,\n      neverDomains:\n        (await this.get<any>(v1Keys.neverDomains)) ?? defaultAccount.settings.neverDomains,\n      passwordGenerationOptions:\n        (await this.get<any>(v1Keys.passwordGenerationOptions)) ??\n        defaultAccount.settings.passwordGenerationOptions,\n      pinProtected: Object.assign(new EncryptionPair<string, EncString>(), {\n        decrypted: null,\n        encrypted: await this.get<string>(v1Keys.pinProtected),\n      }),\n      protectedPin: await this.get<string>(v1Keys.protectedPin),\n      settings:\n        userId == null\n          ? null\n          : await this.get<AccountSettingsSettings>(v1KeyPrefixes.settings + userId),\n      vaultTimeout:\n        (await this.get<number>(v1Keys.vaultTimeout)) ?? defaultAccount.settings.vaultTimeout,\n      vaultTimeoutAction:\n        (await this.get<string>(v1Keys.vaultTimeoutAction)) ??\n        defaultAccount.settings.vaultTimeoutAction,\n    };\n\n    // (userId == null) = no logged in user (so no known userId) and we need to temporarily store account specific settings in state to migrate on first auth\n    // (userId != null) = we have a currently authed user (so known userId) with encrypted data and other key settings we can move, no need to temporarily store account settings\n    if (userId == null) {\n      await this.set(keys.tempAccountSettings, accountSettings);\n      await this.set(keys.global, globals);\n      await this.set(keys.authenticatedAccounts, []);\n      await this.set(keys.activeUserId, null);\n      await clearV1Keys();\n      return;\n    }\n\n    globals.twoFactorToken = await this.get<string>(v1KeyPrefixes.twoFactorToken + userId);\n    await this.set(keys.global, globals);\n    await this.set(userId, {\n      data: {\n        addEditCipherInfo: null,\n        ciphers: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CipherData }>(v1KeyPrefixes.ciphers + userId),\n        },\n        collapsedGroupings: null,\n        collections: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: CollectionData }>(\n            v1KeyPrefixes.collections + userId\n          ),\n        },\n        eventCollection: await this.get<EventData[]>(v1Keys.eventCollection),\n        folders: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: FolderData }>(v1KeyPrefixes.folders + userId),\n        },\n        localData: null,\n        organizations: await this.get<{ [id: string]: OrganizationData }>(\n          v1KeyPrefixes.organizations + userId\n        ),\n        passwordGenerationHistory: {\n          decrypted: null,\n          encrypted: await this.get<GeneratedPasswordHistory[]>(v1Keys.history),\n        },\n        policies: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: PolicyData }>(v1KeyPrefixes.policies + userId),\n        },\n        providers: await this.get<{ [id: string]: ProviderData }>(v1KeyPrefixes.providers + userId),\n        sends: {\n          decrypted: null,\n          encrypted: await this.get<{ [id: string]: SendData }>(v1KeyPrefixes.sends + userId),\n        },\n      },\n      keys: {\n        apiKeyClientSecret: await this.get<string>(v1Keys.clientSecret),\n        cryptoMasterKey: null,\n        cryptoMasterKeyAuto: null,\n        cryptoMasterKeyB64: null,\n        cryptoMasterKeyBiometric: null,\n        cryptoSymmetricKey: {\n          encrypted: await this.get<string>(v1Keys.encKey),\n          decrypted: null,\n        },\n        legacyEtmKey: null,\n        organizationKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encOrgKeys),\n        },\n        privateKey: {\n          decrypted: null,\n          encrypted: await this.get<string>(v1Keys.encPrivate),\n        },\n        providerKeys: {\n          decrypted: null,\n          encrypted: await this.get<any>(v1Keys.encProviderKeys),\n        },\n        publicKey: null,\n      },\n      profile: {\n        apiKeyClientId: await this.get<string>(v1Keys.clientId),\n        authenticationStatus: null,\n        convertAccountToKeyConnector: await this.get<boolean>(v1Keys.convertAccountToKeyConnector),\n        email: await this.get<string>(v1Keys.userEmail),\n        emailVerified: await this.get<boolean>(v1Keys.emailVerified),\n        entityId: null,\n        entityType: null,\n        everBeenUnlocked: null,\n        forcePasswordReset: null,\n        hasPremiumPersonally: null,\n        kdfIterations: await this.get<number>(v1Keys.kdfIterations),\n        kdfType: await this.get<KdfType>(v1Keys.kdf),\n        keyHash: await this.get<string>(v1Keys.keyHash),\n        lastSync: null,\n        userId: userId,\n        usesKeyConnector: null,\n      },\n      settings: accountSettings,\n      tokens: {\n        accessToken: await this.get<string>(v1Keys.accessToken),\n        decodedToken: null,\n        refreshToken: await this.get<string>(v1Keys.refreshToken),\n        securityStamp: null,\n      },\n    });\n\n    await this.set(keys.authenticatedAccounts, [userId]);\n    await this.set(keys.activeUserId, userId);\n\n    const accountActivity: { [userId: string]: number } = {\n      [userId]: await this.get<number>(v1Keys.lastActive),\n    };\n    accountActivity[userId] = await this.get<number>(v1Keys.lastActive);\n    await this.set(keys.accountActivity, accountActivity);\n\n    await clearV1Keys(userId);\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"biometric\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.biometricKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"biometric\" }),\n        { keySuffix: \"biometric\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"biometric\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key, { keySuffix: \"auto\" })) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.autoKey}`,\n        await this.secureStorageService.get(v1Keys.key, { keySuffix: \"auto\" }),\n        { keySuffix: \"auto\" }\n      );\n      await this.secureStorageService.remove(v1Keys.key, { keySuffix: \"auto\" });\n    }\n\n    if (await this.secureStorageService.has(v1Keys.key)) {\n      await this.secureStorageService.save(\n        `${userId}${partialKeys.masterKey}`,\n        await this.secureStorageService.get(v1Keys.key)\n      );\n      await this.secureStorageService.remove(v1Keys.key);\n    }\n  }\n\n  protected async migrateStateFrom2To3(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (\n          account?.profile?.hasPremiumPersonally === null &&\n          account.tokens?.accessToken != null\n        ) {\n          const decodedToken = await TokenService.decodeToken(account.tokens.accessToken);\n          account.profile.hasPremiumPersonally = decodedToken.premium;\n          await this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Three;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateStateFrom3To4(): Promise<void> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    await Promise.all(\n      authenticatedUserIds.map(async (userId) => {\n        const account = await this.get<TAccount>(userId);\n        if (account?.profile?.everBeenUnlocked != null) {\n          delete account.profile.everBeenUnlocked;\n          return this.set(userId, account);\n        }\n      })\n    );\n\n    const globals = await this.getGlobals();\n    globals.stateVersion = StateVersion.Four;\n    await this.set(keys.global, globals);\n  }\n\n  protected async migrateAccountFrom4To5(account: TAccount): Promise<TAccount> {\n    const encryptedOrgKeys = account.keys?.organizationKeys?.encrypted;\n    if (encryptedOrgKeys != null) {\n      for (const [orgId, encKey] of Object.entries(encryptedOrgKeys)) {\n        encryptedOrgKeys[orgId] = {\n          type: \"organization\",\n          key: encKey as unknown as string, // Account v4 does not reflect the current account model so we have to cast\n        };\n      }\n    }\n\n    return account;\n  }\n\n  protected async migrateAccountFrom5To6(account: TAccount): Promise<TAccount> {\n    delete (account as any).keys?.legacyEtmKey;\n    return account;\n  }\n\n  protected get options(): StorageOptions {\n    return { htmlStorageLocation: HtmlStorageLocation.Local };\n  }\n\n  protected get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key, this.options);\n  }\n\n  protected set(key: string, value: any): Promise<any> {\n    if (value == null) {\n      return this.storageService.remove(key, this.options);\n    }\n    return this.storageService.save(key, value, this.options);\n  }\n\n  protected async getGlobals(): Promise<TGlobalState> {\n    return await this.get<TGlobalState>(keys.global);\n  }\n\n  protected async getCurrentStateVersion(): Promise<StateVersion> {\n    return (await this.getGlobals())?.stateVersion ?? StateVersion.One;\n  }\n\n  protected async setCurrentStateVersion(newVersion: StateVersion): Promise<void> {\n    const globals = await this.getGlobals();\n    globals.stateVersion = newVersion;\n    await this.set(keys.global, globals);\n  }\n\n  protected async getAuthenticatedAccounts(): Promise<TAccount[]> {\n    const authenticatedUserIds = await this.get<string[]>(keys.authenticatedAccounts);\n    return Promise.all(authenticatedUserIds.map((id) => this.get<TAccount>(id)));\n  }\n}\n","import { OrganizationUserStatusType } from \"../../enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"../../enums/organizationUserType\";\nimport { ProductType } from \"../../enums/productType\";\nimport { PermissionsApi } from \"../api/permissionsApi\";\nimport { ProfileOrganizationResponse } from \"../response/profileOrganizationResponse\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useResetPassword: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  isProviderUser: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n\n  constructor(response: ProfileOrganizationResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useScim = response.useScim;\n    this.useResetPassword = response.useResetPassword;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n  }\n}\n","import { ProviderUserStatusType } from \"../../enums/providerUserStatusType\";\nimport { ProviderUserType } from \"../../enums/providerUserType\";\nimport { ProfileProviderResponse } from \"../response/profileProviderResponse\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { Subject } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport { CollectionService } from \"../../abstractions/collection.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { FolderApiServiceAbstraction } from \"../../abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { OrganizationService } from \"../../abstractions/organization.service\";\nimport { InternalPolicyService } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { ProviderService } from \"../../abstractions/provider.service\";\nimport { SendService } from \"../../abstractions/send.service\";\nimport { SettingsService } from \"../../abstractions/settings.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { SyncService as SyncServiceAbstraction } from \"../../abstractions/sync/sync.service.abstraction\";\nimport { sequentialize } from \"../../misc/sequentialize\";\nimport { CipherData } from \"../../models/data/cipherData\";\nimport { CollectionData } from \"../../models/data/collectionData\";\nimport { FolderData } from \"../../models/data/folderData\";\nimport { OrganizationData } from \"../../models/data/organizationData\";\nimport { PolicyData } from \"../../models/data/policyData\";\nimport { ProviderData } from \"../../models/data/providerData\";\nimport { SendData } from \"../../models/data/sendData\";\nimport { CipherResponse } from \"../../models/response/cipherResponse\";\nimport { CollectionDetailsResponse } from \"../../models/response/collectionResponse\";\nimport { DomainsResponse } from \"../../models/response/domainsResponse\";\nimport { FolderResponse } from \"../../models/response/folderResponse\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../../models/response/notificationResponse\";\nimport { PolicyResponse } from \"../../models/response/policyResponse\";\nimport { ProfileResponse } from \"../../models/response/profileResponse\";\nimport { SendResponse } from \"../../models/response/sendResponse\";\nimport { SyncEventArgs } from \"../../types/syncEventArgs\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  private _sync = new Subject<SyncEventArgs>();\n\n  sync$ = this._sync.asObservable();\n\n  constructor(\n    private apiService: ApiService,\n    private settingsService: SettingsService,\n    private folderService: InternalFolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: InternalPolicyService,\n    private sendService: SendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private organizationService: OrganizationService,\n    private providerService: ProviderService,\n    private folderApiService: FolderApiServiceAbstraction,\n    private logoutCallback: (expired: boolean) => Promise<void>\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.folderApiService.get(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getFullCipherDetails(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = await this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.apiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n    this._sync.next({ status: \"Started\" });\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    this._sync.next({ status: successfully ? \"SuccessfullyCompleted\" : \"UnsuccessfullyCompleted\" });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setEncKey(response.key);\n    await this.cryptoService.setEncPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n    await this.stateService.setHasPremiumPersonally(response.premiumPersonally);\n    await this.stateService.setHasPremiumFromOrganization(response.premiumFromOrganization);\n    await this.stateService.setForcePasswordReset(response.forcePasswordReset);\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o);\n    });\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o);\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.save(organizations);\n    await this.providerService.save(providers);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.settingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { AuthService } from \"../abstractions/auth.service\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { AuthenticationStatus } from \"../enums/authenticationStatus\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService\n  ) {}\n\n  async startProcessReload(authService: AuthService): Promise<void> {\n    const accounts = this.stateService.accounts.getValue();\n    if (accounts != null) {\n      const keys = Object.keys(accounts);\n      if (keys.length > 0) {\n        for (const userId of keys) {\n          if ((await authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n            return;\n          }\n        }\n      }\n    }\n\n    // A reloadInterval has already been set and is executing\n    if (this.reloadInterval != null) {\n      return;\n    }\n\n    // User has set a PIN, with ask for master password on restart, to protect their vault\n    const decryptedPinProtected = await this.stateService.getDecryptedPinProtected();\n    if (decryptedPinProtected != null) {\n      return;\n    }\n\n    this.cancelProcessReload();\n    this.reloadInterval = setInterval(async () => await this.executeProcessReload(), 10000);\n  }\n\n  private async inactiveMoreThanSeconds(seconds: number): Promise<boolean> {\n    const lastActive = await this.stateService.getLastActive();\n    if (lastActive != null) {\n      const diffMs = new Date().getTime() - lastActive;\n      return diffMs >= seconds * 1000;\n    }\n    return true;\n  }\n\n  private async executeProcessReload() {\n    const accounts = this.stateService.accounts.getValue();\n    const doRefresh =\n      accounts == null ||\n      Object.keys(accounts).length == 0 ||\n      (await this.inactiveMoreThanSeconds(5));\n\n    const biometricLockedFingerprintValidated =\n      await this.stateService.getBiometricFingerprintValidated();\n    if (doRefresh && !biometricLockedFingerprintValidated) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n      this.messagingService.send(\"reloadProcess\");\n      if (this.reloadCallback != null) {\n        await this.reloadCallback();\n      }\n    }\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n    await this.stateService.getClearClipboard().then((clearSeconds) => {\n      if (clearSeconds == null) {\n        return;\n      }\n      if (timeoutMs == null) {\n        timeoutMs = clearSeconds * 1000;\n      }\n      this.clearClipboardTimeoutFunction = async () => {\n        const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n        if (clipboardValue === clipboardValueNow) {\n          this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n        }\n      };\n      this.clearClipboardTimeout = setTimeout(async () => {\n        await this.clearPendingClipboard();\n      }, timeoutMs);\n    });\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","import { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\nimport { Utils } from \"../misc/utils\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\"\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { I18nService } from \"../abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/twoFactor.service\";\nimport { TwoFactorProviderType } from \"../enums/twoFactorProviderType\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identityTwoFactorResponse\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: true,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/userVerification/userVerification-api.service.abstraction\";\nimport { VerifyOTPRequest } from \"../../models/request/account/verifyOTPRequest\";\n\nexport class UserVerificationApiService implements UserVerificationApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n  async postAccountRequestOTP(): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { I18nService } from \"../../abstractions/i18n.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/userVerification/userVerification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../../abstractions/userVerification/userVerification.service.abstraction\";\nimport { VerificationType } from \"../../enums/verificationType\";\nimport { VerifyOTPRequest } from \"../../models/request/account/verifyOTPRequest\";\nimport { SecretVerificationRequest } from \"../../models/request/secretVerificationRequest\";\nimport { Verification } from \"../../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private userVerificationApiService: UserVerificationApiServiceAbstraction\n  ) {}\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: Verification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean\n  ) {\n    this.validateInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashPassword(verification.secret, null);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify the Master Password client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (Master Password or OTP)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    this.validateInput(verification);\n\n    if (verification.type === VerificationType.OTP) {\n      const request = new VerifyOTPRequest(verification.secret);\n      try {\n        await this.userVerificationApiService.postAccountVerifyOTP(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n      }\n    } else {\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        null\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n    }\n    return true;\n  }\n\n  async requestOTP() {\n    await this.userVerificationApiService.postAccountRequestOTP();\n  }\n\n  private validateInput(verification: Verification) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      if (verification.type === VerificationType.OTP) {\n        throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n      } else {\n        throw new Error(this.i18nService.t(\"masterPasswordRequired\"));\n      }\n    }\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class AnonAddyForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    if (options.anonaddy?.domain == null || options.anonaddy.domain === \"\") {\n      throw \"Invalid AnonAddy domain.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://app.anonaddy.com/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: options.anonaddy.domain,\n      description:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid AnonAddy API token.\";\n    }\n    throw \"Unknown AnonAddy error occurred.\";\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class DuckDuckGoForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://quack.duckduckgo.com/api/email/addresses\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      if (json.address) {\n        return `${json.address}@duck.com`;\n      }\n    } else if (response.status === 401) {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    throw \"Unknown DuckDuckGo error occurred.\";\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class FastmailForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Fastmail API token.\";\n    }\n\n    const accountId = await this.getAccountId(apiService, options);\n    if (accountId == null || accountId === \"\") {\n      throw \"Unable to obtain Fastmail masked email account ID.\";\n    }\n\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://api.fastmail.com/jmap/api/\";\n    requestInit.body = JSON.stringify({\n      using: [\"https://www.fastmail.com/dev/maskedemail\", \"urn:ietf:params:jmap:core\"],\n      methodCalls: [\n        [\n          \"MaskedEmail/set\",\n          {\n            accountId: accountId,\n            create: {\n              \"new-masked-email\": {\n                state: \"enabled\",\n                description: \"\",\n                url: options.website,\n                emailPrefix: options.fastmail.prefix,\n              },\n            },\n          },\n          \"0\",\n        ],\n      ],\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (\n        json.methodResponses != null &&\n        json.methodResponses.length > 0 &&\n        json.methodResponses[0].length > 0\n      ) {\n        if (json.methodResponses[0][0] === \"MaskedEmail/set\") {\n          if (json.methodResponses[0][1]?.created?.[\"new-masked-email\"] != null) {\n            return json.methodResponses[0][1]?.created?.[\"new-masked-email\"]?.email;\n          }\n          if (json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"] != null) {\n            throw (\n              \"Fastmail error: \" +\n              json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"]?.description\n            );\n          }\n        } else if (json.methodResponses[0][0] === \"error\") {\n          throw \"Fastmail error: \" + json.methodResponses[0][1]?.description;\n        }\n      }\n    }\n    if (response.status === 401 || response.status === 403) {\n      throw \"Invalid Fastmail API token.\";\n    }\n    throw \"Unknown Fastmail error occurred.\";\n  }\n\n  private async getAccountId(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      method: \"GET\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n      }),\n    };\n    const url = \"https://api.fastmail.com/.well-known/jmap\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (json.primaryAccounts != null) {\n        return json.primaryAccounts[\"https://www.fastmail.com/dev/maskedemail\"];\n      }\n    }\n    return null;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class FirefoxRelayForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: options.website,\n      description:\n        (options.website != null ? options.website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class ForwarderOptions {\n  apiKey: string;\n  website: string;\n  fastmail = new FastmailForwarderOptions();\n  anonaddy = new AnonAddyForwarderOptions();\n}\n\nexport class FastmailForwarderOptions {\n  prefix: string;\n}\n\nexport class AnonAddyForwarderOptions {\n  domain: string;\n}\n","import { ApiService } from \"../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarderOptions\";\n\nexport class SimpleLoginForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = \"https://app.simplelogin.io/api/alias/random/new\";\n    if (options.website != null) {\n      url += \"?hostname=\" + options.website;\n    }\n    requestInit.body = JSON.stringify({\n      note:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    try {\n      const json = await response.json();\n      if (json?.error != null) {\n        throw \"SimpleLogin error:\" + json.error;\n      }\n    } catch {\n      // Do nothing...\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { UsernameGenerationService as BaseUsernameGenerationService } from \"../abstractions/usernameGeneration.service\";\nimport { AnonAddyForwarder } from \"../emailForwarders/anonAddyForwarder\";\nimport { DuckDuckGoForwarder } from \"../emailForwarders/duckDuckGoForwarder\";\nimport { FastmailForwarder } from \"../emailForwarders/fastmailForwarder\";\nimport { FirefoxRelayForwarder } from \"../emailForwarders/firefoxRelayForwarder\";\nimport { Forwarder } from \"../emailForwarders/forwarder\";\nimport { ForwarderOptions } from \"../emailForwarders/forwarderOptions\";\nimport { SimpleLoginForwarder } from \"../emailForwarders/simpleLoginForwarder\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\n\nconst DefaultOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"simplelogin\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n};\n\nexport class UsernameGenerationService implements BaseUsernameGenerationService {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService\n  ) {}\n\n  generateUsername(options: any): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EEFLongWordList.length - 1);\n    let word = EEFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: any): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    let forwarder: Forwarder = null;\n    const forwarderOptions = new ForwarderOptions();\n    forwarderOptions.website = o.website;\n    if (o.forwardedService === \"simplelogin\") {\n      forwarder = new SimpleLoginForwarder();\n      forwarderOptions.apiKey = o.forwardedSimpleLoginApiKey;\n    } else if (o.forwardedService === \"anonaddy\") {\n      forwarder = new AnonAddyForwarder();\n      forwarderOptions.apiKey = o.forwardedAnonAddyApiToken;\n      forwarderOptions.anonaddy.domain = o.forwardedAnonAddyDomain;\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      forwarder = new FirefoxRelayForwarder();\n      forwarderOptions.apiKey = o.forwardedFirefoxApiToken;\n    } else if (o.forwardedService === \"fastmail\") {\n      forwarder = new FastmailForwarder();\n      forwarderOptions.apiKey = o.forwardedFastmailApiToken;\n    } else if (o.forwardedService === \"duckduckgo\") {\n      forwarder = new DuckDuckGoForwarder();\n      forwarderOptions.apiKey = o.forwardedDuckDuckGoToken;\n    }\n\n    if (forwarder == null) {\n      return null;\n    }\n\n    return forwarder.generate(this.apiService, forwarderOptions);\n  }\n\n  async getOptions(): Promise<any> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: any) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { PolicyService } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { TokenService } from \"../../abstractions/token.service\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"../../abstractions/vaultTimeout/vaultTimeoutSettings.service\";\nimport { PolicyType } from \"../../enums/policyType\";\n\nexport class VaultTimeoutSettingsService implements VaultTimeoutSettingsServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private stateService: StateService\n  ) {}\n\n  async setVaultTimeoutOptions(timeout: number, action: string): Promise<void> {\n    await this.stateService.setVaultTimeout(timeout);\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const token = await this.tokenService.getToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n    if ((timeout != null || timeout === 0) && action === \"logOut\" && action !== currentAction) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearToken();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setToken(token);\n    await this.tokenService.setRefreshToken(refreshToken);\n    await this.tokenService.setClientId(clientId);\n    await this.tokenService.setClientSecret(clientSecret);\n\n    await this.cryptoService.toggleKey();\n  }\n\n  async isPinLockSet(): Promise<[boolean, boolean]> {\n    const protectedPin = await this.stateService.getProtectedPin();\n    const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n    return [protectedPin != null, pinProtectedKey != null];\n  }\n\n  async isBiometricLockSet(): Promise<boolean> {\n    return await this.stateService.getBiometricUnlock();\n  }\n\n  async getVaultTimeout(userId?: string): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n\n    if (\n      await this.policyService.policyAppliesToUser(PolicyType.MaximumVaultTimeout, null, userId)\n    ) {\n      const policy = await this.policyService.getAll(PolicyType.MaximumVaultTimeout, userId);\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policy[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policy[0].data.minutes;\n      }\n\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId: userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as forge from \"node-forge\";\n\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { Utils } from \"../misc/utils\";\nimport { DecryptParameters } from \"../models/domain/decryptParameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n\n  constructor(win: Window | typeof global) {\n    this.crypto = typeof win.crypto !== \"undefined\" ? win.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof win.crypto.subtle !== \"undefined\" ? win.crypto.subtle : null;\n  }\n\n  async pbkdf2(\n    password: string | ArrayBuffer,\n    salt: string | ArrayBuffer,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number\n  ): Promise<ArrayBuffer> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"]\n    );\n    return await this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);\n  }\n\n  async hkdf(\n    ikm: ArrayBuffer,\n    salt: string | ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    return await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: ArrayBuffer,\n    info: string | ArrayBuffer,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t.buffer, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize).buffer;\n  }\n\n  async hash(\n    value: string | ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"\n  ): Promise<ArrayBuffer> {\n    if (algorithm === \"md5\") {\n      const md = algorithm === \"md5\" ? forge.md.md5.create() : forge.md.sha1.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data).buffer;\n    }\n\n    const valueBuf = this.toBuf(value);\n    return await this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);\n  }\n\n  async hmac(\n    value: ArrayBuffer,\n    key: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\"\n  ): Promise<ArrayBuffer> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    return await this.subtle.sign(signingAlgorithm, impKey, value);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: ArrayBuffer, b: ArrayBuffer): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>): Promise<string> {\n    const dataBuffer = forge.util.createBuffer(parameters.data);\n    const decipher = forge.cipher.createDecipher(\"AES-CBC\", parameters.encKey);\n    decipher.start({ iv: parameters.iv });\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(data: ArrayBuffer, iv: ArrayBuffer, key: ArrayBuffer): Promise<ArrayBuffer> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    return await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n  }\n\n  async rsaEncrypt(\n    data: ArrayBuffer,\n    publicKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    return await this.subtle.encrypt(rsaParams, impKey, data);\n  }\n\n  async rsaDecrypt(\n    data: ArrayBuffer,\n    privateKey: ArrayBuffer,\n    algorithm: \"sha1\" | \"sha256\"\n  ): Promise<ArrayBuffer> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    return await this.subtle.decrypt(rsaParams, impKey, data);\n  }\n\n  async rsaExtractPublicKey(privateKey: ArrayBuffer): Promise<ArrayBuffer> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    return await this.subtle.exportKey(\"spki\", impPublicKey);\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[ArrayBuffer, ArrayBuffer]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = (await this.subtle.generateKey(rsaParams, true, [\n      \"encrypt\",\n      \"decrypt\",\n    ])) as CryptoKeyPair;\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [publicKey, privateKey];\n  }\n\n  randomBytes(length: number): Promise<ArrayBuffer> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr.buffer);\n  }\n\n  private toBuf(value: string | ArrayBuffer): ArrayBuffer {\n    let buf: ArrayBuffer;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value).buffer;\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | ArrayBuffer): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n}\n","export class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs: any[]) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null\n  ): Promise<any[]> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage(\n    tab: chrome.tabs.Tab,\n    obj: any,\n    options: chrome.tabs.MessageSendOptions = null\n  ): Promise<any> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  static getBackgroundPage(): any {\n    return chrome.extension.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(chrome.extension.getViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, extensionPage = false, active = true) {\n    chrome.tabs.create({ url: url, active: active });\n  }\n\n  static messageListener(\n    name: string,\n    callback: (message: any, sender: chrome.runtime.MessageSender, response: any) => void\n  ) {\n    chrome.runtime.onMessage.addListener(\n      (msg: any, sender: chrome.runtime.MessageSender, response: any) => {\n        callback(msg, sender, response);\n      }\n    );\n  }\n\n  static sendMessage(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return chrome.runtime.sendMessage(message);\n  }\n\n  static async closeLoginTab() {\n    const tabs = await BrowserApi.tabsQuery({\n      active: true,\n      title: \"Bitwarden\",\n      windowType: \"normal\",\n      currentWindow: true,\n    });\n\n    if (tabs.length === 0) {\n      return;\n    }\n\n    const tabToClose = tabs[tabs.length - 1].id;\n    chrome.tabs.remove(tabToClose);\n  }\n\n  static async focusSpecifiedTab(tabId: number) {\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage(win: Window) {\n    return chrome.i18n.getUILanguage();\n  }\n\n  static reloadExtension(win: Window) {\n    if (win != null) {\n      return (win.location as any).reload(true);\n    } else {\n      return chrome.runtime.reload();\n    }\n  }\n\n  static reloadOpenWindows() {\n    const views = chrome.extension.getViews() as Window[];\n    views\n      .filter((w) => w.location.href != null)\n      .forEach((w) => {\n        w.location.reload();\n      });\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve, reject) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n}\n","import { BrowserApi } from \"./browserApi\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","export class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n}\n","import { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n}\n","import { SendType } from \"@bitwarden/common/enums/sendType\";\nimport { SendView } from \"@bitwarden/common/models/view/sendView\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n}\n","import {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"@bitwarden/common/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\n\n@Injectable()\nexport class PopupUtilsService {\n  constructor(private privateMode: boolean = false) {}\n\n  inSidebar(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=sidebar\") > -1;\n  }\n\n  inTab(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=tab\") > -1;\n  }\n\n  inPopout(win: Window): boolean {\n    return win.location.search !== \"\" && win.location.search.indexOf(\"uilocation=popout\") > -1;\n  }\n\n  inPopup(win: Window): boolean {\n    return (\n      win.location.search === \"\" ||\n      win.location.search.indexOf(\"uilocation=\") === -1 ||\n      win.location.search.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  inPrivateMode(): boolean {\n    return this.privateMode;\n  }\n\n  getContentScrollY(win: Window, scrollingContainer = \"main\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  setContentScrollY(win: Window, scrollY: number, scrollingContainer = \"main\"): void {\n    if (scrollY != null) {\n      const content = win.document.getElementsByTagName(scrollingContainer)[0];\n      content.scrollTop = scrollY;\n    }\n  }\n\n  popOut(win: Window, href: string = null): void {\n    if (href === null) {\n      href = win.location.href;\n    }\n\n    if (typeof chrome !== \"undefined\" && chrome.windows && chrome.windows.create) {\n      if (href.indexOf(\"?uilocation=\") > -1) {\n        href = href\n          .replace(\"uilocation=popup\", \"uilocation=popout\")\n          .replace(\"uilocation=tab\", \"uilocation=popout\")\n          .replace(\"uilocation=sidebar\", \"uilocation=popout\");\n      } else {\n        const hrefParts = href.split(\"#\");\n        href =\n          hrefParts[0] + \"?uilocation=popout\" + (hrefParts.length > 0 ? \"#\" + hrefParts[1] : \"\");\n      }\n\n      const bodyRect = document.querySelector(\"body\").getBoundingClientRect();\n      chrome.windows.create({\n        url: href,\n        type: \"popup\",\n        width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),\n        height: Math.round(bodyRect.height || 600),\n      });\n\n      if (this.inPopup(win)) {\n        BrowserApi.closePopup(win);\n      }\n    } else if (typeof chrome !== \"undefined\" && chrome.tabs && chrome.tabs.create) {\n      href = href\n        .replace(\"uilocation=popup\", \"uilocation=tab\")\n        .replace(\"uilocation=popout\", \"uilocation=tab\")\n        .replace(\"uilocation=sidebar\", \"uilocation=tab\");\n      chrome.tabs.create({\n        url: href,\n      });\n    }\n  }\n}\n","export default class AutofillScript {\n  script: string[][] = [];\n  documentUUID: any = {};\n  properties: any = {};\n  options: any = {};\n  metadata: any = {};\n  autosubmit: any = null;\n\n  constructor(documentUUID: string) {\n    this.documentUUID = documentUUID;\n  }\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly PasswordFieldIgnoreList: string[] = [\n    \"onetimepassword\",\n    \"captcha\",\n    \"findanything\",\n    \"forgot\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"mm\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\"honorific-prefix\", \"prefix\", \"title\"];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { FieldType } from \"@bitwarden/common/enums/fieldType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { FieldView } from \"@bitwarden/common/models/view/fieldView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport AutofillField from \"../models/autofillField\";\nimport AutofillPageDetails from \"../models/autofillPageDetails\";\nimport AutofillScript from \"../models/autofillScript\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport {\n  AutoFillOptions,\n  AutofillService as AutofillServiceInterface,\n  PageDetail,\n  FormData,\n} from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofillConstants\";\n\nexport interface GenerateFillScriptOptions {\n  skipUsernameOnlyFill: boolean;\n  onlyEmptyFields: boolean;\n  onlyVisibleFields: boolean;\n  fillNewPassword: boolean;\n  cipher: CipherView;\n}\n\nexport default class AutofillService implements AutofillServiceInterface {\n  constructor(\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventService: EventService,\n    private logService: LogService\n  ) {}\n\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): FormData[] {\n    const formData: FormData[] = [];\n\n    const passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      true,\n      true,\n      false,\n      false\n    );\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  async doAutoFill(options: AutoFillOptions) {\n    const tab = options.tab;\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    let totpPromise: Promise<string> = null;\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    let didAutofill = false;\n    options.pageDetails.forEach((pd) => {\n      // make sure we're still on correct tab\n      if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n        return;\n      }\n\n      const fillScript = this.generateFillScript(pd.details, {\n        skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n        onlyEmptyFields: options.onlyEmptyFields || false,\n        onlyVisibleFields: options.onlyVisibleFields || false,\n        fillNewPassword: options.fillNewPassword || false,\n        cipher: options.cipher,\n      });\n\n      if (!fillScript || !fillScript.script || !fillScript.script.length) {\n        return;\n      }\n\n      // Add a small delay between operations\n      fillScript.properties.delay_between_operations = 20;\n\n      didAutofill = true;\n      if (!options.skipLastUsed) {\n        this.cipherService.updateLastUsedDate(options.cipher.id);\n      }\n\n      BrowserApi.tabSendMessage(\n        tab,\n        {\n          command: \"fillForm\",\n          fillScript: fillScript,\n          url: tab.url,\n        },\n        { frameId: pd.frameId }\n      );\n\n      if (\n        options.cipher.type !== CipherType.Login ||\n        totpPromise ||\n        !options.cipher.login.totp ||\n        (!canAccessPremium && !options.cipher.organizationUseTotp)\n      ) {\n        return;\n      }\n\n      totpPromise = this.stateService.getDisableAutoTotpCopy().then((disabled) => {\n        if (!disabled) {\n          return this.totpService.getCode(options.cipher.login.totp);\n        }\n        return null;\n      });\n    });\n\n    if (didAutofill) {\n      this.eventService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totpPromise != null) {\n        return await totpPromise;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  async doAutoFillOnTab(pageDetails: PageDetail[], tab: chrome.tabs.Tab, fromCommand: boolean) {\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n\n      if (cipher == null) {\n        return null;\n      }\n    }\n\n    if (cipher.reprompt !== CipherRepromptType.None) {\n      return;\n    }\n\n    const totpCode = await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n    });\n\n    // Update last used index as autofill has succeed\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  async doAutoFillActiveTab(pageDetails: PageDetail[], fromCommand: boolean) {\n    const tab = await this.getActiveTab();\n    if (!tab || !tab.url) {\n      return;\n    }\n\n    return await this.doAutoFillOnTab(pageDetails, tab, fromCommand);\n  }\n\n  // Helpers\n\n  private async getActiveTab(): Promise<chrome.tabs.Tab> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  private generateFillScript(\n    pageDetails: AutofillPageDetails,\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript(pageDetails.documentUUID);\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f) => {\n        if (AutofillService.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val: string;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId) as string;\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          AutofillService.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  private generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    const login = options.cipher.login;\n\n    if (!login.password || login.password === \"\") {\n      // No password for this login. Maybe they just wanted to auto-fill some custom fields?\n      fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n      return fillScript;\n    }\n\n    let passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = AutofillService.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const passwordFieldsForForm: AutofillField[] = [];\n      passwordFields.forEach((passField) => {\n        if (formKey === passField.form) {\n          passwordFieldsForForm.push(passField);\n        }\n      });\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n    }\n\n    if (!passwordFields.length && !options.skipUsernameOnlyFill) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f) => {\n        if (\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      AutofillService.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      AutofillService.fillByOpid(fillScript, p, login.password);\n    });\n\n    fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && AutofillService.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      AutofillService.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && AutofillService.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      AutofillService.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (\n      fillFields.exp &&\n      AutofillService.hasValue(card.expMonth) &&\n      AutofillService.hasValue(card.expYear)\n    ) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i]\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i]\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i]\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private fieldAttrsContain(field: AutofillField, containsVal: string) {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      if (this.isExcludedType(f.type, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (AutofillService.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (AutofillService.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (AutofillService.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && AutofillService.hasValue(identity.address1)) {\n      let address = \"\";\n      if (AutofillService.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (AutofillService.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (AutofillService.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  private isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  private static isFieldMatch(\n    value: string,\n    options: string[],\n    containsOptions?: string[]\n  ): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields\n    );\n  }\n\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField }\n  ) {\n    let doFill = false;\n    if (AutofillService.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (\n              AutofillService.hasValue(option[j]) &&\n              option[j].toLowerCase() === dataValue.toLowerCase()\n            ) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      AutofillService.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  static loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean\n  ) {\n    const arr: AutofillField[] = [];\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        return;\n      }\n\n      const isPassword = f.type === \"password\";\n      const valueIsLikePassword = (value: string) => {\n        if (value == null) {\n          return false;\n        }\n        // Removes all whitespace, _ and - characters\n        // eslint-disable-next-line\n        const cleanedValue = value.toLowerCase().replace(/[\\s_\\-]/g, \"\");\n\n        if (cleanedValue.indexOf(\"password\") < 0) {\n          return false;\n        }\n\n        if (AutoFillConstants.PasswordFieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1)) {\n          return false;\n        }\n\n        return true;\n      };\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n        if (valueIsLikePassword(f.htmlID)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.htmlName)) {\n          return true;\n        }\n        if (valueIsLikePassword(f.placeholder)) {\n          return true;\n        }\n        return false;\n      };\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n    return arr;\n  }\n\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean\n  ) {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\"\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!AutofillService.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  static fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (AutofillService.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-tag\"]) &&\n      this.fuzzyMatch(names, field[\"label-tag\"])\n    ) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-left\"]) &&\n      this.fuzzyMatch(names, field[\"label-left\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-top\"]) &&\n      this.fuzzyMatch(names, field[\"label-top\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-aria\"]) &&\n      this.fuzzyMatch(names, field[\"label-aria\"])\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private static fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static hasValue(str: string): boolean {\n    return str && str !== \"\";\n  }\n\n  static setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  static fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  static forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n}\n","import { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { EnvironmentService } from \"@bitwarden/common/services/environment.service\";\n\nimport { devFlagEnabled, devFlagValue } from \"../flags\";\nimport { GroupPolicyEnvironment } from \"../types/group-policy-environment\";\n\nexport class BrowserEnvironmentService extends EnvironmentService {\n  constructor(stateService: StateService, private logService: LogService) {\n    super(stateService);\n  }\n\n  async hasManagedEnvironment(): Promise<boolean> {\n    try {\n      return (await this.getManagedEnvironment()) != null;\n    } catch (e) {\n      this.logService.error(e);\n      return false;\n    }\n  }\n\n  async settingsHaveChanged() {\n    const env = await this.getManagedEnvironment();\n\n    return (\n      env.base != this.baseUrl ||\n      env.webVault != this.webVaultUrl ||\n      env.api != this.webVaultUrl ||\n      env.identity != this.identityUrl ||\n      env.icons != this.iconsUrl ||\n      env.notifications != this.notificationsUrl ||\n      env.events != this.eventsUrl\n    );\n  }\n\n  getManagedEnvironment(): Promise<GroupPolicyEnvironment> {\n    return devFlagEnabled(\"managedEnvironment\")\n      ? new Promise((resolve) => resolve(devFlagValue(\"managedEnvironment\")))\n      : new Promise((resolve, reject) => {\n          chrome.storage.managed.get(\"environment\", (result) => {\n            if (chrome.runtime.lastError) {\n              return reject(chrome.runtime.lastError);\n            }\n\n            resolve(result.environment);\n          });\n        });\n  }\n\n  async setUrlsToManagedEnvironment() {\n    const env = await this.getManagedEnvironment();\n    await this.setUrls({\n      base: env.base,\n      webVault: env.webVault,\n      api: env.api,\n      identity: env.identity,\n      icons: env.icons,\n      notifications: env.notifications,\n      events: env.events,\n    });\n  }\n}\n","import { concatMap, Observable, Subject } from \"rxjs\";\n\nimport {\n  EnvironmentService as EnvironmentServiceAbstraction,\n  Urls,\n} from \"../abstractions/environment.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\n\nexport class EnvironmentService implements EnvironmentServiceAbstraction {\n  private readonly urlsSubject = new Subject<Urls>();\n  urls: Observable<Urls> = this.urlsSubject;\n\n  protected baseUrl: string;\n  protected webVaultUrl: string;\n  protected apiUrl: string;\n  protected identityUrl: string;\n  protected iconsUrl: string;\n  protected notificationsUrl: string;\n  protected eventsUrl: string;\n  private keyConnectorUrl: string;\n  private scimUrl: string = null;\n\n  constructor(private stateService: StateService) {\n    this.stateService.activeAccount$\n      .pipe(\n        concatMap(async () => {\n          await this.setUrlsFromStorage();\n        })\n      )\n      .subscribe();\n  }\n\n  hasBaseUrl() {\n    return this.baseUrl != null;\n  }\n\n  getNotificationsUrl() {\n    if (this.notificationsUrl != null) {\n      return this.notificationsUrl;\n    }\n\n    if (this.baseUrl != null) {\n      return this.baseUrl + \"/notifications\";\n    }\n\n    return \"https://notifications.bitwarden.com\";\n  }\n\n  getWebVaultUrl() {\n    if (this.webVaultUrl != null) {\n      return this.webVaultUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl;\n    }\n    return \"https://vault.bitwarden.com\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  getIconsUrl() {\n    if (this.iconsUrl != null) {\n      return this.iconsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/icons\";\n    }\n\n    return \"https://icons.bitwarden.net\";\n  }\n\n  getApiUrl() {\n    if (this.apiUrl != null) {\n      return this.apiUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/api\";\n    }\n\n    return \"https://api.bitwarden.com\";\n  }\n\n  getIdentityUrl() {\n    if (this.identityUrl != null) {\n      return this.identityUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/identity\";\n    }\n\n    return \"https://identity.bitwarden.com\";\n  }\n\n  getEventsUrl() {\n    if (this.eventsUrl != null) {\n      return this.eventsUrl;\n    }\n\n    if (this.baseUrl) {\n      return this.baseUrl + \"/events\";\n    }\n\n    return \"https://events.bitwarden.com\";\n  }\n\n  getKeyConnectorUrl() {\n    return this.keyConnectorUrl;\n  }\n\n  getScimUrl() {\n    if (this.scimUrl != null) {\n      return this.scimUrl + \"/v2\";\n    }\n\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://scim.bitwarden.com/v2\"\n      : this.getWebVaultUrl() + \"/scim/v2\";\n  }\n\n  async setUrlsFromStorage(): Promise<void> {\n    const urls: any = await this.stateService.getEnvironmentUrls();\n    const envUrls = new EnvironmentUrls();\n\n    this.baseUrl = envUrls.base = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = envUrls.api = urls.api;\n    this.identityUrl = envUrls.identity = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = envUrls.events = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    // scimUrl is not saved to storage\n  }\n\n  async setUrls(urls: Urls): Promise<Urls> {\n    urls.base = this.formatUrl(urls.base);\n    urls.webVault = this.formatUrl(urls.webVault);\n    urls.api = this.formatUrl(urls.api);\n    urls.identity = this.formatUrl(urls.identity);\n    urls.icons = this.formatUrl(urls.icons);\n    urls.notifications = this.formatUrl(urls.notifications);\n    urls.events = this.formatUrl(urls.events);\n    urls.keyConnector = this.formatUrl(urls.keyConnector);\n\n    // scimUrl cannot be cleared\n    urls.scim = this.formatUrl(urls.scim) ?? this.scimUrl;\n\n    await this.stateService.setEnvironmentUrls({\n      base: urls.base,\n      api: urls.api,\n      identity: urls.identity,\n      webVault: urls.webVault,\n      icons: urls.icons,\n      notifications: urls.notifications,\n      events: urls.events,\n      keyConnector: urls.keyConnector,\n      // scimUrl is not saved to storage\n    });\n\n    this.baseUrl = urls.base;\n    this.webVaultUrl = urls.webVault;\n    this.apiUrl = urls.api;\n    this.identityUrl = urls.identity;\n    this.iconsUrl = urls.icons;\n    this.notificationsUrl = urls.notifications;\n    this.eventsUrl = urls.events;\n    this.keyConnectorUrl = urls.keyConnector;\n    this.scimUrl = urls.scim;\n\n    this.urlsSubject.next(urls);\n\n    return urls;\n  }\n\n  getUrls() {\n    return {\n      base: this.baseUrl,\n      webVault: this.webVaultUrl,\n      api: this.apiUrl,\n      identity: this.identityUrl,\n      icons: this.iconsUrl,\n      notifications: this.notificationsUrl,\n      events: this.eventsUrl,\n      keyConnector: this.keyConnectorUrl,\n      scim: this.scimUrl,\n    };\n  }\n\n  private formatUrl(url: string): string {\n    if (url == null || url === \"\") {\n      return null;\n    }\n\n    url = url.replace(/\\/+$/g, \"\");\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n      url = \"https://\" + url;\n    }\n\n    return url.trim();\n  }\n\n  isCloud(): boolean {\n    return [\"https://api.bitwarden.com\", \"https://vault.bitwarden.com/api\"].includes(\n      this.getApiUrl()\n    );\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { EncryptedOrganizationKeyData } from \"../../models/data/encryptedOrganizationKeyData\";\n\nimport { EncString } from \"./encString\";\nimport { SymmetricCryptoKey } from \"./symmetricCryptoKey\";\n\nexport abstract class BaseEncryptedOrganizationKey {\n  decrypt: (cryptoService: CryptoService) => Promise<SymmetricCryptoKey>;\n\n  static fromData(data: EncryptedOrganizationKeyData) {\n    switch (data.type) {\n      case \"organization\":\n        return new EncryptedOrganizationKey(data.key);\n\n      case \"provider\":\n        return new ProviderEncryptedOrganizationKey(data.key, data.providerId);\n\n      default:\n        return null;\n    }\n  }\n}\n\nexport class EncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const decValue = await cryptoService.rsaDecrypt(this.key);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"organization\",\n      key: this.key,\n    };\n  }\n}\n\nexport class ProviderEncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string, private providerId: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const providerKey = await cryptoService.getProviderKey(this.providerId);\n    const decValue = await cryptoService.decryptToBytes(new EncString(this.key), providerKey);\n    return new SymmetricCryptoKey(decValue);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"provider\",\n      key: this.key,\n      providerId: this.providerId,\n    };\n  }\n}\n","import * as bigInt from \"big-integer\";\n\nimport { AbstractEncryptService } from \"../abstractions/abstractEncrypt.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"../abstractions/cryptoFunction.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { EncryptionType } from \"../enums/encryptionType\";\nimport { HashPurpose } from \"../enums/hashPurpose\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { KeySuffixOptions } from \"../enums/keySuffixOptions\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { Utils } from \"../misc/utils\";\nimport { EEFLongWordList } from \"../misc/wordlist\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EncArrayBuffer } from \"../models/domain/encArrayBuffer\";\nimport { EncString } from \"../models/domain/encString\";\nimport { BaseEncryptedOrganizationKey } from \"../models/domain/encryptedOrganizationKey\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { ProfileOrganizationResponse } from \"../models/response/profileOrganizationResponse\";\nimport { ProfileProviderOrganizationResponse } from \"../models/response/profileProviderOrganizationResponse\";\nimport { ProfileProviderResponse } from \"../models/response/profileProviderResponse\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: AbstractEncryptService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService\n  ) {}\n\n  async setKey(key: SymmetricCryptoKey, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(key, { userId: userId });\n    await this.storeKey(key, userId);\n  }\n\n  async setKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async setEncKey(encKey: string): Promise<void> {\n    if (encKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedCryptoSymmetricKey(null);\n    await this.stateService.setEncryptedCryptoSymmetricKey(encKey);\n  }\n\n  async setEncPrivateKey(encPrivateKey: string): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateService.setDecryptedPrivateKey(null);\n    await this.stateService.setEncryptedPrivateKey(encPrivateKey);\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[] = [],\n    providerOrgs: ProfileProviderOrganizationResponse[] = []\n  ): Promise<void> {\n    const encOrgKeyData: { [orgId: string]: EncryptedOrganizationKeyData } = {};\n\n    orgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"organization\",\n        key: org.key,\n      };\n    });\n\n    providerOrgs.forEach((org) => {\n      encOrgKeyData[org.id] = {\n        type: \"provider\",\n        providerId: org.providerId,\n        key: org.key,\n      };\n    });\n\n    await this.stateService.setDecryptedOrganizationKeys(null);\n    return await this.stateService.setEncryptedOrganizationKeys(encOrgKeyData);\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    const providerKeys: any = {};\n    providers.forEach((provider) => {\n      providerKeys[provider.id] = provider.key;\n    });\n\n    await this.stateService.setDecryptedProviderKeys(null);\n    return await this.stateService.setEncryptedProviderKeys(providerKeys);\n  }\n\n  async getKey(keySuffix?: KeySuffixOptions, userId?: string): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getCryptoMasterKey({ userId: userId });\n\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    keySuffix ||= KeySuffixOptions.Auto;\n    const symmetricKey = await this.getKeyFromStorage(keySuffix, userId);\n\n    if (symmetricKey != null) {\n      // TODO: Refactor here so get key doesn't also set key\n      this.setKey(symmetricKey, userId);\n    }\n\n    return symmetricKey;\n  }\n\n  async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: string\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.retrieveKeyFromStorage(keySuffix, userId);\n    if (key != null) {\n      const symmetricKey = new SymmetricCryptoKey(Utils.fromB64ToArray(key).buffer);\n\n      if (!(await this.validateKey(symmetricKey))) {\n        this.logService.warning(\"Wrong key, throwing away stored key\");\n        await this.clearSecretKeyStore(userId);\n        return null;\n      }\n\n      return symmetricKey;\n    }\n    return null;\n  }\n\n  async getKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, key: SymmetricCryptoKey): Promise<boolean> {\n    const storedKeyHash = await this.getKeyHash();\n    if (masterPassword != null && storedKeyHash != null) {\n      const localKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.LocalAuthorization\n      );\n      if (localKeyHash != null && storedKeyHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashPassword(\n        masterPassword,\n        key,\n        HashPurpose.ServerAuthorization\n      );\n      if (serverKeyHash != null && storedKeyHash === serverKeyHash) {\n        await this.setKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  @sequentialize(() => \"getEncKey\")\n  getEncKey(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    return this.getEncKeyHelper(key);\n  }\n\n  async getPublicKey(): Promise<ArrayBuffer> {\n    const inMemoryPublicKey = await this.stateService.getPublicKey();\n    if (inMemoryPublicKey != null) {\n      return inMemoryPublicKey;\n    }\n\n    const privateKey = await this.getPrivateKey();\n    if (privateKey == null) {\n      return null;\n    }\n\n    const publicKey = await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    await this.stateService.setPublicKey(publicKey);\n    return publicKey;\n  }\n\n  async getPrivateKey(): Promise<ArrayBuffer> {\n    const decryptedPrivateKey = await this.stateService.getDecryptedPrivateKey();\n    if (decryptedPrivateKey != null) {\n      return decryptedPrivateKey;\n    }\n\n    const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n    if (encPrivateKey == null) {\n      return null;\n    }\n\n    const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), null);\n    await this.stateService.setDecryptedPrivateKey(privateKey);\n    return privateKey;\n  }\n\n  async getFingerprint(userId: string, publicKey?: ArrayBuffer): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      userId,\n      32,\n      \"sha256\"\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const result: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedOrganizationKeys = await this.stateService.getDecryptedOrganizationKeys();\n    if (decryptedOrganizationKeys != null && decryptedOrganizationKeys.size > 0) {\n      return decryptedOrganizationKeys;\n    }\n\n    const encOrgKeyData = await this.stateService.getEncryptedOrganizationKeys();\n    if (encOrgKeyData == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId of Object.keys(encOrgKeyData)) {\n      if (result.has(orgId)) {\n        continue;\n      }\n\n      const encOrgKey = BaseEncryptedOrganizationKey.fromData(encOrgKeyData[orgId]);\n      const decOrgKey = await encOrgKey.decrypt(this);\n      result.set(orgId, decOrgKey);\n\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedOrganizationKeys(result);\n    }\n\n    return result;\n  }\n\n  async getOrgKey(orgId: string): Promise<SymmetricCryptoKey> {\n    if (orgId == null) {\n      return null;\n    }\n\n    const orgKeys = await this.getOrgKeys();\n    if (orgKeys == null || !orgKeys.has(orgId)) {\n      return null;\n    }\n\n    return orgKeys.get(orgId);\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Map<string, SymmetricCryptoKey>> {\n    const providerKeys: Map<string, SymmetricCryptoKey> = new Map<string, SymmetricCryptoKey>();\n    const decryptedProviderKeys = await this.stateService.getDecryptedProviderKeys();\n    if (decryptedProviderKeys != null && decryptedProviderKeys.size > 0) {\n      return decryptedProviderKeys;\n    }\n\n    const encProviderKeys = await this.stateService.getEncryptedProviderKeys();\n    if (encProviderKeys == null) {\n      return null;\n    }\n\n    let setKey = false;\n\n    for (const orgId in encProviderKeys) {\n      // eslint-disable-next-line\n      if (!encProviderKeys.hasOwnProperty(orgId)) {\n        continue;\n      }\n\n      const decValue = await this.rsaDecrypt(encProviderKeys[orgId]);\n      providerKeys.set(orgId, new SymmetricCryptoKey(decValue));\n      setKey = true;\n    }\n\n    if (setKey) {\n      await this.stateService.setDecryptedProviderKeys(providerKeys);\n    }\n\n    return providerKeys;\n  }\n\n  async getProviderKey(providerId: string): Promise<SymmetricCryptoKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const providerKeys = await this.getProviderKeys();\n    if (providerKeys == null || !providerKeys.has(providerId)) {\n      return null;\n    }\n\n    return providerKeys.get(providerId);\n  }\n\n  async hasKey(): Promise<boolean> {\n    return (\n      (await this.hasKeyInMemory()) ||\n      (await this.hasKeyStored(KeySuffixOptions.Auto)) ||\n      (await this.hasKeyStored(KeySuffixOptions.Biometric))\n    );\n  }\n\n  async hasKeyInMemory(userId?: string): Promise<boolean> {\n    return (await this.stateService.getCryptoMasterKey({ userId: userId })) != null;\n  }\n\n  async hasKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean> {\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto:\n        return (await this.stateService.getCryptoMasterKeyAuto({ userId: userId })) != null;\n      case KeySuffixOptions.Biometric:\n        return (await this.stateService.hasCryptoMasterKeyBiometric({ userId: userId })) === true;\n      default:\n        return false;\n    }\n  }\n\n  async hasEncKey(): Promise<boolean> {\n    return (await this.stateService.getEncryptedCryptoSymmetricKey()) != null;\n  }\n\n  async clearKey(clearSecretStorage = true, userId?: string): Promise<any> {\n    await this.stateService.setCryptoMasterKey(null, { userId: userId });\n    if (clearSecretStorage) {\n      await this.clearSecretKeyStore(userId);\n    }\n  }\n\n  async clearStoredKey(keySuffix: KeySuffixOptions) {\n    keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.setCryptoMasterKeyAuto(null)\n      : await this.stateService.setCryptoMasterKeyBiometric(null);\n  }\n\n  async clearKeyHash(userId?: string): Promise<any> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async clearEncKey(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedCryptoSymmetricKey(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedCryptoSymmetricKey(null, { userId: userId });\n    }\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: string): Promise<any> {\n    const keysToClear: Promise<void>[] = [\n      this.stateService.setDecryptedPrivateKey(null, { userId: userId }),\n      this.stateService.setPublicKey(null, { userId: userId }),\n    ];\n    if (!memoryOnly) {\n      keysToClear.push(this.stateService.setEncryptedPrivateKey(null, { userId: userId }));\n    }\n    return Promise.all(keysToClear);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedOrganizationKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedOrganizationKeys(null, { userId: userId });\n    }\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: string): Promise<void> {\n    await this.stateService.setDecryptedProviderKeys(null, { userId: userId });\n    if (!memoryOnly) {\n      await this.stateService.setEncryptedProviderKeys(null, { userId: userId });\n    }\n  }\n\n  async clearPinProtectedKey(userId?: string): Promise<any> {\n    return await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n  }\n\n  async clearKeys(userId?: string): Promise<any> {\n    await this.clearKey(true, userId);\n    await this.clearKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearEncKey(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinProtectedKey(userId);\n  }\n\n  async toggleKey(): Promise<any> {\n    const key = await this.getKey();\n\n    await this.setKey(key);\n  }\n\n  async makeKey(\n    password: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    let key: ArrayBuffer = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfIterations == null) {\n        kdfIterations = 5000;\n      } else if (kdfIterations < 5000) {\n        throw new Error(\"PBKDF2 iteration minimum is 5000.\");\n      }\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfIterations);\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  async makeKeyFromPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number,\n    protectedKeyCs: EncString = null\n  ): Promise<SymmetricCryptoKey> {\n    if (protectedKeyCs == null) {\n      const pinProtectedKey = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedKey == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      protectedKeyCs = new EncString(pinProtectedKey);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfIterations);\n    const decKey = await this.decryptToBytes(protectedKeyCs, pinKey);\n    return new SymmetricCryptoKey(decKey);\n  }\n\n  async makeShareKey(): Promise<[EncString, SymmetricCryptoKey]> {\n    const shareKey = await this.cryptoFunctionService.randomBytes(64);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey, publicKey);\n    return [encShareKey, new SymmetricCryptoKey(shareKey)];\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async makePinKey(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfIterations: number\n  ): Promise<SymmetricCryptoKey> {\n    const pinKey = await this.makeKey(pin, salt, kdf, kdfIterations);\n    return await this.stretchKey(pinKey);\n  }\n\n  async makeSendKey(keyMaterial: ArrayBuffer): Promise<SymmetricCryptoKey> {\n    const sendKey = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(sendKey);\n  }\n\n  async hashPassword(\n    password: string,\n    key: SymmetricCryptoKey,\n    hashPurpose?: HashPurpose\n  ): Promise<string> {\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async makeEncKey(key: SymmetricCryptoKey): Promise<[SymmetricCryptoKey, EncString]> {\n    const theKey = await this.getKeyForUserEncryption(key);\n    const encKey = await this.cryptoFunctionService.randomBytes(64);\n    return this.buildEncKey(theKey, encKey);\n  }\n\n  async remakeEncKey(\n    key: SymmetricCryptoKey,\n    encKey?: SymmetricCryptoKey\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (encKey == null) {\n      encKey = await this.getEncKey();\n    }\n    return this.buildEncKey(key, encKey.key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encrypt\n   */\n  async encrypt(plainValue: string | ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncString> {\n    key = await this.getKeyForUserEncryption(key);\n    return await this.encryptService.encrypt(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encryptToBytes\n   */\n  async encryptToBytes(plainValue: ArrayBuffer, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    key = await this.getKeyForUserEncryption(key);\n    return this.encryptService.encryptToBytes(plainValue, key);\n  }\n\n  async rsaEncrypt(data: ArrayBuffer, publicKey?: ArrayBuffer): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: ArrayBuffer): Promise<ArrayBuffer> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]).buffer;\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    const keyForEnc = await this.getKeyForUserEncryption(key);\n    return this.encryptService.decryptToBytes(encString, keyForEnc);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToUtf8\n   */\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    key = await this.getKeyForUserEncryption(key);\n    return await this.encryptService.decryptToUtf8(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptFromBytes(encBuffer: EncArrayBuffer, key: SymmetricCryptoKey): Promise<ArrayBuffer> {\n    if (encBuffer == null) {\n      throw new Error(\"No buffer provided for decryption.\");\n    }\n\n    key = await this.getKeyForUserEncryption(key);\n\n    return this.encryptService.decryptToBytes(encBuffer, key);\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  async validateKey(key: SymmetricCryptoKey) {\n    try {\n      const encPrivateKey = await this.stateService.getEncryptedPrivateKey();\n      const encKey = await this.getEncKeyHelper(key);\n      if (encPrivateKey == null || encKey == null) {\n        return false;\n      }\n\n      const privateKey = await this.decryptToBytes(new EncString(encPrivateKey), encKey);\n      await this.cryptoFunctionService.rsaExtractPublicKey(privateKey);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // ---HELPERS---\n\n  protected async storeKey(key: SymmetricCryptoKey, userId?: string) {\n    if (await this.shouldStoreKey(KeySuffixOptions.Auto, userId)) {\n      await this.stateService.setCryptoMasterKeyAuto(key.keyB64, { userId: userId });\n    } else if (await this.shouldStoreKey(KeySuffixOptions.Biometric, userId)) {\n      await this.stateService.setCryptoMasterKeyBiometric(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n      await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: string) {\n    let shouldStoreKey = false;\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n      shouldStoreKey = vaultTimeout == null;\n    } else if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlock = await this.stateService.getBiometricUnlock({ userId: userId });\n      shouldStoreKey = biometricUnlock && this.platformUtilService.supportsSecureStorage();\n    }\n    return shouldStoreKey;\n  }\n\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string) {\n    return keySuffix === KeySuffixOptions.Auto\n      ? await this.stateService.getCryptoMasterKeyAuto({ userId: userId })\n      : await this.stateService.getCryptoMasterKeyBiometric({ userId: userId });\n  }\n\n  async getKeyForUserEncryption(key?: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    if (key != null) {\n      return key;\n    }\n\n    const encKey = await this.getEncKey();\n    if (encKey != null) {\n      return encKey;\n    }\n\n    // Legacy support: encryption used to be done with the user key (derived from master password).\n    // Users who have not migrated will have a null encKey and must use the user key instead.\n    return await this.getKey();\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey.buffer);\n  }\n\n  private async hashPhrase(hash: ArrayBuffer, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EEFLongWordList.length);\n      hashNumber = hashNumber.divide(EEFLongWordList.length);\n      phrase.push(EEFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildEncKey(\n    key: SymmetricCryptoKey,\n    encKey: ArrayBuffer\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    let encKeyEnc: EncString = null;\n    if (key.key.byteLength === 32) {\n      const newKey = await this.stretchKey(key);\n      encKeyEnc = await this.encrypt(encKey, newKey);\n    } else if (key.key.byteLength === 64) {\n      encKeyEnc = await this.encrypt(encKey, key);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(encKey), encKeyEnc];\n  }\n\n  private async clearSecretKeyStore(userId?: string): Promise<void> {\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyBiometric(null, { userId: userId });\n  }\n\n  private async getEncKeyHelper(key: SymmetricCryptoKey = null): Promise<SymmetricCryptoKey> {\n    const inMemoryKey = await this.stateService.getDecryptedCryptoSymmetricKey();\n    if (inMemoryKey != null) {\n      return inMemoryKey;\n    }\n\n    const encKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    if (encKey == null) {\n      return null;\n    }\n\n    if (key == null) {\n      key = await this.getKey();\n    }\n    if (key == null) {\n      return null;\n    }\n\n    let decEncKey: ArrayBuffer;\n    const encKeyCipher = new EncString(encKey);\n    if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_B64) {\n      decEncKey = await this.decryptToBytes(encKeyCipher, key);\n    } else if (encKeyCipher.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(key);\n      decEncKey = await this.decryptToBytes(encKeyCipher, newKey);\n    } else {\n      throw new Error(\"Unsupported encKey type.\");\n    }\n    if (decEncKey == null) {\n      return null;\n    }\n    const symmetricCryptoKey = new SymmetricCryptoKey(decEncKey);\n    await this.stateService.setDecryptedCryptoSymmetricKey(symmetricCryptoKey);\n    return symmetricCryptoKey;\n  }\n}\n","import { KeySuffixOptions } from \"@bitwarden/common/enums/keySuffixOptions\";\nimport { CryptoService } from \"@bitwarden/common/services/crypto.service\";\n\nexport class BrowserCryptoService extends CryptoService {\n  protected async retrieveKeyFromStorage(keySuffix: KeySuffixOptions) {\n    if (keySuffix === \"biometric\") {\n      await this.platformUtilService.authenticateBiometric();\n      return (await this.getKey())?.keyB64;\n    }\n\n    return await super.retrieveKeyFromStorage(keySuffix);\n  }\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  Mobile = \"mobile\",\n  Cli = \"cli\",\n  DirectoryConnector = \"connector\",\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\n\nexport default abstract class AbstractChromeStorageService implements AbstractStorageService {\n  protected abstract chromeStorageApi: chrome.storage.StorageArea;\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return new Promise<void>((resolve) => {\n        this.chromeStorageApi.remove(key, () => {\n          resolve();\n        });\n      });\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import AbstractChromeStorageService from \"./abstractChromeStorageApi.service\";\n\nexport default class BrowserLocalStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi = chrome.storage.local;\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    return BrowserApi.sendMessage(subscriber, arg);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { ClientType } from \"@bitwarden/common/enums/clientType\";\nimport { DeviceType } from \"@bitwarden/common/enums/deviceType\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\n\nconst DialogPromiseExpiration = 600000; // 10 minutes\n\nexport default class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private showDialogResolves = new Map<number, { resolve: (value: boolean) => void; date: Date }>();\n  private passwordDialogResolves = new Map<\n    number,\n    { tryResolve: (canceled: boolean, password: string) => Promise<boolean>; date: Date }\n  >();\n  private deviceCache: DeviceType = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>\n  ) {}\n\n  getDevice(): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    ) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (\n      (!!(window as any).opr && !!opr.addons) ||\n      !!(window as any).opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    ) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (navigator.userAgent.indexOf(\" Edg/\") !== -1) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (navigator.userAgent.indexOf(\" Vivaldi/\") !== -1) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if ((window as any).chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (navigator.userAgent.indexOf(\" Safari/\") !== -1) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  async isViewOpen(): Promise<boolean> {\n    if (await BrowserApi.isPopupOpen()) {\n      return true;\n    }\n\n    if (this.isSafari()) {\n      return false;\n    }\n\n    const sidebarView = this.sidebarViewName();\n    const sidebarOpen =\n      sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;\n    if (sidebarOpen) {\n      return true;\n    }\n\n    const tabOpen = chrome.extension.getViews({ type: \"tab\" }).length > 0;\n    return tabOpen;\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n\n  showDialog(\n    body: string,\n    title?: string,\n    confirmText?: string,\n    cancelText?: string,\n    type?: string,\n    bodyIsHtml = false\n  ) {\n    const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    this.messagingService.send(\"showDialog\", {\n      text: bodyIsHtml ? null : body,\n      html: bodyIsHtml ? body : null,\n      title: title,\n      confirmText: confirmText,\n      cancelText: cancelText,\n      type: type,\n      dialogId: dialogId,\n    });\n    return new Promise<boolean>((resolve) => {\n      this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });\n    });\n  }\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  copyToClipboard(text: string, options?: any): void {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n    const clearing = options ? !!options.clearing : false;\n    const clearMs: number = options && options.clearMs ? options.clearMs : null;\n\n    if (this.isSafari()) {\n      SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.writeText\n    ) {\n      (win as any).navigator.clipboard.writeText(text).then(() => {\n        if (!clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      });\n    } else if ((win as any).clipboardData && (win as any).clipboardData.setData) {\n      // IE specific code path to prevent textarea being shown while dialog is visible.\n      (win as any).clipboardData.setData(\"Text\", text);\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"copy\")) {\n      if (this.isChrome() && text === \"\") {\n        text = \"\\u0000\";\n      }\n\n      const textarea = doc.createElement(\"textarea\");\n      textarea.textContent = text == null || text === \"\" ? \" \" : text;\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.select();\n\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"copy\") && !clearing && this.clipboardWriteCallback != null) {\n          this.clipboardWriteCallback(text, clearMs);\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Copy to clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n  }\n\n  async readFromClipboard(options?: any): Promise<string> {\n    let win = window;\n    let doc = window.document;\n    if (options && (options.window || options.win)) {\n      win = options.window || options.win;\n      doc = win.document;\n    } else if (options && options.doc) {\n      doc = options.doc;\n    }\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    } else if (\n      this.isFirefox() &&\n      (win as any).navigator.clipboard &&\n      (win as any).navigator.clipboard.readText\n    ) {\n      return await (win as any).navigator.clipboard.readText();\n    } else if (doc.queryCommandSupported && doc.queryCommandSupported(\"paste\")) {\n      const textarea = doc.createElement(\"textarea\");\n      // Prevent scrolling to bottom of page in MS Edge.\n      textarea.style.position = \"fixed\";\n      doc.body.appendChild(textarea);\n      textarea.focus();\n      try {\n        // Security exception may be thrown by some browsers.\n        if (doc.execCommand(\"paste\")) {\n          return textarea.value;\n        }\n      } catch (e) {\n        // eslint-disable-next-line\n        console.warn(\"Read from clipboard failed.\", e);\n      } finally {\n        doc.body.removeChild(textarea);\n      }\n    }\n    return null;\n  }\n\n  resolveDialogPromise(dialogId: number, confirmed: boolean) {\n    if (this.showDialogResolves.has(dialogId)) {\n      const resolveObj = this.showDialogResolves.get(dialogId);\n      resolveObj.resolve(confirmed);\n      this.showDialogResolves.delete(dialogId);\n    }\n\n    // Clean up old promises\n    this.showDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.showDialogResolves.delete(key);\n      }\n    });\n  }\n\n  async resolvePasswordDialogPromise(\n    dialogId: number,\n    canceled: boolean,\n    password: string\n  ): Promise<boolean> {\n    let result = false;\n    if (this.passwordDialogResolves.has(dialogId)) {\n      const resolveObj = this.passwordDialogResolves.get(dialogId);\n      if (await resolveObj.tryResolve(canceled, password)) {\n        this.passwordDialogResolves.delete(dialogId);\n        result = true;\n      }\n    }\n\n    // Clean up old promises\n    this.passwordDialogResolves.forEach((val, key) => {\n      const age = new Date().getTime() - val.date.getTime();\n      if (age > DialogPromiseExpiration) {\n        this.passwordDialogResolves.delete(key);\n      }\n    });\n\n    return result;\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"android\") {\n      return false;\n    }\n\n    if (this.isFirefox()) {\n      return parseInt((await browser.runtime.getBrowserInfo()).version.split(\".\")[0], 10) >= 87;\n    }\n\n    return true;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  sidebarViewName(): string {\n    if ((window as any).chrome.sidebarAction && this.isFirefox()) {\n      return \"sidebar\";\n    } else if (this.isOpera() && typeof opr !== \"undefined\" && opr.sidebarAction) {\n      return \"sidebar_panel\";\n    }\n\n    return null;\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Account } from \"./account\";\nimport { GlobalState } from \"./globalState\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n\n  // TODO, make Jsonify<State,TGlobalState,TAccount> work. It currently doesn't because Globals doesn't implement Jsonify.\n  static fromJSON<TGlobalState extends GlobalState, TAccount extends Account>(\n    obj: any\n  ): State<TGlobalState, TAccount> {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new State(null), obj, {\n      accounts: State.buildAccountMapFromJSON(obj?.accounts),\n    });\n  }\n\n  private static buildAccountMapFromJSON(\n    jsonAccounts: Jsonify<{ [userId: string]: Jsonify<Account> }>\n  ) {\n    if (!jsonAccounts) {\n      return {};\n    }\n    const accounts: { [userId: string]: Account } = {};\n    for (const userId in jsonAccounts) {\n      accounts[userId] = Account.fromJSON(jsonAccounts[userId]);\n    }\n    return accounts;\n  }\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService as StateServiceAbstraction } from \"../abstractions/state.service\";\nimport { StateMigrationService } from \"../abstractions/stateMigration.service\";\nimport {\n  MemoryStorageServiceInterface,\n  AbstractStorageService,\n} from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation } from \"../enums/htmlStorageLocation\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { StorageLocation } from \"../enums/storageLocation\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { StateFactory } from \"../factories/stateFactory\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { LocalData } from \"../models/data/localData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { ServerConfigData } from \"../models/data/server-config.data\";\nimport {\n  Account,\n  AccountData,\n  AccountSettings,\n  AccountSettingsSettings,\n} from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { GlobalState } from \"../models/domain/globalState\";\nimport { Policy } from \"../models/domain/policy\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { SendView } from \"../models/view/sendView\";\n\nconst keys = {\n  state: \"state\",\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nconst DDG_SHARED_KEY = \"DuckDuckGoSharedKey\";\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account\n> implements StateServiceAbstraction<TAccount>\n{\n  accounts = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  private activeAccountSubject = new BehaviorSubject<string>(null);\n  activeAccount$ = this.activeAccountSubject.asObservable();\n\n  private activeAccountUnlockedSubject = new BehaviorSubject<boolean>(false);\n  activeAccountUnlocked$ = this.activeAccountUnlockedSubject.asObservable();\n\n  private hasBeenInited = false;\n  private isRecoveredSession = false;\n\n  private accountDiskCache = new Map<string, TAccount>();\n\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected memoryStorageService: AbstractStorageService & MemoryStorageServiceInterface,\n    protected logService: LogService,\n    protected stateMigrationService: StateMigrationService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected useAccountCache: boolean = true\n  ) {\n    // If the account gets changed, verify the new account is unlocked\n    this.activeAccountSubject\n      .pipe(\n        concatMap(async (userId) => {\n          if (userId == null && this.activeAccountUnlockedSubject.getValue() == false) {\n            return;\n          } else if (userId == null) {\n            this.activeAccountUnlockedSubject.next(false);\n          }\n\n          // FIXME: This should be refactored into AuthService or a similar service,\n          //  as checking for the existance of the crypto key is a low level\n          //  implementation detail.\n          this.activeAccountUnlockedSubject.next((await this.getCryptoMasterKey()) != null);\n        })\n      )\n      .subscribe();\n  }\n\n  async init(): Promise<void> {\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (await this.stateMigrationService.needsMigration()) {\n      await this.stateMigrationService.migrate();\n    }\n\n    await this.state().then(async (state) => {\n      if (state == null) {\n        await this.setState(new State<TGlobalState, TAccount>(this.createGlobals()));\n      } else {\n        this.isRecoveredSession = true;\n      }\n    });\n    await this.initAccountState();\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    if (this.isRecoveredSession) {\n      return;\n    }\n\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts =\n        (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n      for (const i in state.authenticatedAccounts) {\n        if (i != null) {\n          await this.syncAccountFromDisk(state.authenticatedAccounts[i]);\n        }\n      }\n      const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n      if (storedActiveUser != null) {\n        state.activeUserId = storedActiveUser;\n      }\n      await this.pushAccounts();\n      this.activeAccountSubject.next(state.activeUserId);\n\n      return state;\n    });\n  }\n\n  async syncAccountFromDisk(userId: string) {\n    if (userId == null) {\n      return;\n    }\n    await this.updateState(async (state) => {\n      if (state.accounts == null) {\n        state.accounts = {};\n      }\n      state.accounts[userId] = this.createAccount();\n      const diskAccount = await this.getAccountFromDisk({ userId: userId });\n      state.accounts[userId].profile = diskAccount.profile;\n      return state;\n    });\n  }\n\n  async addAccount(account: TAccount) {\n    account = await this.setAccountEnvironmentUrls(account);\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts.push(account.profile.userId);\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n      state.accounts[account.profile.userId] = account;\n      return state;\n    });\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    await this.setActiveUser(account.profile.userId);\n    this.activeAccountSubject.next(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    this.clearDecryptedDataForActiveUser();\n    await this.updateState(async (state) => {\n      state.activeUserId = userId;\n      await this.storageService.save(keys.activeUserId, userId);\n      this.activeAccountSubject.next(state.activeUserId);\n      return state;\n    });\n\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultInMemoryOptions());\n    await this.deAuthenticateAccount(options.userId);\n    if (options.userId === (await this.state())?.activeUserId) {\n      await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n  }\n\n  async getAccessToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.accessToken;\n  }\n\n  async setAccessToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.accessToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.addEditCipherInfo;\n  }\n\n  async setAddEditCipherInfo(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getAlwaysShowDock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.alwaysShowDock ?? false\n    );\n  }\n\n  async setAlwaysShowDock(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.alwaysShowDock = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getApiKeyClientId(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.profile?.apiKeyClientId;\n  }\n\n  async setApiKeyClientId(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.profile.apiKeyClientId = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getApiKeyClientSecret(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.keys?.apiKeyClientSecret;\n  }\n\n  async setApiKeyClientSecret(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.keys.apiKeyClientSecret = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getAutoConfirmFingerPrints(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoConfirmFingerPrints ?? false\n    );\n  }\n\n  async setAutoConfirmFingerprints(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoConfirmFingerPrints = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getAutoFillOnPageLoadDefault(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.autoFillOnPageLoadDefault ?? true\n    );\n  }\n\n  async setAutoFillOnPageLoadDefault(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.autoFillOnPageLoadDefault = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricAwaitingAcceptance(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricAwaitingAcceptance ?? false\n    );\n  }\n\n  async setBiometricAwaitingAcceptance(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricAwaitingAcceptance = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.biometricText;\n  }\n\n  async setBiometricText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.biometricText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getBiometricUnlock(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.biometricUnlock ?? false\n    );\n  }\n\n  async setBiometricUnlock(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.biometricUnlock = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCanAccessPremium(options?: StorageOptions): Promise<boolean> {\n    if (!(await this.getIsAuthenticated(options))) {\n      return false;\n    }\n\n    return (\n      (await this.getHasPremiumPersonally(options)) ||\n      (await this.getHasPremiumFromOrganization(options))\n    );\n  }\n\n  async getHasPremiumPersonally(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.profile?.hasPremiumPersonally;\n  }\n\n  async setHasPremiumPersonally(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumPersonally = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getHasPremiumFromOrganization(options?: StorageOptions): Promise<boolean> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    if (account.profile?.hasPremiumFromOrganization) {\n      return true;\n    }\n\n    // TODO: older server versions won't send the hasPremiumFromOrganization flag, so we're keeping the old logic\n    // for backwards compatibility. It can be removed after everyone has upgraded.\n    const organizations = await this.getOrganizations(options);\n    if (organizations == null) {\n      return false;\n    }\n\n    for (const id of Object.keys(organizations)) {\n      const o = organizations[id];\n      if (o.enabled && o.usersGetPremium && !o.isProviderUser) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setHasPremiumFromOrganization(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.hasPremiumFromOrganization = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getClearClipboard(options?: StorageOptions): Promise<number> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.clearClipboard ?? null\n    );\n  }\n\n  async setClearClipboard(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.clearClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getCollapsedGroupings(options?: StorageOptions): Promise<string[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.collapsedGroupings;\n  }\n\n  async setCollapsedGroupings(value: string[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.collapsedGroupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.cryptoMasterKey;\n  }\n\n  async setCryptoMasterKey(value: SymmetricCryptoKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoMasterKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n\n    if (options.userId == this.activeAccountSubject.getValue()) {\n      const nextValue = value != null;\n\n      // Avoid emitting if we are already unlocked\n      if (this.activeAccountUnlockedSubject.getValue() != nextValue) {\n        this.activeAccountUnlockedSubject.next(nextValue);\n      }\n    }\n  }\n\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.autoKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options\n    );\n  }\n\n  async setCryptoMasterKeyBiometric(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions()\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  @withPrototypeForArrayMembers(CipherView, CipherView.fromJSON)\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(CollectionView)\n  async getDecryptedCollections(options?: StorageOptions): Promise<CollectionView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.collections?.decrypted;\n  }\n\n  async setDecryptedCollections(value: CollectionView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.collections.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedCryptoSymmetricKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return account?.keys?.cryptoSymmetricKey?.decrypted;\n  }\n\n  async setDecryptedCryptoSymmetricKey(\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.cryptoSymmetricKey.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return this.recordToMap(account?.keys?.organizationKeys?.decrypted);\n  }\n\n  async setDecryptedOrganizationKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.organizationKeys.decrypted = this.mapToRecord(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.settings?.pinProtected?.decrypted;\n  }\n\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(Policy)\n  async getDecryptedPolicies(options?: StorageOptions): Promise<Policy[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.policies?.decrypted;\n  }\n\n  async setDecryptedPolicies(value: Policy[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.policies.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedPrivateKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys?.privateKey.decrypted;\n  }\n\n  async setDecryptedPrivateKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.privateKey.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDecryptedProviderKeys(\n    options?: StorageOptions\n  ): Promise<Map<string, SymmetricCryptoKey>> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    return this.recordToMap(account?.keys?.providerKeys?.decrypted);\n  }\n\n  async setDecryptedProviderKeys(\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.providerKeys.decrypted = this.mapToRecord(value);\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(SendView)\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getDefaultUriMatch(options?: StorageOptions): Promise<UriMatchType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.defaultUriMatch;\n  }\n\n  async setDefaultUriMatch(value: UriMatchType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.defaultUriMatch = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAddLoginNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAddLoginNotification ?? false\n    );\n  }\n\n  async setDisableAddLoginNotification(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAddLoginNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoBiometricsPrompt(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoBiometricsPrompt ?? false\n    );\n  }\n\n  async setDisableAutoBiometricsPrompt(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoBiometricsPrompt = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableAutoTotpCopy(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableAutoTotpCopy ?? false\n    );\n  }\n\n  async setDisableAutoTotpCopy(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableAutoTotpCopy = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableBadgeCounter(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableBadgeCounter ?? false\n    );\n  }\n\n  async setDisableBadgeCounter(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableBadgeCounter = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableChangedPasswordNotification(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableChangedPasswordNotification ?? false\n    );\n  }\n\n  async setDisableChangedPasswordNotification(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableChangedPasswordNotification = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableContextMenuItem(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableContextMenuItem ?? false\n    );\n  }\n\n  async setDisableContextMenuItem(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableContextMenuItem = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDisableFavicon(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.disableFavicon ?? false\n    );\n  }\n\n  async setDisableFavicon(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.disableFavicon = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowCardsCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowCardsCurrentTab ?? false\n    );\n  }\n\n  async setDontShowCardsCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowCardsCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDontShowIdentitiesCurrentTab(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.dontShowIdentitiesCurrentTab ?? false\n    );\n  }\n\n  async setDontShowIdentitiesCurrentTab(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.dontShowIdentitiesCurrentTab = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getDuckDuckGoSharedKey(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(DDG_SHARED_KEY, options);\n  }\n\n  async setDuckDuckGoSharedKey(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    value == null\n      ? await this.secureStorageService.remove(DDG_SHARED_KEY, options)\n      : await this.secureStorageService.save(DDG_SHARED_KEY, value, options);\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.email = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAlwaysOnTop(options?: StorageOptions): Promise<boolean> {\n    const accountPreference = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.enableAlwaysOnTop;\n    const globalPreference = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.enableAlwaysOnTop;\n    return accountPreference ?? globalPreference ?? false;\n  }\n\n  async setEnableAlwaysOnTop(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAlwaysOnTop = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableAlwaysOnTop = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableAutoFillOnPageLoad(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.enableAutoFillOnPageLoad ?? false\n    );\n  }\n\n  async setEnableAutoFillOnPageLoad(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.enableAutoFillOnPageLoad = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBiometric(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBiometrics ?? false\n    );\n  }\n\n  async setEnableBiometric(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableCloseToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableCloseToTray ?? false\n    );\n  }\n\n  async setEnableCloseToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableCloseToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableDuckDuckGoBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableDuckDuckGoBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableDuckDuckGoBrowserIntegration(\n    value: boolean,\n    options?: StorageOptions\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableDuckDuckGoBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableFullWidth(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableFullWidth ?? false\n    );\n  }\n\n  async setEnableFullWidth(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableFullWidth = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableGravitars(options?: StorageOptions): Promise<boolean> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n        )\n      )?.settings?.enableGravitars ?? false\n    );\n  }\n\n  async setEnableGravitars(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.enableGravitars = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnableMinimizeToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableMinimizeToTray ?? false\n    );\n  }\n\n  async setEnableMinimizeToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableMinimizeToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableStartToTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableStartToTray ?? false\n    );\n  }\n\n  async setEnableStartToTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableStartToTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEnableTray(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableTray ?? false\n    );\n  }\n\n  async setEnableTray(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.enableTray = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CipherData)\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(CollectionData)\n  async getEncryptedCollections(\n    options?: StorageOptions\n  ): Promise<{ [id: string]: CollectionData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.collections?.encrypted;\n  }\n\n  async setEncryptedCollections(\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.collections.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  async setEncryptedCryptoSymmetricKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.cryptoSymmetricKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(FolderData)\n  async getEncryptedFolders(options?: StorageOptions): Promise<{ [id: string]: FolderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.folders?.encrypted;\n  }\n\n  async setEncryptedFolders(\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.folders.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEncryptedOrganizationKeys(\n    options?: StorageOptions\n  ): Promise<{ [orgId: string]: EncryptedOrganizationKeyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.organizationKeys.encrypted;\n  }\n\n  async setEncryptedOrganizationKeys(\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.organizationKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(PolicyData)\n  async getEncryptedPolicies(options?: StorageOptions): Promise<{ [id: string]: PolicyData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.policies?.encrypted;\n  }\n\n  async setEncryptedPolicies(\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.policies.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedPrivateKey(options?: StorageOptions): Promise<string> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    return account?.keys?.privateKey?.encrypted;\n  }\n\n  async setEncryptedPrivateKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.privateKey.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEncryptedProviderKeys(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys?.providerKeys?.encrypted;\n  }\n\n  async setEncryptedProviderKeys(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.keys.providerKeys.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(SendData)\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getEntityId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityId;\n  }\n\n  async setEntityId(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityId = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEntityType(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.profile?.entityType;\n  }\n\n  async setEntityType(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.profile.entityType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    if ((await this.state())?.activeUserId == null) {\n      return await this.getGlobalEnvironmentUrls(options);\n    }\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getAccount(options))?.settings?.environmentUrls ?? new EnvironmentUrls();\n  }\n\n  async setEnvironmentUrls(value: EnvironmentUrls, options?: StorageOptions): Promise<void> {\n    // Global values are set on each change and the current global settings are passed to any newly authed accounts.\n    // This is to allow setting environement values before an account is active, while still allowing individual accounts to have their own environments.\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.environmentUrls = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEquivalentDomains(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.equivalentDomains;\n  }\n\n  async setEquivalentDomains(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.equivalentDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForArrayMembers(EventData)\n  async getEventCollection(options?: StorageOptions): Promise<EventData[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.eventCollection;\n  }\n\n  async setEventCollection(value: EventData[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.eventCollection = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getForcePasswordReset(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.forcePasswordReset ?? false\n    );\n  }\n\n  async setForcePasswordReset(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.profile.forcePasswordReset = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (await this.getAccessToken(options)) != null && (await this.getUserId(options)) != null;\n  }\n\n  async getKdfIterations(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n  }\n\n  async setKdfIterations(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfIterations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<{ [cipherId: string]: LocalData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n\n  async setLocalData(\n    value: { [cipherId: string]: LocalData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getLocale(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.locale;\n  }\n\n  async setLocale(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.locale = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getMainWindowSize(options?: StorageOptions): Promise<number> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.mainWindowSize;\n  }\n\n  async setMainWindowSize(value: number, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.mainWindowSize = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNeverDomains(options?: StorageOptions): Promise<{ [id: string]: any }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.neverDomains;\n  }\n\n  async setNeverDomains(value: { [id: string]: any }, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.neverDomains = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometrics(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.noAutoPromptBiometrics ?? false\n    );\n  }\n\n  async setNoAutoPromptBiometrics(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometrics = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getNoAutoPromptBiometricsText(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.noAutoPromptBiometricsText;\n  }\n\n  async setNoAutoPromptBiometricsText(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.noAutoPromptBiometricsText = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOpenAtLogin(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.openAtLogin ?? false\n    );\n  }\n\n  async setOpenAtLogin(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.openAtLogin = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getOrganizations(options?: StorageOptions): Promise<{ [id: string]: OrganizationData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.organizations;\n  }\n\n  async setOrganizations(\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.organizations = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: any, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  @withPrototypeForObjectValues(ProviderData)\n  async getProviders(options?: StorageOptions): Promise<{ [id: string]: ProviderData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.providers;\n  }\n\n  async setProviders(\n    value: { [id: string]: ProviderData },\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.data.providers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getPublicKey(options?: StorageOptions): Promise<ArrayBuffer> {\n    const keys = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.keys;\n    return keys?.publicKey;\n  }\n\n  async setPublicKey(value: ArrayBuffer, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.keys.publicKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getRefreshToken(options?: StorageOptions): Promise<string> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    return (await this.getAccount(options))?.tokens?.refreshToken;\n  }\n\n  async setRefreshToken(value: string, options?: StorageOptions): Promise<void> {\n    options = await this.getTimeoutBasedStorageOptions(options);\n    const account = await this.getAccount(options);\n    account.tokens.refreshToken = value;\n    await this.saveAccount(account, options);\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  async getSettings(options?: StorageOptions): Promise<AccountSettingsSettings> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.settings?.settings;\n  }\n\n  async setSettings(value: AccountSettingsSettings, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n    account.settings.settings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions())\n    );\n  }\n\n  async getSsoCodeVerifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoCodeVerifier;\n  }\n\n  async setSsoCodeVerifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoCodeVerifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getSsoOrgIdentifier(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.ssoOrganizationIdentifier;\n  }\n\n  async setSsoOrganizationIdentifier(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.ssoOrganizationIdentifier = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getSsoState(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.ssoState;\n  }\n\n  async setSsoState(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.ssoState = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getTheme(options?: StorageOptions): Promise<ThemeType> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.theme;\n  }\n\n  async setTheme(value: ThemeType, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.theme = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getTwoFactorToken(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.twoFactorToken;\n  }\n\n  async setTwoFactorToken(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    globals.twoFactorToken = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    const globalVaultTimeoutAction = (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.vaultTimeoutAction;\n    return accountVaultTimeoutAction ?? globalVaultTimeoutAction;\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getStateVersion(): Promise<number> {\n    return (await this.getGlobals(await this.defaultOnDiskLocalOptions())).stateVersion ?? 1;\n  }\n\n  async setStateVersion(value: number): Promise<void> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    globals.stateVersion = value;\n    await this.saveGlobals(globals, await this.defaultOnDiskOptions());\n  }\n\n  async getWindow(): Promise<WindowState> {\n    const globals = await this.getGlobals(await this.defaultOnDiskOptions());\n    return globals?.window != null && Object.keys(globals.window).length > 0\n      ? globals.window\n      : new WindowState();\n  }\n\n  async setWindow(value: WindowState, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n    globals.window = value;\n    return await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions())\n    );\n  }\n\n  async setServerConfig(value: ServerConfigData, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n    account.settings.serverConfig = value;\n    return await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  async getServerConfig(options: StorageOptions): Promise<ServerConfigData> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.serverConfig;\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = await this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    return globals ?? this.createGlobals();\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected async getGlobalsFromMemory(): Promise<TGlobalState> {\n    return (await this.state()).globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected async saveGlobalsToMemory(globals: TGlobalState): Promise<void> {\n    await this.updateState(async (state) => {\n      state.globals = globals;\n      return state;\n    });\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = await this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected async getAccountFromMemory(options: StorageOptions): Promise<TAccount> {\n    return await this.state().then(async (state) => {\n      if (state.accounts == null) {\n        return null;\n      }\n      return state.accounts[await this.getUserIdFromMemory(options)];\n    });\n  }\n\n  protected async getUserIdFromMemory(options: StorageOptions): Promise<string> {\n    return await this.state().then((state) => {\n      return options?.userId != null\n        ? state.accounts[options.userId]?.profile?.userId\n        : state.activeUserId;\n    });\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && (await this.state())?.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.get(options.userId);\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local })\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.set(options.userId, account);\n    }\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    }\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    if (this.useAccountCache) {\n      this.accountDiskCache.delete(options.userId);\n    }\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if (this.getAccountFromMemory({ userId: account.profile.userId }) !== null) {\n      await this.updateState((state) => {\n        return new Promise((resolve) => {\n          state.accounts[account.profile.userId] = account;\n          resolve(state);\n        });\n      });\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n    // EnvironmentUrls are set before authenticating and should override whatever is stored from any previous session\n    const environmentUrls = account.settings.environmentUrls;\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<AccountSettings>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n    account.settings.environmentUrls = environmentUrls;\n    if (account.settings.vaultTimeoutAction === \"logOut\" && account.settings.vaultTimeout != null) {\n      account.tokens.accessToken = null;\n      account.tokens.refreshToken = null;\n      account.profile.apiKeyClientId = null;\n      account.keys.apiKeyClientSecret = null;\n    }\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions()\n      )\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n    if (storedAccount?.settings != null) {\n      storedAccount.settings.environmentUrls = account.settings.environmentUrls;\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions()\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions())\n    );\n  }\n  //\n\n  protected async pushAccounts(): Promise<void> {\n    await this.pruneInMemoryAccounts();\n    await this.state().then((state) => {\n      if (state.accounts == null || Object.keys(state.accounts).length < 1) {\n        this.accounts.next(null);\n        return;\n      }\n\n      this.accounts.next(state.accounts);\n    });\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected async defaultInMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Memory,\n      userId: (await this.state()).activeUserId,\n    };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: (await this.state())?.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions())\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions())\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected async removeAccountFromMemory(userId: string = null): Promise<void> {\n    await this.updateState(async (state) => {\n      userId = userId ?? state.activeUserId;\n      delete state.accounts[userId];\n\n      if (this.useAccountCache) {\n        this.accountDiskCache.delete(userId);\n      }\n\n      return state;\n    });\n  }\n\n  protected async pruneInMemoryAccounts() {\n    // We preserve settings for logged out accounts, but we don't want to consider them when thinking about active account state\n    for (const userId in (await this.state())?.accounts) {\n      if (!(await this.getIsAuthenticated({ userId: userId }))) {\n        await this.removeAccountFromMemory(userId);\n      }\n    }\n  }\n\n  // settings persist even on reset, and are not effected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = { settings: account.settings };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  protected async setAccountEnvironmentUrls(account: TAccount): Promise<TAccount> {\n    account.settings.environmentUrls = await this.getGlobalEnvironmentUrls();\n    return account;\n  }\n\n  protected async getGlobalEnvironmentUrls(options?: StorageOptions): Promise<EnvironmentUrls> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    return (await this.getGlobals(options)).environmentUrls ?? new EnvironmentUrls();\n  }\n\n  protected async clearDecryptedDataForActiveUser(): Promise<void> {\n    await this.updateState(async (state) => {\n      const userId = state?.activeUserId;\n      if (userId != null && state?.accounts[userId]?.data != null) {\n        state.accounts[userId].data = new AccountData();\n      }\n\n      return state;\n    });\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string): Promise<void> {\n    await this.setAccessToken(null, { userId: userId });\n    await this.setLastActive(null, { userId: userId });\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts = state.authenticatedAccounts.filter((id) => id !== userId);\n\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n\n      return state;\n    });\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async dynamicallySetActiveUser() {\n    const accounts = (await this.state())?.accounts;\n    if (accounts == null || Object.keys(accounts).length < 1) {\n      await this.setActiveUser(null);\n      return;\n    }\n    for (const userId in accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        await this.setActiveUser(userId);\n        break;\n      }\n      await this.setActiveUser(null);\n    }\n  }\n\n  private async getTimeoutBasedStorageOptions(options?: StorageOptions): Promise<StorageOptions> {\n    const timeoutAction = await this.getVaultTimeoutAction({ userId: options?.userId });\n    const timeout = await this.getVaultTimeout({ userId: options?.userId });\n    const defaultOptions =\n      timeoutAction === \"logOut\" && timeout != null\n        ? await this.defaultInMemoryOptions()\n        : await this.defaultOnDiskOptions();\n    return this.reconcileOptions(options, defaultOptions);\n  }\n\n  private async saveSecureStorageKey(key: string, value: string, options?: StorageOptions) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n\n  protected async state(): Promise<State<TGlobalState, TAccount>> {\n    const state = await this.memoryStorageService.get<State<TGlobalState, TAccount>>(keys.state, {\n      deserializer: (s) => State.fromJSON(s),\n    });\n    return state;\n  }\n\n  private async setState(state: State<TGlobalState, TAccount>): Promise<void> {\n    await this.memoryStorageService.save(keys.state, state);\n  }\n\n  protected async updateState(\n    stateUpdater: (state: State<TGlobalState, TAccount>) => Promise<State<TGlobalState, TAccount>>\n  ) {\n    await this.state().then(async (state) => {\n      const updatedState = await stateUpdater(state);\n      if (updatedState == null) {\n        throw new Error(\"Attempted to update state to null value\");\n      }\n\n      await this.setState(updatedState);\n    });\n  }\n\n  private mapToRecord<V>(map: Map<string, V>): Record<string, V> {\n    return map == null ? null : Object.fromEntries(map);\n  }\n\n  private recordToMap<V>(record: Record<string, V>): Map<string, V> {\n    return record == null ? null : new Map(Object.entries(record));\n  }\n}\n\nexport function withPrototype<T>(\n  constructor: new (...args: any[]) => T,\n  converter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<T> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          return result == null ||\n            result.constructor.name === constructor.prototype.constructor.name\n            ? converter(result as T)\n            : converter(\n                Object.create(constructor.prototype, Object.getOwnPropertyDescriptors(result)) as T\n              );\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForArrayMembers<T>(\n  memberConstructor: new (...args: any[]) => T,\n  memberConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<T[]> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any[]> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (!(result instanceof Array)) {\n            throw new Error(\n              `Attempted to retrieve non array type from state as an array for method ${String(\n                propertyKey\n              )}`\n            );\n          } else {\n            return result.map((r) => {\n              return r == null ||\n                r.constructor.name === memberConstructor.prototype.constructor.name\n                ? memberConverter(r)\n                : memberConverter(\n                    Object.create(memberConstructor.prototype, Object.getOwnPropertyDescriptors(r))\n                  );\n            });\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForObjectValues<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: any) => T = (i) => i\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor\n) => { value: (...args: any[]) => Promise<{ [key: string]: T }> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<{ [key: string]: T }> = originalMethod.apply(this, args);\n\n        if (!(originalResult instanceof Promise)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey\n            )}`\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else {\n            for (const [key, val] of Object.entries(result)) {\n              result[key] =\n                val == null || val.constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(val)\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(val)\n                      )\n                    );\n            }\n\n            return result as { [key: string]: T };\n          }\n        });\n      },\n    };\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AbstractCachedStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { StorageOptions } from \"@bitwarden/common/models/domain/storageOptions\";\nimport {\n  StateService as BaseStateService,\n  withPrototype,\n} from \"@bitwarden/common/services/state.service\";\n\nimport { Account } from \"../models/account\";\nimport { BrowserComponentState } from \"../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../models/browserSendComponentState\";\n\nimport { StateService as StateServiceAbstraction } from \"./abstractions/state.service\";\n\nexport class StateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  async getFromSessionMemory<T>(key: string, deserializer?: (obj: Jsonify<T>) => T): Promise<T> {\n    return this.memoryStorageService instanceof AbstractCachedStorageService\n      ? await this.memoryStorageService.getBypassCache<T>(key, { deserializer: deserializer })\n      : await this.memoryStorageService.get<T>(key);\n  }\n\n  async setInSessionMemory(key: string, value: any): Promise<void> {\n    await this.memoryStorageService.save(key, value);\n  }\n\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(await this.defaultInMemoryOptions())) != null\n    );\n  }\n\n  @withPrototype(BrowserGroupingsComponentState)\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions\n  ): Promise<BrowserGroupingsComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.groupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserComponentState)\n  async getBrowserCipherComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.ciphers;\n  }\n\n  async setBrowserCipherComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.ciphers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserSendComponentState)\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.send = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n\n  @withPrototype(BrowserComponentState)\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n    account.sendType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions())\n    );\n  }\n}\n","import { BehaviorSubject, concatMap, Subscription } from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { BrowserApi } from \"../../browser/browserApi\";\nimport { StateService } from \"../../services/abstractions/state.service\";\n\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\nexport class SessionSyncer {\n  subscription: Subscription;\n  id = Utils.newGuid();\n\n  // everyone gets the same initial values\n  private ignoreNextUpdate = true;\n\n  constructor(\n    private behaviorSubject: BehaviorSubject<any>,\n    private stateService: StateService,\n    private metaData: SyncedItemMetadata\n  ) {\n    if (!(behaviorSubject instanceof BehaviorSubject)) {\n      throw new Error(\"behaviorSubject must be an instance of BehaviorSubject\");\n    }\n\n    if (metaData.ctor == null && metaData.initializer == null) {\n      throw new Error(\"ctor or initializer must be provided\");\n    }\n  }\n\n  init() {\n    if (chrome.runtime.getManifest().manifest_version != 3) {\n      return;\n    }\n\n    this.observe();\n    this.listenForUpdates();\n  }\n\n  private observe() {\n    // This may be a memory leak.\n    // There is no good time to unsubscribe from this observable. Hopefully Manifest V3 clears memory from temporary\n    // contexts. If so, this is handled by destruction of the context.\n    this.subscription = this.behaviorSubject\n      .pipe(\n        concatMap(async (next) => {\n          if (this.ignoreNextUpdate) {\n            this.ignoreNextUpdate = false;\n            return;\n          }\n          await this.updateSession(next);\n        })\n      )\n      .subscribe();\n  }\n\n  private listenForUpdates() {\n    // This is an unawaited promise, but it will be executed asynchronously in the background.\n    BrowserApi.messageListener(\n      this.updateMessageCommand,\n      async (message) => await this.updateFromMessage(message)\n    );\n  }\n\n  async updateFromMessage(message: any) {\n    if (message.command != this.updateMessageCommand || message.id === this.id) {\n      return;\n    }\n    const builder = SyncedItemMetadata.builder(this.metaData);\n    const value = await this.stateService.getFromSessionMemory(this.metaData.sessionKey, builder);\n    this.ignoreNextUpdate = true;\n    this.behaviorSubject.next(value);\n  }\n\n  private async updateSession(value: any) {\n    await this.stateService.setInSessionMemory(this.metaData.sessionKey, value);\n    await BrowserApi.sendMessage(this.updateMessageCommand, { id: this.id });\n  }\n\n  private get updateMessageCommand() {\n    return `${this.metaData.sessionKey}_update`;\n  }\n}\n","export class SyncedItemMetadata {\n  propertyKey: string;\n  sessionKey: string;\n  ctor?: new () => any;\n  initializer?: (keyValuePair: any) => any;\n  initializeAsArray?: boolean;\n\n  static builder(metadata: SyncedItemMetadata): (o: any) => any {\n    const itemBuilder =\n      metadata.initializer != null\n        ? metadata.initializer\n        : (o: any) => Object.assign(new metadata.ctor(), o);\n    if (metadata.initializeAsArray) {\n      return (keyValuePair: any) => keyValuePair.map((o: any) => itemBuilder(o));\n    } else {\n      return (keyValuePair: any) => itemBuilder(keyValuePair);\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SessionStorable } from \"./session-storable\";\n\nclass BuildOptions<T> {\n  ctor?: new () => T;\n  initializer?: (keyValuePair: Jsonify<T>) => T;\n  initializeAsArray? = false;\n}\n\n/**\n * A decorator used to indicate the BehaviorSubject should be synced for this browser session across all contexts.\n *\n * >**Note** This decorator does nothing if the enclosing class is not decorated with @browserSession.\n *\n * >**Note** The Behavior subject must be initialized with a default or in the constructor of the class. If it is not, an error will be thrown.\n *\n * >**!!Warning!!** If the property is overwritten at any time, the new value will not be synced across the browser session.\n *\n * @param buildOptions\n * Builders for the value, requires either a constructor (ctor) for your BehaviorSubject type or an\n * initializer function that takes a key value pair representation of the BehaviorSubject data\n * and returns your instantiated BehaviorSubject value. `initializeAsArray can optionally be used to indicate\n * the provided initializer function should be used to build an array of values. For example,\n * ```ts\n * \\@sessionSync({ initializer: Foo.fromJSON, initializeAsArray: true })\n * ```\n * is equivalent to\n * ```\n * \\@sessionSync({ initializer: (obj: any[]) => obj.map((f) => Foo.fromJSON })\n * ```\n *\n * @returns decorator function\n */\nexport function sessionSync<T>(buildOptions: BuildOptions<T>) {\n  return (prototype: unknown, propertyKey: string) => {\n    // Force prototype into SessionStorable and implement it.\n    const p = prototype as SessionStorable;\n\n    if (p.__syncedItemMetadata == null) {\n      p.__syncedItemMetadata = [];\n    }\n\n    p.__syncedItemMetadata.push({\n      propertyKey,\n      sessionKey: `${prototype.constructor.name}_${propertyKey}`,\n      ctor: buildOptions.ctor,\n      initializer: buildOptions.initializer,\n      initializeAsArray: buildOptions.initializeAsArray,\n    });\n  };\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { Folder } from \"@bitwarden/common/models/domain/folder\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\nimport { FolderService as BaseFolderService } from \"@bitwarden/common/services/folder/folder.service\";\n\nimport { browserSession, sessionSync } from \"../../decorators/session-sync-observable\";\n\n@browserSession\nexport class FolderService extends BaseFolderService {\n  @sessionSync({ initializer: Folder.fromJSON, initializeAsArray: true })\n  protected _folders: BehaviorSubject<Folder[]>;\n  @sessionSync({ initializer: FolderView.fromJSON, initializeAsArray: true })\n  protected _folderViews: BehaviorSubject<FolderView[]>;\n}\n","import { BehaviorSubject, concatMap } from \"rxjs\";\n\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { I18nService } from \"../../abstractions/i18n.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { CipherData } from \"../../models/data/cipherData\";\nimport { FolderData } from \"../../models/data/folderData\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { FolderView } from \"../../models/view/folderView\";\n\nexport class FolderService implements InternalFolderServiceAbstraction {\n  protected _folders: BehaviorSubject<Folder[]> = new BehaviorSubject([]);\n  protected _folderViews: BehaviorSubject<FolderView[]> = new BehaviorSubject([]);\n\n  folders$ = this._folders.asObservable();\n  folderViews$ = this._folderViews.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService\n  ) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._folders.next([]);\n            this._folderViews.next([]);\n            return;\n          }\n\n          const data = await this.stateService.getEncryptedFolders();\n\n          await this.updateObservables(data);\n        })\n      )\n      .subscribe();\n  }\n\n  async clearCache(): Promise<void> {\n    this._folderViews.next([]);\n  }\n\n  // TODO: This should be moved to EncryptService or something\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = this._folders.getValue();\n\n    return folders.find((folder) => folder.id === id);\n  }\n\n  /**\n   * @deprecated Only use in CLI!\n   */\n  async getAllDecryptedFromState(): Promise<FolderView[]> {\n    const data = await this.stateService.getEncryptedFolders();\n    const folders = Object.values(data || {}).map((f) => new Folder(f));\n\n    return this.decryptFolders(folders);\n  }\n\n  async upsert(folder: FolderData | FolderData[]): Promise<void> {\n    let folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      folders = {};\n    }\n\n    if (folder instanceof FolderData) {\n      const f = folder as FolderData;\n      folders[f.id] = f;\n    } else {\n      (folder as FolderData[]).forEach((f) => {\n        folders[f.id] = f;\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<void> {\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._folders.next([]);\n      this._folderViews.next([]);\n    }\n    await this.stateService.setEncryptedFolders(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const folders = await this.stateService.getEncryptedFolders();\n    if (folders == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (folders[id] == null) {\n        return;\n      }\n      delete folders[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete folders[i];\n      });\n    }\n\n    await this.updateObservables(folders);\n    await this.stateService.setEncryptedFolders(folders);\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  private async updateObservables(foldersMap: { [id: string]: FolderData }) {\n    const folders = Object.values(foldersMap || {}).map((f) => new Folder(f));\n\n    this._folders.next(folders);\n\n    if (await this.cryptoService.hasKey()) {\n      this._folderViews.next(await this.decryptFolders(folders));\n    }\n  }\n\n  private async decryptFolders(folders: Folder[]) {\n    const decryptFolderPromises = folders.map((f) => f.decrypt());\n    const decryptedFolders = await Promise.all(decryptFolderPromises);\n\n    decryptedFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decryptedFolders.push(noneFolder);\n\n    return decryptedFolders;\n  }\n}\n","import { Constructor } from \"type-fest\";\n\nimport { StateService } from \"../../services/state.service\";\n\nimport { SessionStorable } from \"./session-storable\";\nimport { SessionSyncer } from \"./session-syncer\";\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\n/**\n * Mark the class as syncing state across the browser session. This decorator finds rxjs BehaviorSubject properties\n * marked with @sessionSync and syncs these values across the browser session.\n *\n * @param constructor\n * @returns A new constructor that extends the original one to add session syncing.\n */\nexport function browserSession<TCtor extends Constructor<any>>(constructor: TCtor) {\n  return class extends constructor implements SessionStorable {\n    __syncedItemMetadata: SyncedItemMetadata[];\n    __sessionSyncers: SessionSyncer[];\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Require state service to be injected\n      const stateService = args.find((arg) => arg instanceof StateService);\n      if (!stateService) {\n        throw new Error(\n          `Cannot decorate ${constructor.name} with browserSession, Browser's StateService must be injected`\n        );\n      }\n\n      if (this.__syncedItemMetadata == null || !(this.__syncedItemMetadata instanceof Array)) {\n        return;\n      }\n\n      this.__sessionSyncers = this.__syncedItemMetadata.map((metadata) =>\n        this.buildSyncer(metadata, stateService)\n      );\n    }\n\n    buildSyncer(metadata: SyncedItemMetadata, stateService: StateService) {\n      const syncer = new SessionSyncer((this as any)[metadata.propertyKey], stateService, metadata);\n      syncer.init();\n      return syncer;\n    }\n  };\n}\n","import { I18nService as BaseI18nService } from \"@bitwarden/common/services/i18n.service\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string) {\n    super(systemLanguage, null, async (formattedLocale: string) => {\n      // Deprecated\n      const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n      return await file.json();\n    });\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"ar\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"eu\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"nb\",\n      \"nl\",\n      \"nn\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { Observable, ReplaySubject } from \"rxjs\";\n\nimport { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\n\nexport class I18nService implements I18nServiceAbstraction {\n  private _locale = new ReplaySubject<string>(1);\n  locale$: Observable<string> = this._locale.asObservable();\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"ar\", \"العربية الفصحى\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"eu\", \"euskara\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.translationLocale = locale != null ? locale : this.systemLanguage;\n    this._locale.next(this.translationLocale);\n\n    try {\n      this.collator = new Intl.Collator(this.translationLocale, {\n        numeric: true,\n        sensitivity: \"base\",\n      });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.supportedTranslationLocales[0];\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.supportedTranslationLocales[0]) {\n        await this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1);\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2);\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3);\n      }\n    }\n\n    return result;\n  }\n\n  private async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent\n          );\n        }\n      }\n    }\n  }\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstractKeyGeneration.service\";\n\nexport class KeyGenerationService implements AbstractKeyGenerationService {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async makeEphemeralKey(numBytes = 16): Promise<SymmetricCryptoKey> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(numBytes);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-ephemeral\",\n      \"ephemeral\",\n      64,\n      \"sha256\"\n    );\n    return new SymmetricCryptoKey(key);\n  }\n}\n","import AbstractChromeStorageService from \"./abstractChromeStorageApi.service\";\n\nexport default class BrowserMemoryStorageService extends AbstractChromeStorageService {\n  protected chromeStorageApi = chrome.storage.session;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AbstractEncryptService } from \"@bitwarden/common/abstractions/abstractEncrypt.service\";\nimport {\n  AbstractCachedStorageService,\n  MemoryStorageServiceInterface,\n} from \"@bitwarden/common/abstractions/storage.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { MemoryStorageOptions } from \"@bitwarden/common/models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { devFlag } from \"../decorators/dev-flag.decorator\";\nimport { devFlagEnabled } from \"../flags\";\n\nimport { AbstractKeyGenerationService } from \"./abstractions/abstractKeyGeneration.service\";\nimport BrowserLocalStorageService from \"./browserLocalStorage.service\";\nimport BrowserMemoryStorageService from \"./browserMemoryStorage.service\";\n\nconst keys = {\n  encKey: \"localEncryptionKey\",\n  sessionKey: \"session\",\n};\n\nexport class LocalBackedSessionStorageService\n  extends AbstractCachedStorageService\n  implements MemoryStorageServiceInterface\n{\n  private cache = new Map<string, unknown>();\n  private localStorage = new BrowserLocalStorageService();\n  private sessionStorage = new BrowserMemoryStorageService();\n\n  constructor(\n    private encryptService: AbstractEncryptService,\n    private keyGenerationService: AbstractKeyGenerationService\n  ) {\n    super();\n  }\n\n  async get<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key) as T;\n    }\n\n    return await this.getBypassCache(key, options);\n  }\n\n  async getBypassCache<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T> {\n    const session = await this.getLocalSession(await this.getSessionEncKey());\n    if (session == null || !Object.keys(session).includes(key)) {\n      return null;\n    }\n\n    let value = session[key];\n    if (options?.deserializer != null) {\n      value = options.deserializer(value as Jsonify<T>);\n    }\n\n    this.cache.set(key, value);\n    return this.cache.get(key) as T;\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      this.cache.delete(key);\n    } else {\n      this.cache.set(key, obj);\n    }\n\n    const sessionEncKey = await this.getSessionEncKey();\n    const localSession = (await this.getLocalSession(sessionEncKey)) ?? {};\n    localSession[key] = obj;\n    await this.setLocalSession(localSession, sessionEncKey);\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.save(key, null);\n  }\n\n  async getLocalSession(encKey: SymmetricCryptoKey): Promise<Record<string, unknown>> {\n    const local = await this.localStorage.get<string>(keys.sessionKey);\n\n    if (local == null) {\n      return null;\n    }\n\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      return local as any as Record<string, unknown>;\n    }\n\n    const sessionJson = await this.encryptService.decryptToUtf8(new EncString(local), encKey);\n    if (sessionJson == null) {\n      // Error with decryption -- session is lost, delete state and key and start over\n      await this.setSessionEncKey(null);\n      await this.localStorage.remove(keys.sessionKey);\n      return null;\n    }\n    return JSON.parse(sessionJson);\n  }\n\n  async setLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      await this.setDecryptedLocalSession(session);\n    } else {\n      await this.setEncryptedLocalSession(session, key);\n    }\n  }\n\n  @devFlag(\"storeSessionDecrypted\")\n  async setDecryptedLocalSession(session: Record<string, unknown>): Promise<void> {\n    // Make sure we're storing the jsonified version of the session\n    const jsonSession = JSON.parse(JSON.stringify(session));\n    if (session == null) {\n      await this.localStorage.remove(keys.sessionKey);\n    } else {\n      await this.localStorage.save(keys.sessionKey, jsonSession);\n    }\n  }\n\n  async setEncryptedLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    const jsonSession = JSON.stringify(session);\n    const encSession = await this.encryptService.encrypt(jsonSession, key);\n\n    if (encSession == null) {\n      return await this.localStorage.remove(keys.sessionKey);\n    }\n    await this.localStorage.save(keys.sessionKey, encSession.encryptedString);\n  }\n\n  async getSessionEncKey(): Promise<SymmetricCryptoKey> {\n    let storedKey = await this.sessionStorage.get<SymmetricCryptoKey>(keys.encKey);\n    if (storedKey == null || Object.keys(storedKey).length == 0) {\n      storedKey = await this.keyGenerationService.makeEphemeralKey();\n      await this.setSessionEncKey(storedKey);\n    }\n    return SymmetricCryptoKey.fromJSON(storedKey);\n  }\n\n  async setSessionEncKey(input: SymmetricCryptoKey): Promise<void> {\n    if (input == null) {\n      await this.sessionStorage.remove(keys.encKey);\n    } else {\n      await this.sessionStorage.save(keys.encKey, input);\n    }\n  }\n}\n","import { devFlagEnabled, DevFlags } from \"../flags\";\n\nexport function devFlag(flag: keyof DevFlags) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n      if (!devFlagEnabled(flag)) {\n        throw new Error(\n          `This method should not be called, it is protected by a disabled dev flag.`\n        );\n      }\n      return originalMethod.apply(this, args);\n    };\n  };\n}\n","import { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport type VaultFilterFunction = (cipher: CipherView) => boolean;\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollection = false; // This is needed because of how the \"Unassigned\" collection works. It has a null id.\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollection = false;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n\n  buildFilter(): VaultFilterFunction {\n    return (cipher) => {\n      let cipherPassesFilter = true;\n      if (this.status === \"favorites\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.favorite;\n      }\n      if (this.status === \"trash\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.isDeleted;\n      }\n      if (this.cipherType != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.type === this.cipherType;\n      }\n      if (this.selectedFolder && this.selectedFolderId == null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId == null;\n      }\n      if (this.selectedFolder && this.selectedFolderId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId === this.selectedFolderId;\n      }\n      if (this.selectedCollection && this.selectedCollectionId == null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.organizationId != null &&\n          (cipher.collectionIds == null || cipher.collectionIds.length === 0);\n      }\n      if (this.selectedCollection && this.selectedCollectionId != null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.collectionIds != null && cipher.collectionIds.includes(this.selectedCollectionId);\n      }\n      if (this.selectedOrganizationId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === this.selectedOrganizationId;\n      }\n      if (this.myVaultOnly && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === null;\n      }\n      return cipherPassesFilter;\n    };\n  }\n}\n","import { TreeNode } from \"@bitwarden/common/models/domain/treeNode\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nexport class DynamicTreeNode<T extends CollectionView | FolderView> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\n\nimport { KdfType } from \"../enums/kdfType\";\nimport { ThemeType } from \"../enums/themeType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { CollectionData } from \"../models/data/collectionData\";\nimport { EncryptedOrganizationKeyData } from \"../models/data/encryptedOrganizationKeyData\";\nimport { EventData } from \"../models/data/eventData\";\nimport { FolderData } from \"../models/data/folderData\";\nimport { LocalData } from \"../models/data/localData\";\nimport { OrganizationData } from \"../models/data/organizationData\";\nimport { PolicyData } from \"../models/data/policyData\";\nimport { ProviderData } from \"../models/data/providerData\";\nimport { SendData } from \"../models/data/sendData\";\nimport { ServerConfigData } from \"../models/data/server-config.data\";\nimport { Account, AccountSettingsSettings } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/encString\";\nimport { EnvironmentUrls } from \"../models/domain/environmentUrls\";\nimport { GeneratedPasswordHistory } from \"../models/domain/generatedPasswordHistory\";\nimport { Policy } from \"../models/domain/policy\";\nimport { StorageOptions } from \"../models/domain/storageOptions\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { WindowState } from \"../models/domain/windowState\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { SendView } from \"../models/view/sendView\";\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts: BehaviorSubject<{ [userId: string]: T }>;\n  activeAccount$: Observable<string>;\n  activeAccountUnlocked$: Observable<boolean>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<void>;\n  init: () => Promise<void>;\n\n  getAccessToken: (options?: StorageOptions) => Promise<string>;\n  setAccessToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<any>;\n  setAddEditCipherInfo: (value: any, options?: StorageOptions) => Promise<void>;\n  getAlwaysShowDock: (options?: StorageOptions) => Promise<boolean>;\n  setAlwaysShowDock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientId: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientId: (value: string, options?: StorageOptions) => Promise<void>;\n  getApiKeyClientSecret: (options?: StorageOptions) => Promise<string>;\n  setApiKeyClientSecret: (value: string, options?: StorageOptions) => Promise<void>;\n  getAutoConfirmFingerPrints: (options?: StorageOptions) => Promise<boolean>;\n  setAutoConfirmFingerprints: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getAutoFillOnPageLoadDefault: (options?: StorageOptions) => Promise<boolean>;\n  setAutoFillOnPageLoadDefault: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricAwaitingAcceptance: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricAwaitingAcceptance: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getBiometricText: (options?: StorageOptions) => Promise<string>;\n  setBiometricText: (value: string, options?: StorageOptions) => Promise<void>;\n  getBiometricUnlock: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricUnlock: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCanAccessPremium: (options?: StorageOptions) => Promise<boolean>;\n  getHasPremiumPersonally: (options?: StorageOptions) => Promise<boolean>;\n  setHasPremiumPersonally: (value: boolean, options?: StorageOptions) => Promise<void>;\n  setHasPremiumFromOrganization: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getHasPremiumFromOrganization: (options?: StorageOptions) => Promise<boolean>;\n  getClearClipboard: (options?: StorageOptions) => Promise<number>;\n  setClearClipboard: (value: number, options?: StorageOptions) => Promise<void>;\n  getCollapsedGroupings: (options?: StorageOptions) => Promise<string[]>;\n  setCollapsedGroupings: (value: string[], options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setCryptoMasterKey: (value: SymmetricCryptoKey, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyB64: (options?: StorageOptions) => Promise<string>;\n  setCryptoMasterKeyB64: (value: string, options?: StorageOptions) => Promise<void>;\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setCryptoMasterKeyBiometric: (value: string, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCollections: (options?: StorageOptions) => Promise<CollectionView[]>;\n  setDecryptedCollections: (value: CollectionView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  setDecryptedCryptoSymmetricKey: (\n    value: SymmetricCryptoKey,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedOrganizationKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  getDecryptedPolicies: (options?: StorageOptions) => Promise<Policy[]>;\n  setDecryptedPolicies: (value: Policy[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPrivateKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setDecryptedPrivateKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getDecryptedProviderKeys: (options?: StorageOptions) => Promise<Map<string, SymmetricCryptoKey>>;\n  setDecryptedProviderKeys: (\n    value: Map<string, SymmetricCryptoKey>,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDefaultUriMatch: (options?: StorageOptions) => Promise<UriMatchType>;\n  setDefaultUriMatch: (value: UriMatchType, options?: StorageOptions) => Promise<void>;\n  getDisableAddLoginNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAddLoginNotification: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoBiometricsPrompt: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoBiometricsPrompt: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableAutoTotpCopy: (options?: StorageOptions) => Promise<boolean>;\n  setDisableAutoTotpCopy: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableBadgeCounter: (options?: StorageOptions) => Promise<boolean>;\n  setDisableBadgeCounter: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableChangedPasswordNotification: (options?: StorageOptions) => Promise<boolean>;\n  setDisableChangedPasswordNotification: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getDisableContextMenuItem: (options?: StorageOptions) => Promise<boolean>;\n  setDisableContextMenuItem: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableFavicon: (options?: StorageOptions) => Promise<boolean>;\n  setDisableFavicon: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowCardsCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowCardsCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDontShowIdentitiesCurrentTab: (options?: StorageOptions) => Promise<boolean>;\n  setDontShowIdentitiesCurrentTab: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDuckDuckGoSharedKey: (options?: StorageOptions) => Promise<string>;\n  setDuckDuckGoSharedKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAlwaysOnTop: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAlwaysOnTop: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableAutoFillOnPageLoad: (options?: StorageOptions) => Promise<boolean>;\n  setEnableAutoFillOnPageLoad: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBiometric: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBiometric: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableCloseToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableCloseToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableDuckDuckGoBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableDuckDuckGoBrowserIntegration: (\n    value: boolean,\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEnableFullWidth: (options?: StorageOptions) => Promise<boolean>;\n  setEnableFullWidth: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableGravitars: (options?: StorageOptions) => Promise<boolean>;\n  setEnableGravitars: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableMinimizeToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableMinimizeToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableStartToTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableStartToTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableTray: (options?: StorageOptions) => Promise<boolean>;\n  setEnableTray: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCollections: (options?: StorageOptions) => Promise<{ [id: string]: CollectionData }>;\n  setEncryptedCollections: (\n    value: { [id: string]: CollectionData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedCryptoSymmetricKey: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  getEncryptedFolders: (options?: StorageOptions) => Promise<{ [id: string]: FolderData }>;\n  /**\n   * @deprecated Do not call this directly, use FolderService\n   */\n  setEncryptedFolders: (\n    value: { [id: string]: FolderData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedOrganizationKeys: (\n    options?: StorageOptions\n  ) => Promise<{ [orgId: string]: EncryptedOrganizationKeyData }>;\n  setEncryptedOrganizationKeys: (\n    value: { [orgId: string]: EncryptedOrganizationKeyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedPolicies: (options?: StorageOptions) => Promise<{ [id: string]: PolicyData }>;\n  setEncryptedPolicies: (\n    value: { [id: string]: PolicyData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getEncryptedPrivateKey: (options?: StorageOptions) => Promise<string>;\n  setEncryptedPrivateKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getEncryptedProviderKeys: (options?: StorageOptions) => Promise<any>;\n  setEncryptedProviderKeys: (value: any, options?: StorageOptions) => Promise<void>;\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEntityId: (options?: StorageOptions) => Promise<string>;\n  setEntityId: (value: string, options?: StorageOptions) => Promise<void>;\n  getEntityType: (options?: StorageOptions) => Promise<any>;\n  setEntityType: (value: string, options?: StorageOptions) => Promise<void>;\n  getEnvironmentUrls: (options?: StorageOptions) => Promise<EnvironmentUrls>;\n  setEnvironmentUrls: (value: EnvironmentUrls, options?: StorageOptions) => Promise<void>;\n  getEquivalentDomains: (options?: StorageOptions) => Promise<any>;\n  setEquivalentDomains: (value: string, options?: StorageOptions) => Promise<void>;\n  getEventCollection: (options?: StorageOptions) => Promise<EventData[]>;\n  setEventCollection: (value: EventData[], options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForcePasswordReset: (options?: StorageOptions) => Promise<boolean>;\n  setForcePasswordReset: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfIterations: (options?: StorageOptions) => Promise<number>;\n  setKdfIterations: (value: number, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<{ [cipherId: string]: LocalData }>;\n  setLocalData: (\n    value: { [cipherId: string]: LocalData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getLocale: (options?: StorageOptions) => Promise<string>;\n  setLocale: (value: string, options?: StorageOptions) => Promise<void>;\n  getMainWindowSize: (options?: StorageOptions) => Promise<number>;\n  setMainWindowSize: (value: number, options?: StorageOptions) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNeverDomains: (options?: StorageOptions) => Promise<{ [id: string]: any }>;\n  setNeverDomains: (value: { [id: string]: any }, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometrics: (options?: StorageOptions) => Promise<boolean>;\n  setNoAutoPromptBiometrics: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getNoAutoPromptBiometricsText: (options?: StorageOptions) => Promise<string>;\n  setNoAutoPromptBiometricsText: (value: string, options?: StorageOptions) => Promise<void>;\n  getOpenAtLogin: (options?: StorageOptions) => Promise<boolean>;\n  setOpenAtLogin: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getOrganizations: (options?: StorageOptions) => Promise<{ [id: string]: OrganizationData }>;\n  setOrganizations: (\n    value: { [id: string]: OrganizationData },\n    options?: StorageOptions\n  ) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setPasswordGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<any>;\n  setUsernameGenerationOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<any>;\n  setGeneratorOptions: (value: any, options?: StorageOptions) => Promise<void>;\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getProviders: (options?: StorageOptions) => Promise<{ [id: string]: ProviderData }>;\n  setProviders: (value: { [id: string]: ProviderData }, options?: StorageOptions) => Promise<void>;\n  getPublicKey: (options?: StorageOptions) => Promise<ArrayBuffer>;\n  setPublicKey: (value: ArrayBuffer, options?: StorageOptions) => Promise<void>;\n  getRefreshToken: (options?: StorageOptions) => Promise<string>;\n  setRefreshToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use SettingsService\n   */\n  getSettings: (options?: StorageOptions) => Promise<AccountSettingsSettings>;\n  /**\n   * @deprecated Do not call this directly, use SettingsService\n   */\n  setSettings: (value: AccountSettingsSettings, options?: StorageOptions) => Promise<void>;\n  getSsoCodeVerifier: (options?: StorageOptions) => Promise<string>;\n  setSsoCodeVerifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoOrgIdentifier: (options?: StorageOptions) => Promise<string>;\n  setSsoOrganizationIdentifier: (value: string, options?: StorageOptions) => Promise<void>;\n  getSsoState: (options?: StorageOptions) => Promise<string>;\n  setSsoState: (value: string, options?: StorageOptions) => Promise<void>;\n  getTheme: (options?: StorageOptions) => Promise<ThemeType>;\n  setTheme: (value: ThemeType, options?: StorageOptions) => Promise<void>;\n  getTwoFactorToken: (options?: StorageOptions) => Promise<string>;\n  setTwoFactorToken: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (vaule: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getStateVersion: () => Promise<number>;\n  setStateVersion: (value: number) => Promise<void>;\n  getWindow: () => Promise<WindowState>;\n  setWindow: (value: WindowState) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use ConfigService\n   */\n  getServerConfig: (options?: StorageOptions) => Promise<ServerConfigData>;\n  /**\n   * @deprecated Do not call this directly, use ConfigService\n   */\n  setServerConfig: (value: ServerConfigData, options?: StorageOptions) => Promise<void>;\n}\n","import { OrganizationData } from \"../models/data/organizationData\";\nimport { Organization } from \"../models/domain/organization\";\n\nexport abstract class OrganizationService {\n  get: (id: string) => Promise<Organization>;\n  getByIdentifier: (identifier: string) => Promise<Organization>;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  save: (orgs: { [id: string]: OrganizationData }) => Promise<any>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: (userId?: string) => Promise<boolean>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { FolderData } from \"../../models/data/folderData\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetricCryptoKey\";\nimport { FolderView } from \"../../models/view/folderView\";\n\nexport abstract class FolderService {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  clearCache: () => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getAllDecryptedFromState: () => Promise<FolderView[]>;\n}\n\nexport abstract class InternalFolderService extends FolderService {\n  upsert: (folder: FolderData | FolderData[]) => Promise<void>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<void>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { UriMatchType } from \"../enums/uriMatchType\";\nimport { CipherData } from \"../models/data/cipherData\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    key?: SymmetricCryptoKey,\n    originalCipher?: Cipher\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchType\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  saveWithServer: (cipher: Cipher) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[]\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string) => Promise<any>;\n  deleteManyWithServer: (ids: string[]) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: any, b: any) => number;\n  sortCiphersByLastUsedThenName: (a: any, b: any) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[]) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[]\n  ) => Promise<any>;\n  restoreWithServer: (id: string) => Promise<any>;\n  restoreManyWithServer: (ids: string[]) => Promise<any>;\n}\n","import { CollectionData } from \"../models/data/collectionData\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/treeNode\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nexport abstract class CollectionService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { PolicyType } from \"../../enums/policyType\";\nimport { PolicyData } from \"../../models/data/policyData\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/masterPasswordPolicyOptions\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/resetPasswordPolicyOptions\";\nimport { ListResponse } from \"../../models/response/listResponse\";\nimport { PolicyResponse } from \"../../models/response/policyResponse\";\n\nexport abstract class PolicyService {\n  getAll: (type?: PolicyType, userId?: string) => Promise<Policy[]>;\n\n  getMasterPasswordPolicyOptions: (policies?: Policy[]) => Promise<MasterPasswordPolicyOptions>;\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions\n  ) => boolean;\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string\n  ) => [ResetPasswordPolicyOptions, boolean];\n  mapPoliciesFromToken: (policiesResponse: ListResponse<PolicyResponse>) => Policy[];\n  policyAppliesToUser: (\n    policyType: PolicyType,\n    policyFilter?: (policy: Policy) => boolean,\n    userId?: string\n  ) => Promise<boolean>;\n}\n\nexport abstract class InternalPolicyService extends PolicyService {\n  upsert: (policy: PolicyData) => Promise<any>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<any>;\n  clear: (userId?: string) => Promise<any>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { firstValueFrom, from, mergeMap, Observable } from \"rxjs\";\n\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { ServiceUtils } from \"@bitwarden/common/misc/serviceUtils\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/treeNode\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collectionView\";\nimport { FolderView } from \"@bitwarden/common/models/view/folderView\";\n\nimport { DynamicTreeNode } from \"../models/dynamic-tree-node.model\";\n\nconst NestingDelimiter = \"/\";\n\n@Injectable()\nexport class VaultFilterService {\n  constructor(\n    protected stateService: StateService,\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.stateService.setCollapsedGroupings(Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return new Set(await this.stateService.getCollapsedGroupings());\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    return await this.organizationService.getAll();\n  }\n\n  buildNestedFolders(organizationId?: string): Observable<DynamicTreeNode<FolderView>> {\n    const transformation = async (storedFolders: FolderView[]) => {\n      let folders: FolderView[];\n      if (organizationId != null) {\n        const ciphers = await this.cipherService.getAllDecrypted();\n        const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n        folders = storedFolders.filter(\n          (f) =>\n            orgCiphers.filter((oc) => oc.folderId == f.id).length > 0 ||\n            ciphers.filter((c) => c.folderId == f.id).length < 1\n        );\n      } else {\n        folders = storedFolders;\n      }\n      const nestedFolders = await this.getAllFoldersNested(folders);\n      return new DynamicTreeNode<FolderView>({\n        fullList: folders,\n        nestedList: nestedFolders,\n      });\n    };\n\n    return this.folderService.folderViews$.pipe(\n      mergeMap((folders) => from(transformation(folders)))\n    );\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.SingleOrg);\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership);\n  }\n\n  protected async getAllFoldersNested(folders: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getFolderNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllFoldersNested(\n      await firstValueFrom(this.folderService.folderViews$)\n    );\n    return ServiceUtils.getTreeNodeObject(folders, id) as TreeNode<FolderView>;\n  }\n}\n","import { VaultFilter } from \"@bitwarden/angular/vault/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"@bitwarden/angular/vault/vault-filter/services/vault-filter.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"@bitwarden/common/services/vaultTimeout/vaultTimeout.service\";\n\nimport { SafariApp } from \"../../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { AuthService } from \"../../abstractions/auth.service\";\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport { CollectionService } from \"../../abstractions/collection.service\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { FolderService } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { KeyConnectorService } from \"../../abstractions/keyConnector.service\";\nimport { MessagingService } from \"../../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../abstractions/platformUtils.service\";\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../../abstractions/vaultTimeout/vaultTimeout.service\";\nimport { VaultTimeoutSettingsService } from \"../../abstractions/vaultTimeout/vaultTimeoutSettings.service\";\nimport { AuthenticationStatus } from \"../../enums/authenticationStatus\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    if (await this.platformUtilsService.isViewOpen()) {\n      return;\n    }\n\n    for (const userId in this.stateService.accounts.getValue()) {\n      if (userId != null && (await this.shouldLock(userId))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    if (await this.keyConnectorService.getUsesKeyConnector()) {\n      const pinSet = await this.vaultTimeoutSettingsService.isPinLockSet();\n      const pinLock =\n        (pinSet[0] && (await this.stateService.getDecryptedPinProtected()) != null) || pinSet[1];\n\n      if (!pinLock && !(await this.vaultTimeoutSettingsService.isBiometricLockSet())) {\n        await this.logOut(userId);\n      }\n    }\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      await this.folderService.clearCache();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearKey(false, userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n    await this.cryptoService.clearEncKey(true, userId);\n\n    await this.cipherService.clearCache(userId);\n    await this.collectionService.clearCache(userId);\n\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  private async shouldLock(userId: string): Promise<boolean> {\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.vaultTimeoutSettingsService.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n    timeoutAction === \"logOut\" ? await this.logOut(userId) : await this.lock(userId);\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vaultTimeout/vaultTimeout.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\n      \"commands.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n          await this.processCommand(\n            msg.data.commandToRetry.msg.command,\n            msg.data.commandToRetry.sender\n          );\n        }\n      }\n    );\n\n    if (chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    this.main.openPopup();\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class ContextMenusBackground {\n  private readonly noopCommandSuffix = \"noop\";\n  private contextMenus: any;\n\n  constructor(\n    private main: MainBackground,\n    private cipherService: CipherService,\n    private passwordGenerationService: PasswordGenerationService,\n    private platformUtilsService: PlatformUtilsService,\n    private authService: AuthService,\n    private eventService: EventService,\n    private totpService: TotpService\n  ) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  async init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener(\n      async (info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) => {\n        if (info.menuItemId === \"generate-password\") {\n          await this.generatePasswordToClipboard();\n        } else if (info.menuItemId === \"copy-identifier\") {\n          await this.getClickedElement(tab, info.frameId);\n        } else if (\n          info.parentMenuItemId === \"autofill\" ||\n          info.parentMenuItemId === \"copy-username\" ||\n          info.parentMenuItemId === \"copy-password\" ||\n          info.parentMenuItemId === \"copy-totp\"\n        ) {\n          await this.cipherAction(tab, info);\n        }\n      }\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender, sendResponse: any) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          await this.cipherAction(\n            msg.data.commandToRetry.sender.tab,\n            msg.data.commandToRetry.msg.data\n          );\n        }\n      }\n    );\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())[0];\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password, { window: window });\n    this.passwordGenerationService.addHistory(password);\n  }\n\n  private async getClickedElement(tab: chrome.tabs.Tab, frameId: number) {\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, { command: \"getClickedElement\" }, { frameId: frameId });\n  }\n\n  private async cipherAction(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    if (typeof info.menuItemId !== \"string\") {\n      return;\n    }\n\n    const id = info.menuItemId.split(\"_\")[1];\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsItem = {\n        commandToRetry: {\n          msg: { command: this.noopCommandSuffix, data: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage\n      );\n\n      BrowserApi.tabSendMessageData(tab, \"promptForLogin\");\n      return;\n    }\n\n    let cipher: CipherView;\n    if (id === this.noopCommandSuffix) {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(tab.url);\n      cipher = ciphers.find((c) => c.reprompt === CipherRepromptType.None);\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find((c) => c.id === id);\n    }\n\n    if (cipher == null) {\n      return;\n    }\n\n    if (info.parentMenuItemId === \"autofill\") {\n      await this.startAutofillPage(tab, cipher);\n    } else if (info.parentMenuItemId === \"copy-username\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });\n    } else if (info.parentMenuItemId === \"copy-password\") {\n      this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });\n      this.eventService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (info.parentMenuItemId === \"copy-totp\") {\n      const totpValue = await this.totpService.getCode(cipher.login.totp);\n      this.platformUtilsService.copyToClipboard(totpValue, { window: window });\n    }\n  }\n\n  private async startAutofillPage(tab: chrome.tabs.Tab, cipher: CipherView) {\n    this.main.loginToAutoFill = cipher;\n    if (tab == null) {\n      return;\n    }\n\n    BrowserApi.tabSendMessage(tab, {\n      command: \"collectPageDetails\",\n      tab: tab,\n      sender: \"contextMenu\",\n    });\n  }\n}\n","import { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vaultTimeout/vaultTimeout.service\";\n\nimport { StateService } from \"../services/abstractions/state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: any;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: StateService,\n    private notificationsService: NotificationsService\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(async (newState: string) => {\n        if (newState === \"locked\") {\n          // If the screen is locked or the screensaver activates\n          const timeout = await this.stateService.getVaultTimeout();\n          if (timeout === -2) {\n            // On System Lock vault timeout option\n            const action = await this.stateService.getVaultTimeoutAction();\n            if (action === \"logOut\") {\n              await this.vaultTimeoutService.logOut();\n            } else {\n              await this.vaultTimeoutService.lock();\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { AppIdService } from \"@bitwarden/common/abstractions/appId.service\";\nimport { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/encString\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetricCryptoKey\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: ArrayBuffer = null;\n  private publicKey: ArrayBuffer = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private i18nService: I18nService,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService\n  ) {\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        BrowserApi.reloadExtension(null);\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    this.stateService.setBiometricFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(\"startDesktop\");\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted.buffer,\n              this.privateKey,\n              EncryptionAlgorithm\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              this.stateService.setBiometricFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n              title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n              confirmText: this.i18nService.t(\"ok\"),\n              type: \"error\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(reason);\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      text: this.i18nService.t(\"nativeMessagingWrongUserDesc\"),\n      title: this.i18nService.t(\"nativeMessagingWrongUserTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"error\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      const msg: any = message;\n      if (message.message instanceof EncString) {\n        // Alternative, backwards-compatible serialization of EncString\n        msg.message = {\n          encryptedString: message.message.encryptedString,\n          encryptionType: message.message.encryptionType,\n          data: message.message.data,\n          iv: message.message.iv,\n          mac: message.message.mac,\n        };\n      }\n      this.port.postMessage(msg);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        text: this.i18nService.t(\"nativeMessagingInvalidEncryptionDesc\"),\n        title: this.i18nService.t(\"nativeMessagingInvalidEncryptionTitle\"),\n        confirmText: this.i18nService.t(\"ok\"),\n        type: \"error\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret)\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        await this.stateService.setBiometricAwaitingAcceptance(null);\n\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotEnabledDesc\"),\n            title: this.i18nService.t(\"biometricsNotEnabledTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            text: this.i18nService.t(\"biometricsNotSupportedDesc\"),\n            title: this.i18nService.t(\"biometricsNotSupportedTitle\"),\n            confirmText: this.i18nService.t(\"ok\"),\n            type: \"error\",\n          });\n          break;\n        }\n\n        const enabled = await this.stateService.getBiometricUnlock();\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.stateService.setBiometricUnlock(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          await this.cryptoService.setKey(\n            new SymmetricCryptoKey(Utils.fromB64ToArray(message.keyB64).buffer)\n          );\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKey();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = (\n      await this.cryptoService.getFingerprint(await this.stateService.getUserId(), this.publicKey)\n    ).join(\" \");\n\n    this.messagingService.send(\"showDialog\", {\n      html: `${this.i18nService.t(\n        \"desktopIntegrationVerificationText\"\n      )}<br><br><strong>${fingerprint}</strong>`,\n      title: this.i18nService.t(\"desktopSyncVerificationTitle\"),\n      confirmText: this.i18nService.t(\"ok\"),\n      type: \"warning\",\n    });\n  }\n}\n","export enum NotificationQueueMessageType {\n  AddLogin = 0,\n  ChangePassword = 1,\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { LoginUriView } from \"@bitwarden/common/models/view/loginUriView\";\nimport { LoginView } from \"@bitwarden/common/models/view/loginView\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport { StateService } from \"../services/abstractions/state.service\";\n\nimport AddChangePasswordQueueMessage from \"./models/addChangePasswordQueueMessage\";\nimport AddLoginQueueMessage from \"./models/addLoginQueueMessage\";\nimport AddLoginRuntimeMessage from \"./models/addLoginRuntimeMessage\";\nimport ChangePasswordRuntimeMessage from \"./models/changePasswordRuntimeMessage\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\nimport { NotificationQueueMessageType } from \"./models/notificationQueueMessageType\";\n\nexport default class NotificationBackground {\n  private notificationQueue: (AddLoginQueueMessage | AddChangePasswordQueueMessage)[] = [];\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: StateService\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    BrowserApi.messageListener(\n      \"notification.background\",\n      async (msg: any, sender: chrome.runtime.MessageSender) => {\n        await this.processMessage(msg, sender);\n      }\n    );\n\n    this.cleanupNotificationQueue();\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"unlockCompleted\":\n        if (msg.data.target !== \"notification.background\") {\n          return;\n        }\n        await this.processMessage(msg.data.commandToRetry.msg, msg.data.commandToRetry.sender);\n        break;\n      case \"bgGetDataForTab\":\n        await this.getDataForTab(sender.tab, msg.responseCommand);\n        break;\n      case \"bgCloseNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n        break;\n      case \"bgAdjustNotificationBar\":\n        await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", msg.data);\n        break;\n      case \"bgAddLogin\":\n        await this.addLogin(msg.login, sender.tab);\n        break;\n      case \"bgChangedPassword\":\n        await this.changedPassword(msg.data, sender.tab);\n        break;\n      case \"bgAddClose\":\n      case \"bgChangeClose\":\n        this.removeTabFromNotificationQueue(sender.tab);\n        break;\n      case \"bgAddSave\":\n      case \"bgChangeSave\":\n        if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n          const retryMessage: LockedVaultPendingNotificationsItem = {\n            commandToRetry: {\n              msg: msg,\n              sender: sender,\n            },\n            target: \"notification.background\",\n          };\n          await BrowserApi.tabSendMessageData(\n            sender.tab,\n            \"addToLockedVaultPendingNotifications\",\n            retryMessage\n          );\n          await BrowserApi.tabSendMessageData(sender.tab, \"promptForLogin\");\n          return;\n        }\n        await this.saveOrUpdateCredentials(sender.tab, msg.folder);\n        break;\n      case \"bgNeverSave\":\n        await this.saveNever(sender.tab);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"notificationBar\": {\n            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);\n            await BrowserApi.tabSendMessageData(msg.tab, \"notificationBarPageDetails\", {\n              details: msg.details,\n              forms: forms,\n            });\n            break;\n          }\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes\n  }\n\n  private doNotificationQueueCheck(tab: chrome.tabs.Tab): void {\n    if (tab == null) {\n      return;\n    }\n\n    const tabDomain = Utils.getDomain(tab.url);\n    if (tabDomain == null) {\n      return;\n    }\n\n    for (let i = 0; i < this.notificationQueue.length; i++) {\n      if (\n        this.notificationQueue[i].tabId !== tab.id ||\n        this.notificationQueue[i].domain !== tabDomain\n      ) {\n        continue;\n      }\n\n      if (this.notificationQueue[i].type === NotificationQueueMessageType.AddLogin) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"add\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      } else if (this.notificationQueue[i].type === NotificationQueueMessageType.ChangePassword) {\n        BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n          type: \"change\",\n          typeData: {\n            isVaultLocked: this.notificationQueue[i].wasVaultLocked,\n          },\n        });\n      }\n      break;\n    }\n  }\n\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tabId === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  private async addLogin(loginInfo: AddLoginRuntimeMessage, tab: chrome.tabs.Tab) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    let normalizedUsername = loginInfo.username;\n    if (normalizedUsername != null) {\n      normalizedUsername = normalizedUsername.toLowerCase();\n    }\n\n    const disabledAddLogin = await this.stateService.getDisableAddLoginNotification();\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab, true);\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername\n    );\n    if (usernameMatches.length === 0) {\n      if (disabledAddLogin) {\n        return;\n      }\n\n      if (!(await this.allowPersonalOwnership())) {\n        return;\n      }\n\n      this.pushAddLoginToQueue(loginDomain, loginInfo, tab);\n    } else if (\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      const disabledChangePassword =\n        await this.stateService.getDisableChangedPasswordNotification();\n      if (disabledChangePassword) {\n        return;\n      }\n      this.pushChangePasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginRuntimeMessage,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async changedPassword(changeData: ChangePasswordRuntimeMessage, tab: chrome.tabs.Tab) {\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      this.pushChangePasswordToQueue(null, loginDomain, changeData.newPassword, tab, true);\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, tab);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tabId: tab.id,\n      expires: new Date(new Date().getTime() + 5 * 60000), // 5 minutes\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const changePasswordMessage = queueMessage as AddChangePasswordQueueMessage;\n        const cipher = await this.getDecryptedCipherById(changePasswordMessage.cipherId);\n        if (cipher == null) {\n          return;\n        }\n        await this.updateCipher(cipher, changePasswordMessage.newPassword);\n        return;\n      }\n\n      if (queueMessage.type === NotificationQueueMessageType.AddLogin) {\n        if (!queueMessage.wasVaultLocked) {\n          await this.createNewCipher(queueMessage as AddLoginQueueMessage, folderId);\n          BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n          return;\n        }\n\n        // If the vault was locked, check if a cipher needs updating instead of creating a new one\n        const addLoginMessage = queueMessage as AddLoginQueueMessage;\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(addLoginMessage.uri);\n        const usernameMatches = ciphers.filter(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === addLoginMessage.username\n        );\n\n        if (usernameMatches.length >= 1) {\n          await this.updateCipher(usernameMatches[0], addLoginMessage.password);\n          return;\n        }\n\n        await this.createNewCipher(addLoginMessage, folderId);\n        BrowserApi.tabSendMessageData(tab, \"addedCipher\");\n      }\n    }\n  }\n\n  private async createNewCipher(queueMessage: AddLoginQueueMessage, folderId: string) {\n    const loginModel = new LoginView();\n    const loginUri = new LoginUriView();\n    loginUri.uri = queueMessage.uri;\n    loginModel.uris = [loginUri];\n    loginModel.username = queueMessage.username;\n    loginModel.password = queueMessage.password;\n    const model = new CipherView();\n    model.name = Utils.getHostname(queueMessage.uri) || queueMessage.domain;\n    model.name = model.name.replace(/^www\\./, \"\");\n    model.type = CipherType.Login;\n    model.login = loginModel;\n\n    if (!Utils.isNullOrWhitespace(folderId)) {\n      const folders = await firstValueFrom(this.folderService.folderViews$);\n      if (folders.some((x) => x.id === folderId)) {\n        model.folderId = folderId;\n      }\n    }\n\n    const cipher = await this.cipherService.encrypt(model);\n    await this.cipherService.saveWithServer(cipher);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt();\n    }\n    return null;\n  }\n\n  private async updateCipher(cipher: CipherView, newPassword: string) {\n    if (cipher != null && cipher.type === CipherType.Login) {\n      cipher.login.password = newPassword;\n      const newCipher = await this.cipherService.encrypt(cipher);\n      await this.cipherService.saveWithServer(newCipher);\n    }\n  }\n\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tabId !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  private async getDataForTab(tab: chrome.tabs.Tab, responseCommand: string) {\n    const responseData: any = {};\n    if (responseCommand === \"notificationBarGetFoldersList\") {\n      responseData.folders = await firstValueFrom(this.folderService.folderViews$);\n    }\n\n    await BrowserApi.tabSendMessageData(tab, responseCommand, responseData);\n  }\n\n  private async allowPersonalOwnership(): Promise<boolean> {\n    return !(await this.policyService.policyAppliesToUser(PolicyType.PersonalOwnership));\n  }\n}\n","import { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { SystemService } from \"@bitwarden/common/abstractions/system.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { BrowserEnvironmentService } from \"src/services/browser-environment.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\n\nimport MainBackground from \"./main.background\";\nimport LockedVaultPendingNotificationsItem from \"./models/lockedVaultPendingNotificationsItem\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsItem[] = [];\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private systemService: SystemService,\n    private environmentService: BrowserEnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = async (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any\n    ) => {\n      await this.processMessage(msg, sender, sendResponse);\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.isPrivateMode) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: any, sendResponse: any) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsItem;\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          await BrowserApi.closeLoginTab();\n\n          item = this.lockedVaultPendingNotifications.pop();\n          if (item.commandToRetry.sender?.tab?.id) {\n            await BrowserApi.focusSpecifiedTab(item.commandToRetry.sender.tab.id);\n          }\n        }\n\n        await this.main.setIcon();\n        await this.main.refreshBadgeAndMenu(false);\n        this.notificationsService.updateConnection(msg.command === \"unlocked\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => await this.main.refreshBadgeAndMenu(), 2000);\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"promptForLogin\":\n        await BrowserApi.createNewTab(\"popup/index.html?uilocation=popout\", true, true);\n        break;\n      case \"showDialogResolve\":\n        this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadgeAndMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\"\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n            }\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(msg.tab), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        try {\n          BrowserApi.createNewTab(\n            \"popup/index.html?uilocation=popout#/sso?code=\" +\n              encodeURIComponent(msg.code) +\n              \"&state=\" +\n              encodeURIComponent(msg.state)\n          );\n        } catch {\n          this.logService.error(\"Unable to open sso popout tab\");\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const vaultUrl = this.environmentService.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        const params =\n          `webAuthnResponse=${encodeURIComponent(msg.data)};` +\n          `remember=${encodeURIComponent(msg.remember)}`;\n        BrowserApi.createNewTab(\n          `popup/index.html?uilocation=popout#/2fa;${params}`,\n          undefined,\n          false\n        );\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          dialogId: \"emailVerificationRequired\",\n          title: this.i18nService.t(\"emailVerificationRequired\"),\n          text: this.i18nService.t(\"emailVerificationRequiredDesc\"),\n          confirmText: this.i18nService.t(\"ok\"),\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier, { window: window });\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async autofillPage(tabToAutoFill: chrome.tabs.Tab) {\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: tabToAutoFill,\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode, { window: window });\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n          if (await this.environmentService.hasManagedEnvironment()) {\n            await this.environmentService.setUrlsToManagedEnvironment();\n          }\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n}\n","import MainBackground from \"./main.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground\n  ) {}\n\n  private focusedWindowId: number;\n\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    chrome.windows.onFocusChanged.addListener(async (windowId: number) => {\n      if (windowId === null || windowId < 0) {\n        return;\n      }\n\n      this.focusedWindowId = windowId;\n      this.main.messagingService.send(\"windowChanged\");\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo: chrome.tabs.TabActiveInfo) => {\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onReplaced.addListener(async (addedTabId: number, removedTabId: number) => {\n      if (this.main.onReplacedRan) {\n        return;\n      }\n      this.main.onReplacedRan = true;\n\n      await this.notificationBackground.checkNotificationQueue();\n      await this.main.refreshBadgeAndMenu();\n      this.main.messagingService.send(\"tabChanged\");\n    });\n\n    chrome.tabs.onUpdated.addListener(\n      async (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => {\n        if (this.focusedWindowId > 0 && tab.windowId != this.focusedWindowId) {\n          return;\n        }\n\n        if (!tab.active) {\n          return;\n        }\n\n        if (this.main.onUpdatedRan) {\n          return;\n        }\n        this.main.onUpdatedRan = true;\n\n        await this.notificationBackground.checkNotificationQueue(tab);\n        await this.main.refreshBadgeAndMenu();\n        this.main.messagingService.send(\"tabChanged\");\n      }\n    );\n  }\n}\n","import { AuthService } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { UriMatchType } from \"@bitwarden/common/enums/uriMatchType\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService\n  ) {\n    const manifest = chrome.runtime.getManifest();\n    if (manifest.manifest_version === 2) {\n      this.webRequest = (window as any).chrome.webRequest;\n    }\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"]\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      }\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchType.Host\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","import { ApiService as ApiServiceAbstraction } from \"@bitwarden/common/abstractions/api.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"@bitwarden/common/abstractions/appId.service\";\nimport { AuditService as AuditServiceAbstraction } from \"@bitwarden/common/abstractions/audit.service\";\nimport { AuthService as AuthServiceAbstraction } from \"@bitwarden/common/abstractions/auth.service\";\nimport { CipherService as CipherServiceAbstraction } from \"@bitwarden/common/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"@bitwarden/common/abstractions/collection.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EventService as EventServiceAbstraction } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService as ExportServiceAbstraction } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/abstractions/fileUpload.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"@bitwarden/common/abstractions/folder/folder.service.abstraction\";\nimport { I18nService as I18nServiceAbstraction } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"@bitwarden/common/abstractions/keyConnector.service\";\nimport { LogService as LogServiceAbstraction } from \"@bitwarden/common/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { OrganizationService as OrganizationServiceAbstraction } from \"@bitwarden/common/abstractions/organization.service\";\nimport { PasswordGenerationService as PasswordGenerationServiceAbstraction } from \"@bitwarden/common/abstractions/passwordGeneration.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService as ProviderServiceAbstraction } from \"@bitwarden/common/abstractions/provider.service\";\nimport { SearchService as SearchServiceAbstraction } from \"@bitwarden/common/abstractions/search.service\";\nimport { SendService as SendServiceAbstraction } from \"@bitwarden/common/abstractions/send.service\";\nimport { SettingsService as SettingsServiceAbstraction } from \"@bitwarden/common/abstractions/settings.service\";\nimport { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { SyncService as SyncServiceAbstraction } from \"@bitwarden/common/abstractions/sync/sync.service.abstraction\";\nimport { SystemService as SystemServiceAbstraction } from \"@bitwarden/common/abstractions/system.service\";\nimport { TokenService as TokenServiceAbstraction } from \"@bitwarden/common/abstractions/token.service\";\nimport { TotpService as TotpServiceAbstraction } from \"@bitwarden/common/abstractions/totp.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"@bitwarden/common/abstractions/twoFactor.service\";\nimport { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/abstractions/userVerification/userVerification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { UsernameGenerationService as UsernameGenerationServiceAbstraction } from \"@bitwarden/common/abstractions/usernameGeneration.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"@bitwarden/common/abstractions/vaultTimeout/vaultTimeout.service\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"@bitwarden/common/abstractions/vaultTimeout/vaultTimeoutSettings.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { CipherRepromptType } from \"@bitwarden/common/enums/cipherRepromptType\";\nimport { CipherType } from \"@bitwarden/common/enums/cipherType\";\nimport { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { CipherView } from \"@bitwarden/common/models/view/cipherView\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\nimport { AppIdService } from \"@bitwarden/common/services/appId.service\";\nimport { AuditService } from \"@bitwarden/common/services/audit.service\";\nimport { AuthService } from \"@bitwarden/common/services/auth.service\";\nimport { CipherService } from \"@bitwarden/common/services/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/services/collection.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { ContainerService } from \"@bitwarden/common/services/container.service\";\nimport { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\nimport { EventService } from \"@bitwarden/common/services/event.service\";\nimport { ExportService } from \"@bitwarden/common/services/export.service\";\nimport { FileUploadService } from \"@bitwarden/common/services/fileUpload.service\";\nimport { FolderApiService } from \"@bitwarden/common/services/folder/folder-api.service\";\nimport { KeyConnectorService } from \"@bitwarden/common/services/keyConnector.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/services/memoryStorage.service\";\nimport { NotificationsService } from \"@bitwarden/common/services/notifications.service\";\nimport { OrganizationService } from \"@bitwarden/common/services/organization.service\";\nimport { PasswordGenerationService } from \"@bitwarden/common/services/passwordGeneration.service\";\nimport { PolicyApiService } from \"@bitwarden/common/services/policy/policy-api.service\";\nimport { PolicyService } from \"@bitwarden/common/services/policy/policy.service\";\nimport { ProviderService } from \"@bitwarden/common/services/provider.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { SendService } from \"@bitwarden/common/services/send.service\";\nimport { SettingsService } from \"@bitwarden/common/services/settings.service\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\nimport { SyncService } from \"@bitwarden/common/services/sync/sync.service\";\nimport { SystemService } from \"@bitwarden/common/services/system.service\";\nimport { TokenService } from \"@bitwarden/common/services/token.service\";\nimport { TotpService } from \"@bitwarden/common/services/totp.service\";\nimport { TwoFactorService } from \"@bitwarden/common/services/twoFactor.service\";\nimport { UserVerificationApiService } from \"@bitwarden/common/services/userVerification/userVerification-api.service\";\nimport { UserVerificationService } from \"@bitwarden/common/services/userVerification/userVerification.service\";\nimport { UsernameGenerationService } from \"@bitwarden/common/services/usernameGeneration.service\";\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/services/vaultTimeout/vaultTimeoutSettings.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/services/webCryptoFunction.service\";\n\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { PopupUtilsService } from \"../popup/services/popup-utils.service\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../services/abstractions/autofill.service\";\nimport { StateService as StateServiceAbstraction } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserEnvironmentService } from \"../services/browser-environment.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserLocalStorageService from \"../services/browserLocalStorage.service\";\nimport BrowserMessagingService from \"../services/browserMessaging.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../services/browserMessagingPrivateModeBackground.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport { FolderService } from \"../services/folders/folder.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { KeyGenerationService } from \"../services/keyGeneration.service\";\nimport { LocalBackedSessionStorageService } from \"../services/localBackedSessionStorage.service\";\nimport { StateService } from \"../services/state.service\";\nimport { VaultFilterService } from \"../services/vaultFilter.service\";\nimport VaultTimeoutService from \"../services/vaultTimeout/vaultTimeout.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport ContextMenusBackground from \"./contextMenus.background\";\nimport IdleBackground from \"./idle.background\";\nimport IconDetails from \"./models/iconDetails\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport NotificationBackground from \"./notification.background\";\nimport RuntimeBackground from \"./runtime.background\";\nimport TabsBackground from \"./tabs.background\";\nimport WebRequestBackground from \"./webRequest.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: AbstractStorageService;\n  secureStorageService: AbstractStorageService;\n  memoryStorageService: AbstractStorageService;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: BrowserEnvironmentService;\n  settingsService: SettingsServiceAbstraction;\n  cipherService: CipherServiceAbstraction;\n  folderService: InternalFolderServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutServiceAbstraction;\n  vaultTimeoutSettingsService: VaultTimeoutSettingsServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  exportService: ExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  stateMigrationService: StateMigrationService;\n  systemService: SystemServiceAbstraction;\n  eventService: EventServiceAbstraction;\n  policyService: InternalPolicyServiceAbstraction;\n  popupUtilsService: PopupUtilsService;\n  sendService: SendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  organizationService: OrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n  encryptService: EncryptService;\n  folderApiService: FolderApiServiceAbstraction;\n  policyApiService: PolicyApiServiceAbstraction;\n  userVerificationApiService: UserVerificationApiServiceAbstraction;\n\n  // Passed to the popup for Safari to workaround issues with theming, downloading, etc.\n  backgroundWindow = window;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private sidebarAction: any;\n  private buildingContextMenu: boolean;\n  private menuOptionsLoaded: any[] = [];\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n\n  constructor(public isPrivateMode: boolean = false) {\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        this.notificationsService.updateConnection(false);\n      }\n      await this.setIcon();\n      await this.refreshBadgeAndMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.systemService.startProcessReload(this.authService);\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: string) =>\n      await this.logout(expired, userId);\n\n    this.messagingService = isPrivateMode\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.logService = new ConsoleLogService(false);\n    this.cryptoFunctionService = new WebCryptoFunctionService(window);\n    this.storageService = new BrowserLocalStorageService();\n    this.secureStorageService = new BrowserLocalStorageService();\n    this.memoryStorageService =\n      chrome.runtime.getManifest().manifest_version == 3\n        ? new LocalBackedSessionStorageService(\n            new EncryptService(this.cryptoFunctionService, this.logService, false),\n            new KeyGenerationService(this.cryptoFunctionService)\n          )\n        : new MemoryStorageService();\n    this.stateMigrationService = new StateMigrationService(\n      this.storageService,\n      this.secureStorageService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.stateService = new StateService(\n      this.storageService,\n      this.secureStorageService,\n      this.memoryStorageService,\n      this.logService,\n      this.stateMigrationService,\n      new StateFactory(GlobalState, Account)\n    );\n    this.platformUtilsService = new BrowserPlatformUtilsService(\n      this.messagingService,\n      (clipboardValue, clearMs) => {\n        if (this.systemService != null) {\n          this.systemService.clearClipboard(clipboardValue, clearMs);\n        }\n      },\n      async () => {\n        if (this.nativeMessagingBackground != null) {\n          const promise = this.nativeMessagingBackground.getResponse();\n\n          try {\n            await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n\n          return promise.then((result) => result.response === \"unlocked\");\n        }\n      }\n    );\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(window));\n    this.encryptService = new EncryptService(this.cryptoFunctionService, this.logService, true);\n    this.cryptoService = new BrowserCryptoService(\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService\n    );\n    this.tokenService = new TokenService(this.stateService);\n    this.appIdService = new AppIdService(this.storageService);\n    this.environmentService = new BrowserEnvironmentService(this.stateService, this.logService);\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      (expired: boolean) => this.logout(expired)\n    );\n    this.settingsService = new SettingsService(this.stateService);\n    this.fileUploadService = new FileUploadService(this.logService, this.apiService);\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.settingsService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      () => this.searchService,\n      this.logService,\n      this.stateService\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService\n    );\n    this.folderApiService = new FolderApiService(this.folderService, this.apiService);\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateService\n    );\n    this.searchService = new SearchService(this.cipherService, this.logService, this.i18nService);\n    this.sendService = new SendService(\n      this.cryptoService,\n      this.apiService,\n      this.fileUploadService,\n      this.i18nService,\n      this.cryptoFunctionService,\n      this.stateService\n    );\n    this.organizationService = new OrganizationService(this.stateService);\n    this.policyService = new PolicyService(this.stateService, this.organizationService);\n    this.policyApiService = new PolicyApiService(\n      this.policyService,\n      this.apiService,\n      this.stateService,\n      this.organizationService\n    );\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.cryptoFunctionService,\n      logoutCallback\n    );\n    this.vaultFilterService = new VaultFilterService(\n      this.stateService,\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        that.runtimeBackground.processMessage(message, that, null);\n      };\n    })();\n    this.authService = new AuthService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService\n    );\n\n    this.vaultTimeoutSettingsService = new VaultTimeoutSettingsService(\n      this.cryptoService,\n      this.tokenService,\n      this.policyService,\n      this.stateService\n    );\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.keyConnectorService,\n      this.stateService,\n      this.authService,\n      this.vaultTimeoutSettingsService,\n      lockedCallback,\n      logoutCallback\n    );\n\n    this.providerService = new ProviderService(this.stateService);\n    this.syncService = new SyncService(\n      this.apiService,\n      this.settingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.organizationService,\n      this.providerService,\n      this.folderApiService,\n      logoutCallback\n    );\n    this.eventService = new EventService(\n      this.apiService,\n      this.cipherService,\n      this.stateService,\n      this.logService,\n      this.organizationService\n    );\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService\n    );\n    this.totpService = new TotpService(this.cryptoFunctionService, this.logService);\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.totpService,\n      this.eventService,\n      this.logService\n    );\n    this.containerService = new ContainerService(this.cryptoService, this.encryptService);\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n    this.exportService = new ExportService(\n      this.folderService,\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService\n    );\n    this.notificationsService = new NotificationsService(\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.logService,\n      this.stateService,\n      this.authService\n    );\n    this.popupUtilsService = new PopupUtilsService(isPrivateMode);\n\n    this.userVerificationApiService = new UserVerificationApiService(this.apiService);\n\n    this.userVerificationService = new UserVerificationService(\n      this.cryptoService,\n      this.i18nService,\n      this.userVerificationApiService\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? window : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.sidebarAction = this.isSafari\n      ? null\n      : typeof opr !== \"undefined\" && opr.sidebarAction\n      ? opr.sidebarAction\n      : (window as any).chrome.sidebarAction;\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.i18nService,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService\n    );\n\n    this.tabsBackground = new TabsBackground(this, this.notificationBackground);\n    this.contextMenusBackground = new ContextMenusBackground(\n      this,\n      this.cipherService,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.authService,\n      this.eventService,\n      this.totpService\n    );\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService\n    );\n  }\n\n  async bootstrap() {\n    this.containerService.attachToGlobal(window);\n\n    await this.stateService.init();\n\n    await (this.vaultTimeoutService as VaultTimeoutService).init(true);\n    await (this.i18nService as I18nService).init();\n    await (this.eventService as EventService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    await this.commandsBackground.init();\n\n    this.twoFactorService.init();\n\n    await this.tabsBackground.init();\n    await this.contextMenusBackground.init();\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n        await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n      });\n\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await this.actionSetIcon(chrome.browserAction, \"\", win.id);\n          await this.actionSetIcon(this.sidebarAction, \"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.environmentService.setUrlsFromStorage();\n        await this.setIcon();\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async setIcon() {\n    if ((!chrome.browserAction && !this.sidebarAction) || this.isPrivateMode) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    let suffix = \"\";\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      suffix = \"_gray\";\n    } else if (authStatus === AuthenticationStatus.Locked) {\n      suffix = \"_locked\";\n    }\n\n    await this.actionSetIcon(chrome.browserAction, suffix);\n    await this.actionSetIcon(this.sidebarAction, suffix);\n  }\n\n  async refreshBadgeAndMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    const menuDisabled = await this.stateService.getDisableContextMenuItem();\n    if (!menuDisabled) {\n      await this.buildContextMenu();\n    } else {\n      await this.contextMenusRemoveAll();\n    }\n\n    if (forLocked) {\n      await this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.contextMenuReady(tab, !menuDisabled);\n    }\n  }\n\n  async logout(expired: boolean, userId?: string) {\n    await this.eventService.uploadEvents(userId);\n\n    await Promise.all([\n      this.eventService.clearEvents(userId),\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.settingsService.clear(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutSettingsService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n    ]);\n\n    await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === (await this.stateService.getUserId())) {\n      this.searchService.clearIndex();\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    await this.setIcon();\n    await this.refreshBadgeAndMenu(true);\n    await this.reseedStorage();\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.systemService.startProcessReload(this.authService);\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    if (currentVaultTimeout == null) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  private async buildContextMenu() {\n    if (!chrome.contextMenus || this.buildingContextMenu) {\n      return;\n    }\n\n    this.buildingContextMenu = true;\n    await this.contextMenusRemoveAll();\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"root\",\n      contexts: [\"all\"],\n      title: \"Bitwarden\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"autofill\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"autoFill\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-username\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyUsername\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyPassword\"),\n    });\n\n    if (await this.stateService.getCanAccessPremium()) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp\",\n        parentId: \"root\",\n        contexts: [\"all\"],\n        title: this.i18nService.t(\"copyVerificationCode\"),\n      });\n    }\n\n    await this.contextMenusCreate({\n      type: \"separator\",\n      parentId: \"root\",\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"generate-password\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    });\n\n    await this.contextMenusCreate({\n      type: \"normal\",\n      id: \"copy-identifier\",\n      parentId: \"root\",\n      contexts: [\"all\"],\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    });\n\n    this.buildingContextMenu = false;\n  }\n\n  private async contextMenuReady(tab: any, contextMenuEnabled: boolean) {\n    await this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);\n    this.onUpdatedRan = this.onReplacedRan = false;\n  }\n\n  private async loadMenuAndUpdateBadge(url: string, tabId: number, contextMenuEnabled: boolean) {\n    if (!url || (!chrome.browserAction && !this.sidebarAction)) {\n      return;\n    }\n\n    this.actionSetBadgeBackgroundColor(chrome.browserAction);\n    this.actionSetBadgeBackgroundColor(this.sidebarAction);\n\n    this.menuOptionsLoaded = [];\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.Unlocked) {\n      try {\n        const ciphers = await this.cipherService.getAllDecryptedForUrl(url);\n        ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n        if (contextMenuEnabled) {\n          ciphers.forEach((cipher) => {\n            this.loadLoginContextMenuOptions(cipher);\n          });\n        }\n\n        const disableBadgeCounter = await this.stateService.getDisableBadgeCounter();\n        let theText = \"\";\n\n        if (!disableBadgeCounter) {\n          if (ciphers.length > 0 && ciphers.length <= 9) {\n            theText = ciphers.length.toString();\n          } else if (ciphers.length > 0) {\n            theText = \"9+\";\n          }\n        }\n\n        if (contextMenuEnabled && ciphers.length === 0) {\n          await this.loadNoLoginsContextMenuOptions(this.i18nService.t(\"noMatchingLogins\"));\n        }\n\n        this.sidebarActionSetBadgeText(theText, tabId);\n        this.browserActionSetBadgeText(theText, tabId);\n\n        return;\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    await this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);\n  }\n\n  private async loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled: boolean) {\n    if (contextMenuEnabled) {\n      const authed = await this.stateService.getIsAuthenticated();\n      await this.loadNoLoginsContextMenuOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\")\n      );\n    }\n\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach((tab) => {\n        if (tab.id != null) {\n          this.browserActionSetBadgeText(\"\", tab.id);\n          this.sidebarActionSetBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  private async loadLoginContextMenuOptions(cipher: any) {\n    if (\n      cipher == null ||\n      cipher.type !== CipherType.Login ||\n      cipher.reprompt !== CipherRepromptType.None\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n    if (cipher.login.username && cipher.login.username !== \"\") {\n      title += \" (\" + cipher.login.username + \")\";\n    }\n    await this.loadContextMenuOptions(title, cipher.id, cipher);\n  }\n\n  private async loadNoLoginsContextMenuOptions(noLoginsMessage: string) {\n    await this.loadContextMenuOptions(noLoginsMessage, \"noop\", null);\n  }\n\n  private async loadContextMenuOptions(title: string, idSuffix: string, cipher: any) {\n    if (\n      !chrome.contextMenus ||\n      this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||\n      (cipher != null && cipher.type !== CipherType.Login)\n    ) {\n      return;\n    }\n\n    this.menuOptionsLoaded.push(idSuffix);\n\n    if (cipher == null || (cipher.login.password && cipher.login.password !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"autofill_\" + idSuffix,\n        parentId: \"autofill\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (cipher == null || (cipher.login.username && cipher.login.username !== \"\")) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-username_\" + idSuffix,\n        parentId: \"copy-username\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    if (\n      cipher == null ||\n      (cipher.login.password && cipher.login.password !== \"\" && cipher.viewPassword)\n    ) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-password_\" + idSuffix,\n        parentId: \"copy-password\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n\n    const canAccessPremium = await this.stateService.getCanAccessPremium();\n    if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== \"\"))) {\n      await this.contextMenusCreate({\n        type: \"normal\",\n        id: \"copy-totp_\" + idSuffix,\n        parentId: \"copy-totp\",\n        contexts: [\"all\"],\n        title: this.sanitizeContextMenuTitle(title),\n      });\n    }\n  }\n\n  private sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n\n  // Browser API Helpers\n\n  private contextMenusRemoveAll() {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.removeAll(() => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private contextMenusCreate(options: any) {\n    return new Promise<void>((resolve) => {\n      chrome.contextMenus.create(options, () => {\n        resolve();\n        if (chrome.runtime.lastError) {\n          return;\n        }\n      });\n    });\n  }\n\n  private async actionSetIcon(theAction: any, suffix: string, windowId?: number): Promise<any> {\n    if (!theAction || !theAction.setIcon) {\n      return;\n    }\n\n    const options: IconDetails = {\n      path: {\n        19: \"images/icon19\" + suffix + \".png\",\n        38: \"images/icon38\" + suffix + \".png\",\n      },\n    };\n\n    if (this.platformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n      await theAction.setIcon(options);\n    } else if (this.platformUtilsService.isSafari()) {\n      // Workaround since Safari 14.0.3 returns a pending promise\n      // which doesn't resolve within a reasonable time.\n      theAction.setIcon(options);\n    } else {\n      return new Promise<void>((resolve) => {\n        theAction.setIcon(options, () => resolve());\n      });\n    }\n  }\n\n  private actionSetBadgeBackgroundColor(action: any) {\n    if (action && action.setBadgeBackgroundColor) {\n      action.setBadgeBackgroundColor({ color: \"#294e5f\" });\n    }\n  }\n\n  private browserActionSetBadgeText(text: string, tabId: number) {\n    if (chrome.browserAction && chrome.browserAction.setBadgeText) {\n      chrome.browserAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    }\n  }\n\n  private sidebarActionSetBadgeText(text: string, tabId: number) {\n    if (!this.sidebarAction) {\n      return;\n    }\n\n    if (this.sidebarAction.setBadgeText) {\n      this.sidebarAction.setBadgeText({\n        text: text,\n        tabId: tabId,\n      });\n    } else if (this.sidebarAction.setTitle) {\n      let title = \"Bitwarden\";\n      if (text && text !== \"\") {\n        title += \" [\" + text + \"]\";\n      }\n\n      this.sidebarAction.setTitle({\n        title: title,\n        tabId: tabId,\n      });\n    }\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","import { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\n\n/**\n * If you want to use this, don't.\n * If you think you should use that after the warning, don't.\n */\nexport class NoopEventService implements EventService {\n  constructor() {\n    if (chrome.runtime.getManifest().manifest_version !== 3) {\n      throw new Error(\"You are not allowed to use this when not in manifest_version 3\");\n    }\n  }\n\n  collect(eventType: EventType, cipherId?: string, uploadImmediately?: boolean) {\n    return Promise.resolve();\n  }\n  uploadEvents(userId?: string) {\n    return Promise.resolve();\n  }\n  clearEvents(userId?: string) {\n    return Promise.resolve();\n  }\n}\n","import AutofillPageDetails from \"../models/autofillPageDetails\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nexport class AutoFillActiveTabCommand {\n  constructor(private autofillService: AutofillService) {}\n\n  async doAutoFillActiveTabCommand(tab: chrome.tabs.Tab) {\n    if (!tab.id) {\n      throw new Error(\"Tab does not have an id, cannot complete autofill.\");\n    }\n\n    const details = await this.collectPageDetails(tab.id);\n    await this.autofillService.doAutoFillOnTab(\n      [\n        {\n          frameId: 0,\n          tab: tab,\n          details: details,\n        },\n      ],\n      tab,\n      true\n    );\n  }\n\n  private async collectPageDetails(tabId: number): Promise<AutofillPageDetails> {\n    return new Promise((resolve, reject) => {\n      chrome.tabs.sendMessage(\n        tabId,\n        {\n          command: \"collectPageDetailsImmediately\",\n        },\n        (response: AutofillPageDetails) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(response);\n        }\n      );\n    });\n  }\n}\n","import { AuthenticationStatus } from \"@bitwarden/common/enums/authenticationStatus\";\nimport { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { AuthService } from \"@bitwarden/common/services/auth.service\";\nimport { CipherService } from \"@bitwarden/common/services/cipher.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\nimport { NoopEventService } from \"@bitwarden/common/services/noopEvent.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { SettingsService } from \"@bitwarden/common/services/settings.service\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/services/webCryptoFunction.service\";\n\nimport { AutoFillActiveTabCommand } from \"../commands/autoFillActiveTabCommand\";\nimport { Account } from \"../models/account\";\nimport { StateService as AbstractStateService } from \"../services/abstractions/state.service\";\nimport AutofillService from \"../services/autofill.service\";\nimport { BrowserCryptoService } from \"../services/browserCrypto.service\";\nimport BrowserLocalStorageService from \"../services/browserLocalStorage.service\";\nimport BrowserPlatformUtilsService from \"../services/browserPlatformUtils.service\";\nimport I18nService from \"../services/i18n.service\";\nimport { KeyGenerationService } from \"../services/keyGeneration.service\";\nimport { LocalBackedSessionStorageService } from \"../services/localBackedSessionStorage.service\";\nimport { StateService } from \"../services/state.service\";\n\nexport const onCommandListener = async (command: string, tab: chrome.tabs.Tab) => {\n  switch (command) {\n    case \"autofill_login\":\n      await doAutoFillLogin(tab);\n      break;\n  }\n};\n\nconst doAutoFillLogin = async (tab: chrome.tabs.Tab): Promise<void> => {\n  const logService = new ConsoleLogService(false);\n\n  const cryptoFunctionService = new WebCryptoFunctionService(self);\n\n  const storageService = new BrowserLocalStorageService();\n\n  const secureStorageService = new BrowserLocalStorageService();\n\n  const memoryStorageService = new LocalBackedSessionStorageService(\n    new EncryptService(cryptoFunctionService, logService, false),\n    new KeyGenerationService(cryptoFunctionService)\n  );\n\n  const stateFactory = new StateFactory(GlobalState, Account);\n\n  const stateMigrationService = new StateMigrationService(\n    storageService,\n    secureStorageService,\n    stateFactory\n  );\n\n  const stateService: AbstractStateService = new StateService(\n    storageService,\n    secureStorageService,\n    memoryStorageService, // AbstractStorageService\n    logService,\n    stateMigrationService,\n    stateFactory\n  );\n\n  await stateService.init();\n\n  const platformUtils = new BrowserPlatformUtilsService(\n    null, // MessagingService\n    null, // clipboardWriteCallback\n    null // biometricCallback\n  );\n\n  const cryptoService = new BrowserCryptoService(\n    cryptoFunctionService,\n    null, // AbstractEncryptService\n    platformUtils,\n    logService,\n    stateService\n  );\n\n  const settingsService = new SettingsService(stateService);\n\n  const i18nService = new I18nService(chrome.i18n.getUILanguage());\n\n  await i18nService.init();\n\n  // Don't love this pt.1\n  let searchService: SearchService = null;\n\n  const cipherService = new CipherService(\n    cryptoService,\n    settingsService,\n    null, // ApiService\n    null, // FileUploadService,\n    i18nService,\n    () => searchService, // Don't love this pt.2\n    logService,\n    stateService\n  );\n\n  // Don't love this pt.3\n  searchService = new SearchService(cipherService, logService, i18nService);\n\n  // TODO: Remove this before we encourage anyone to start using this\n  const eventService = new NoopEventService();\n\n  const autofillService = new AutofillService(\n    cipherService,\n    stateService,\n    null, // TotpService\n    eventService,\n    logService\n  );\n\n  const authService = new AuthService(\n    cryptoService, // CryptoService\n    null, // ApiService\n    null, // TokenService\n    null, // AppIdService\n    platformUtils,\n    null, // MessagingService\n    logService,\n    null, // KeyConnectorService\n    null, // EnvironmentService\n    stateService,\n    null, // TwoFactorService\n    i18nService\n  );\n\n  const authStatus = await authService.getAuthStatus();\n  if (authStatus < AuthenticationStatus.Unlocked) {\n    // TODO: Add back in unlock on autofill\n    logService.info(\"Currently not unlocked, MV3 does not support unlock on autofill currently.\");\n    return;\n  }\n\n  const command = new AutoFillActiveTabCommand(autofillService);\n  await command.doAutoFillActiveTabCommand(tab);\n};\n","export type CachedServices = Record<string, any>;\n\nexport type FactoryOptions = {\n  alwaysInitializeNewService?: boolean;\n  doNotStoreInitializedService?: boolean;\n  [optionsKey: string]: unknown;\n};\n\nexport async function factory<\n  TCache extends CachedServices,\n  TName extends keyof TCache,\n  TOpts extends FactoryOptions\n>(\n  cachedServices: TCache,\n  name: TName,\n  opts: TOpts,\n  factory: () => TCache[TName] | Promise<TCache[TName]>\n): Promise<TCache[TName]> {\n  let instance = cachedServices[name];\n  if (opts.alwaysInitializeNewService || !instance) {\n    const instanceOrPromise = factory();\n    instance = instanceOrPromise instanceof Promise ? await instanceOrPromise : instanceOrPromise;\n  }\n\n  if (!opts.doNotStoreInitializedService) {\n    cachedServices[name] = instance;\n  }\n\n  return instance as TCache[TName];\n}\n","import { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { LogLevelType } from \"@bitwarden/common/enums/logLevelType\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype LogServiceFactoryOptions = FactoryOptions & {\n  logServiceOptions: {\n    isDev: boolean;\n    filter?: (level: LogLevelType) => boolean;\n  };\n};\n\nexport type LogServiceInitOptions = LogServiceFactoryOptions;\n\nexport function logServiceFactory(\n  cache: { logService?: LogService } & CachedServices,\n  opts: LogServiceInitOptions\n): Promise<LogService> {\n  return factory(\n    cache,\n    \"logService\",\n    opts,\n    () => new ConsoleLogService(opts.logServiceOptions.isDev, opts.logServiceOptions.filter)\n  );\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/services/webCryptoFunction.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype CryptoFunctionServiceFactoryOptions = FactoryOptions & {\n  cryptoFunctionServiceOptions: {\n    win: Window | typeof global;\n  };\n};\n\nexport type CryptoFunctionServiceInitOptions = CryptoFunctionServiceFactoryOptions;\n\nexport function cryptoFunctionServiceFactory(\n  cache: { cryptoFunctionService?: CryptoFunctionService } & CachedServices,\n  opts: CryptoFunctionServiceFactoryOptions\n): Promise<CryptoFunctionService> {\n  return factory(\n    cache,\n    \"cryptoFunctionService\",\n    opts,\n    () => new WebCryptoFunctionService(opts.cryptoFunctionServiceOptions.win)\n  );\n}\n","import { AbstractStorageService } from \"@bitwarden/common/abstractions/storage.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/services/memoryStorage.service\";\n\nimport BrowserLocalStorageService from \"../../services/browserLocalStorage.service\";\nimport { LocalBackedSessionStorageService } from \"../../services/localBackedSessionStorage.service\";\n\nimport { encryptServiceFactory, EncryptServiceInitOptions } from \"./encrypt-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport {\n  keyGenerationServiceFactory,\n  KeyGenerationServiceInitOptions,\n} from \"./key-generation-service.factory\";\n\ntype StorageServiceFactoryOptions = FactoryOptions;\n\nexport type DiskStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type SecureStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type MemoryStorageServiceInitOptions = StorageServiceFactoryOptions &\n  EncryptServiceInitOptions &\n  KeyGenerationServiceInitOptions;\n\nexport function diskStorageServiceFactory(\n  cache: { diskStorageService?: AbstractStorageService } & CachedServices,\n  opts: DiskStorageServiceInitOptions\n): Promise<AbstractStorageService> {\n  return factory(cache, \"diskStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function secureStorageServiceFactory(\n  cache: { secureStorageService?: AbstractStorageService } & CachedServices,\n  opts: SecureStorageServiceInitOptions\n): Promise<AbstractStorageService> {\n  return factory(cache, \"secureStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function memoryStorageServiceFactory(\n  cache: { memoryStorageService?: AbstractStorageService } & CachedServices,\n  opts: MemoryStorageServiceInitOptions\n): Promise<AbstractStorageService> {\n  return factory(cache, \"memoryStorageService\", opts, async () => {\n    if (chrome.runtime.getManifest().manifest_version == 3) {\n      return new LocalBackedSessionStorageService(\n        await encryptServiceFactory(cache, opts),\n        await keyGenerationServiceFactory(cache, opts)\n      );\n    }\n    return new MemoryStorageService();\n  });\n}\n","import { EncryptService } from \"@bitwarden/common/services/encrypt.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { LogServiceInitOptions, logServiceFactory } from \"./log-service.factory\";\n\ntype EncryptServiceFactoryOptions = FactoryOptions & {\n  encryptServiceOptions: {\n    logMacFailures: boolean;\n  };\n};\n\nexport type EncryptServiceInitOptions = EncryptServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function encryptServiceFactory(\n  cache: { encryptService?: EncryptService } & CachedServices,\n  opts: EncryptServiceInitOptions\n): Promise<EncryptService> {\n  return factory(\n    cache,\n    \"encryptService\",\n    opts,\n    async () =>\n      new EncryptService(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        opts.encryptServiceOptions.logMacFailures\n      )\n  );\n}\n","import { KeyGenerationService } from \"../../services/keyGeneration.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype KeyGenerationServiceFactoryOptions = FactoryOptions;\n\nexport type KeyGenerationServiceInitOptions = KeyGenerationServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions;\n\nexport function keyGenerationServiceFactory(\n  cache: { keyGenerationService?: KeyGenerationService } & CachedServices,\n  opts: KeyGenerationServiceInitOptions\n): Promise<KeyGenerationService> {\n  return factory(\n    cache,\n    \"keyGenerationService\",\n    opts,\n    async () => new KeyGenerationService(await cryptoFunctionServiceFactory(cache, opts))\n  );\n}\n","import { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\n\nimport { Account } from \"../../models/account\";\nimport { StateService } from \"../../services/state.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport {\n  stateMigrationServiceFactory,\n  StateMigrationServiceInitOptions,\n} from \"./state-migration-service.factory\";\nimport {\n  diskStorageServiceFactory,\n  secureStorageServiceFactory,\n  memoryStorageServiceFactory,\n  DiskStorageServiceInitOptions,\n  SecureStorageServiceInitOptions,\n  MemoryStorageServiceInitOptions,\n} from \"./storage-service.factory\";\n\ntype StateServiceFactoryOptions = FactoryOptions & {\n  stateServiceOptions: {\n    useAccountCache?: boolean;\n    stateFactory: StateFactory<GlobalState, Account>;\n  };\n};\n\nexport type StateServiceInitOptions = StateServiceFactoryOptions &\n  DiskStorageServiceInitOptions &\n  SecureStorageServiceInitOptions &\n  MemoryStorageServiceInitOptions &\n  LogServiceInitOptions &\n  StateMigrationServiceInitOptions;\n\nexport async function stateServiceFactory(\n  cache: { stateService?: StateService } & CachedServices,\n  opts: StateServiceInitOptions\n): Promise<StateService> {\n  const service = await factory(\n    cache,\n    \"stateService\",\n    opts,\n    async () =>\n      await new StateService(\n        await diskStorageServiceFactory(cache, opts),\n        await secureStorageServiceFactory(cache, opts),\n        await memoryStorageServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await stateMigrationServiceFactory(cache, opts),\n        opts.stateServiceOptions.stateFactory,\n        opts.stateServiceOptions.useAccountCache\n      )\n  );\n  service.init();\n  return service;\n}\n","import { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\nimport { StateMigrationService } from \"@bitwarden/common/services/stateMigration.service\";\n\nimport { Account } from \"../../models/account\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport {\n  diskStorageServiceFactory,\n  DiskStorageServiceInitOptions,\n  secureStorageServiceFactory,\n  SecureStorageServiceInitOptions,\n} from \"./storage-service.factory\";\n\ntype StateMigrationServiceFactoryOptions = FactoryOptions & {\n  stateMigrationServiceOptions: {\n    stateFactory: StateFactory<GlobalState, Account>;\n  };\n};\n\nexport type StateMigrationServiceInitOptions = StateMigrationServiceFactoryOptions &\n  DiskStorageServiceInitOptions &\n  SecureStorageServiceInitOptions;\n\nexport function stateMigrationServiceFactory(\n  cache: { stateMigrationService?: StateMigrationService } & CachedServices,\n  opts: StateMigrationServiceInitOptions\n): Promise<StateMigrationService> {\n  return factory(\n    cache,\n    \"stateMigrationService\",\n    opts,\n    async () =>\n      new StateMigrationService(\n        await diskStorageServiceFactory(cache, opts),\n        await secureStorageServiceFactory(cache, opts),\n        opts.stateMigrationServiceOptions.stateFactory\n      )\n  );\n}\n","import MainBackground from \"./background/main.background\";\nimport { onCommandListener } from \"./listeners/onCommandListener\";\nimport { onInstallListener } from \"./listeners/onInstallListener\";\n\nconst manifest = chrome.runtime.getManifest();\n\nif (manifest.manifest_version === 3) {\n  chrome.commands.onCommand.addListener(onCommandListener);\n  chrome.runtime.onInstalled.addListener(onInstallListener);\n} else {\n  const bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\n  bitwardenMain.bootstrap().then(() => {\n    // Finished bootstrapping\n  });\n}\n","import { StateFactory } from \"@bitwarden/common/factories/stateFactory\";\nimport { GlobalState } from \"@bitwarden/common/models/domain/globalState\";\n\nimport { environmentServiceFactory } from \"../background/service_factories/environment-service.factory\";\nimport { BrowserApi } from \"../browser/browserApi\";\nimport { Account } from \"../models/account\";\n\nexport async function onInstallListener(details: chrome.runtime.InstalledDetails) {\n  const cache = {};\n  const opts = {\n    encryptServiceOptions: {\n      logMacFailures: false,\n    },\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    stateServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n    stateMigrationServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n  };\n  const environmentService = await environmentServiceFactory(cache, opts);\n\n  setTimeout(async () => {\n    if (details.reason != null && details.reason === \"install\") {\n      BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n      if (await environmentService.hasManagedEnvironment()) {\n        await environmentService.setUrlsToManagedEnvironment();\n      }\n    }\n  }, 100);\n}\n","import { BrowserEnvironmentService } from \"../../services/browser-environment.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport {\n  stateServiceFactory as stateServiceFactory,\n  StateServiceInitOptions,\n} from \"./state-service.factory\";\n\ntype EnvironmentServiceFactoryOptions = FactoryOptions;\n\nexport type EnvironmentServiceInitOptions = EnvironmentServiceFactoryOptions &\n  StateServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function environmentServiceFactory(\n  cache: { environmentService?: BrowserEnvironmentService } & CachedServices,\n  opts: EnvironmentServiceInitOptions\n): Promise<BrowserEnvironmentService> {\n  return factory(\n    cache,\n    \"environmentService\",\n    opts,\n    async () =>\n      new BrowserEnvironmentService(\n        await stateServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts)\n      )\n  );\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(42227)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","AuthenticationStatus","CipherRepromptType","CipherType","StateVersion","ThemeType","DeviceType","AccountFactory","constructor","accountConstructor","this","create","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","EnvironmentUrls","base","api","identity","icons","notifications","events","webVault","keyConnector","static","obj","Object","assign","WindowState","GlobalState","theme","System","window","stateVersion","One","environmentUrls","nodeURL","Utils","inited","isNode","process","release","name","isBrowser","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","self","str","Uint8Array","Buffer","from","binaryString","atob","bytes","length","i","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","encodedString","apply","decodeURIComponent","escape","Array","prototype","map","call","x","slice","join","urlB64Str","output","Error","fromB64ToUtf8","utfStr","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","id","RegExp","test","uriString","url","getUrl","hostname","host","trim","startsWith","httpUrl","indexOf","tldEndingRegex","getUrlObject","tldjs","isValid","validIpAddress","urlDomain","getDomain","e","domain","search","Map","split","forEach","pair","parts","set","toLowerCase","i18nService","prop","a","b","collator","compare","localeCompare","target","source","keys","filter","k","Number","isNaN","s","charAt","toUpperCase","bgColor","threshold","svgTextFill","bgColorHexNums","substring","hash","color","bitwardenContainerService","ipString","win","mobile","navigator","userAgent","vendor","opera","match","URL","hasProtocol","anchor","document","createElement","href","regexpEmojiPresentation","init","DeviceRequest","appId","platformUtilsService","type","getDevice","getDeviceString","identifier","pushToken","TokenRequest","twoFactor","device","alterIdentityTokenHeaders","headers","setTwoFactor","setPasswordlessAccessCode","accessCode","passwordlessAuthRequest","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","deviceName","authRequest","token","provider","twoFactorToken","twoFactorProvider","twoFactorRemember","remember","ApiTokenRequest","clientSecret","super","grant_type","client_secret","TokenRequestTwoFactor","response","getResponseProperty","propertyName","exactName","undefined","otherCasePropertyName","ApiKeyResponse","apiKey","revisionDate","Date","AttachmentResponse","fileName","key","size","sizeName","CardApi","data","cardholderName","brand","number","expMonth","expYear","code","FieldApi","value","linkedId","IdentityApi","title","firstName","middleName","lastName","address1","address2","address3","city","state","postalCode","country","company","email","phone","ssn","username","passportNumber","licenseNumber","LoginUriApi","uri","LoginApi","password","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","SecureNoteApi","PasswordHistoryResponse","lastUsedDate","CipherResponse","organizationId","folderId","notes","favorite","edit","viewPassword","organizationUseTotp","collectionIds","deletedDate","login","card","secureNote","fields","f","attachments","passwordHistory","h","reprompt","None","AttachmentUploadDataResponse","attachmentId","fileUploadType","cipherResponse","cipherMiniResponse","AuthRequestResponse","publicKey","requestDeviceType","requestIpAddress","masterPasswordHash","creationDate","requestApproved","RegisterResponse","captchaBypassToken","BillingSourceResponse","cardBrand","description","needsVerification","BillingInvoiceResponse","pdfUrl","paid","date","amount","BillingTransactionResponse","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","invoices","transactions","t","hasNoHistory","BillingPaymentResponse","balance","paymentSource","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","SelectionReadOnlyResponse","readOnly","hidePasswords","CollectionResponse","externalId","CollectionDetailsResponse","CollectionGroupDetailsResponse","groups","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","equivalentDomains","d","EmergencyAccessGranteeDetailsResponse","granteeId","status","waitTimeDays","EmergencyAccessGrantorDetailsResponse","grantorId","EmergencyAccessTakeoverResponse","keyEncrypted","kdf","kdfIterations","EmergencyAccessViewResponse","ciphers","ErrorResponse","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","isNullOrWhitespace","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","push","EventResponse","userId","providerId","cipherId","collectionId","groupId","policyId","organizationUserId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","GroupResponse","accessAll","GroupDetailsResponse","collections","IdentityCaptchaResponse","siteKey","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","resetMasterPassword","privateKey","forcePasswordReset","apiUseKeyConnector","keyConnectorUrl","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","twoFactorProviders","KeyConnectorUserKeyResponse","ListResponse","dr","continuationToken","OrganizationConnectionResponse","configType","enabled","rawConfig","config","OrganizationExportResponse","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","OrganizationUserBulkPublicKeyResponse","OrganizationUserBulkResponse","error","PermissionsApi","accessEventLogs","accessImportExport","accessReports","manageAllCollections","manageAssignedCollections","createNewCollections","editAnyCollection","deleteAnyCollection","editAssignedCollections","deleteAssignedCollections","manageCiphers","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","manageScim","OrganizationUserResponse","permissions","resetPasswordEnrolled","OrganizationUserUserDetailsResponse","twoFactorEnabled","usesKeyConnector","OrganizationUserDetailsResponse","OrganizationUserResetPasswordDetailsReponse","resetPasswordKey","encryptedPrivateKey","ProfileOrganizationResponse","usePolicies","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useSso","useKeyConnector","useScim","useResetPassword","selfHost","usersGetPremium","seats","maxCollections","maxStorageGb","hasPublicAndPrivateKeys","ssoBound","providerName","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","keyConnectorEnabled","familySponsorshipLastSyncDateString","familySponsorshipLastSyncDate","familySponsorshipValidUntilString","familySponsorshipValidUntil","familySponsorshipToDelete","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","organizations","providers","providerOrganizations","emailVerified","masterPasswordHint","premiumPersonally","premiumFromOrganization","culture","securityStamp","o","PaymentResponse","userProfile","paymentIntentClientSecret","success","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","baseSeats","baseStorageGb","maxUsers","hasAdditionalSeatsOption","maxAdditionalSeats","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","hasTotp","has2fa","hasApi","hasSso","hasResetPassword","upgradeSortOrder","displaySortOrder","legacyYear","disabled","stripePlanId","stripeSeatPlanId","stripeStoragePlanId","stripePremiumAccessPlanId","basePrice","seatPrice","additionalStoragePricePerGb","premiumAccessOptionPrice","PolicyResponse","PreloginResponse","ProviderOrganizationResponse","settings","userCount","plan","ProviderOrganizationOrganizationDetailsResponse","organizationName","ProviderResponse","businessName","billingEmail","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","ProviderUserResponse","ProviderUserUserDetailsResponse","SendFileApi","SendTextApi","text","hidden","SendAccessResponse","file","expirationDate","creatorIdentifier","SendFileDownloadDataResponse","SendResponse","accessId","maxAccessCount","accessCount","deletionDate","disable","hideEmail","SendFileUploadDataResponse","sendResponse","SsoPreValidateResponse","SubscriptionResponse","storageName","storageGb","license","expiration","usingInAppPurchase","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","items","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","quantity","interval","sponsoredSubscriptionItem","FolderResponse","SyncResponse","folders","policies","sends","profile","p","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","extensions","pubKeyCredParams","rp","timeout","user","TwoFactorYubiKeyResponse","key1","key2","key3","key4","key5","nfc","UserKeyResponse","HtmlStorageLocation","ApiService","tokenService","environmentService","appIdService","logoutCallback","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","WindowsDesktop","MacOsDesktop","LinuxDesktop","postIdentityToken","request","Headers","Accept","identityToken","getClientType","fetch","Request","getIdentityUrl","body","qsStringify","credentials","getCredentials","cache","method","responseJson","isJsonResponse","json","TwoFactorProviders2","clearTwoFactorToken","Promise","reject","refreshIdentityToken","doAuthRefresh","postAuthRequest","send","getAuthResponse","path","getProfile","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postPrelogin","isDev","getApiUrl","postEmailToken","postEmail","postPassword","setPassword","postSetKeyConnectorKey","postSecurityStamp","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postIapCheck","postReinstatePremium","postCancelPremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKeys","postAccountKey","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","postConvertToKeyConnector","getUserBillingHistory","getUserBillingPayment","getSend","postSendAccess","apiUrl","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","getCipher","getFullCipherDetails","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","postImportCiphers","postImportOrganizationCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionDetails","getUserCollections","getCollections","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteCollectionUser","getGroupDetails","getGroups","getGroupUsers","postGroup","putGroup","putGroupUsers","deleteGroup","deleteGroupUser","getOrganizationUser","getOrganizationUserGroups","getOrganizationUsers","getOrganizationUserResetPasswordDetails","postOrganizationUserInvite","postOrganizationUserReinvite","postManyOrganizationUserReinvite","postOrganizationUserAccept","postOrganizationUserConfirm","postOrganizationUsersPublicKey","postOrganizationUserBulkConfirm","putOrganizationUser","putOrganizationUserGroups","putOrganizationUserResetPasswordEnrollment","putOrganizationUserResetPassword","deleteOrganizationUser","deleteManyOrganizationUsers","revokeOrganizationUser","revokeManyOrganizationUsers","restoreOrganizationUser","restoreManyOrganizationUsers","getPlans","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","deviceResponse","rawId","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","clientDataJSON","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getEmergencyAccessTrusted","getEmergencyAccessGranted","getEmergencyAccess","getEmergencyGrantorPolicies","putEmergencyAccess","deleteEmergencyAccess","postEmergencyAccessInvite","postEmergencyAccessReinvite","postEmergencyAccessAccept","postEmergencyAccessConfirm","postEmergencyAccessInitiate","postEmergencyAccessApprove","postEmergencyAccessReject","postEmergencyAccessTakeover","postEmergencyAccessPassword","postEmergencyAccessView","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","start","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","JSON","stringify","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","getUserKeyFromKeyConnector","handleError","postUserKeyToKeyConnector","getKeyConnectorAlive","getOrganizationExport","getToken","tokenNeedsRefresh","getApplicationVersion","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","getRefreshToken","doRefreshToken","getClientId","getClientSecret","doApiTokenRefresh","decodedToken","decodeToken","tokenResponse","setTokens","getAppId","deviceRequest","tokenRequest","setToken","authed","hasResponse","alterHeaders","requestUrl","requestInit","FormData","responseType","get","responseIsJson","tokenError","isTextResponse","Message","params","hasBaseUrl","typeHeader","AppIdService","storageService","makeAndGetAppId","getAnonymousAppId","existingId","htmlStorageLocation","Local","guid","newGuid","save","AuditService","cryptoFunctionService","apiService","passwordLeaked","hashBytes","fromBufferToHex","hashStart","hashEnding","find","v","breachedAccounts","limit","throttleKey","propertyKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","resolve","exec","onFinally","splice","delete","then","val","catch","err","AuthenticationType","KeySuffixOptions","TwoFactorProviderType","EncryptionType","ServerConfigData","serverConfigResponse","version","gitHash","server","ThirdPartyServerConfigData","utcDate","toISOString","environment","EnvironmentServerConfigData","fromJSON","vault","sso","EncString","encryptedStringOrType","iv","mac","initFromData","initFromEncryptedString","ivBytes","macBytes","dataBytes","toJSON","encryptedString","encType","encryptionType","encPieces","parseEncryptedString","AesCbc128_HmacSha256_B64","AesCbc256_HmacSha256_B64","AesCbc256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","headerPieces","decrypt","orgId","decryptedValue","getKeyForDecryption","encryptService","getContainerService","getEncryptService","decryptToUtf8","cryptoService","getCryptoService","getOrgKey","getKeyForUserEncryption","SymmetricCryptoKey","encKey","macKey","keyB64","encKeyB64","macKeyB64","arrayBuffer","EncryptionPair","encrypted","decrypted","ArrayBuffer","fromBufferToByteString","decryptedFromJson","encryptedFromJson","DataEncryptionPair","TemporaryDataEncryption","AccountData","passwordGenerationHistory","AccountKeys","cryptoSymmetricKey","organizationKeys","providerKeys","cryptoMasterKey","initRecordEncryptionPairsFromJSON","decObj","fromByteStringToArray","record","AccountProfile","pinProtected","vaultTimeoutAction","serverConfig","AccountTokens","tokens","AuthResult","requiresCaptcha","requiresTwoFactor","KeysRequest","LogInStrategy","messagingService","logService","stateService","twoFactorService","logInTwoFactor","captchaResponse","startLogIn","clearSelectedProvider","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","onSuccessfulLogin","buildDeviceRequest","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","accountInformation","addAccount","sub","hasPremiumPersonally","premium","kdfType","result","setTwoFactorToken","setEncKey","setEncPrivateKey","createKeyPairForOldAccount","setProviders","makeKeyPair","HashPurpose","ApiLogInStrategy","keyConnectorService","getKeyConnectorUrl","getAndSetKey","logIn","setApiKeyClientId","setApiKeyClientSecret","PasswordTokenRequest","fromUtf8ToUrlB64","PasswordLogInStrategy","authService","setKey","setKeyHash","localHashedPassword","masterPassword","makePreloginKey","hashPassword","LocalAuthorization","hashedPassword","PasswordlessLogInStrategy","localPasswordHash","decKey","authRequestId","SsoTokenRequest","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLogInStrategy","newSsoUser","convertNewSsoUserToKeyConnector","redirectUrl","PreloginRequest","AuthService","pushNotificationSubject","Subject","logInStrategy","strategy","clearState","Password","Sso","Api","Passwordless","saveState","logOut","callback","authingWithApiKey","authingWithSso","authingWithPassword","getAuthStatus","getIsAuthenticated","LoggedOut","hasKeyStored","Auto","getEverBeenUnlocked","getKey","hasKeyInMemory","Unlocked","Locked","preloginResponse","makeKey","authResponsePushNotifiction","notification","next","getPushNotifcationObs$","asObservable","startSessionTimeout","clearSessionTimeout","sessionTimeout","setTimeout","clearTimeout","FieldType","UriMatchType","sequentialize","cacheKey","caches","getCache","argsCacheKey","AttachmentData","CardData","FieldData","IdentityData","LoginUriData","LoginData","PasswordHistoryData","SecureNoteData","CipherData","Login","SecureNote","Card","Identity","ph","AttachmentView","fileSize","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","theProp","mapProp","all","LoginLinkedId","CardLinkedId","IdentityLinkedId","Attachment","view","decryptAttachmentKey","decValue","decryptToBytes","toAttachmentData","LinkedMetadata","_i18nKey","i18nKey","linkedFieldOption","linkedFieldOptions","ItemView","CardView","_brand","_number","_subTitle","maskedCode","repeat","maskedNumber","subTitle","count","exp","formatYear","year","toCardData","FieldView","newField","showValue","showCount","maskedValue","IdentityView","_firstName","_lastName","fullName","fullAddress","address","fullAddressPart2","addressPart2","CanLaunchWhitelist","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","RegularExpression","getHostname","getHost","hostnameOrUri","hostOrUri","isWebsite","canLaunch","launchUri","LoginView","l","hasUris","maskedPassword","some","PasswordHistoryView","SecureNoteView","n","CipherView","localData","hasPasswordHistory","hasAttachments","hasOldAttachments","hasFields","passwordRevisionDisplayDate","isDeleted","linkedFieldValue","linkedFieldI18nKey","Field","toFieldData","toIdentityData","LoginUri","toLoginUriData","toLoginData","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","EncArrayBuffer","encBytes","minimumLength","ENC_TYPE_LENGTH","throwDecryptionError","b64","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","has","addCiphers","sort","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","clear","lastUsedIndex","max","cipher","lastLaunched","y","valueOf","getNextIndex","CipherBulkDeleteRequest","ids","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherCollectionsRequest","CipherCreateRequest","CipherShareRequest","DomainMatchBlacklist","Set","CipherService","settingsService","fileUploadService","searchService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearIndex","indexCiphers","clearCache","clearDecryptedCiphersState","encrypt","originalCipher","existingCipher","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","encryptObjProperty","encryptCipherData","encryptFields","encryptPasswordHistories","encryptAttachments","attachmentsModel","encAttachments","fieldsModel","encFields","encField","encryptField","fieldModel","Boolean","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAll","getAllDecrypted","getUserId","indexedEntityId","decCiphers","hasKey","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","eqDomainsPromise","firstValueFrom","settings$","matches","eqDomain","concat","matchingDomains","getDefaultUriMatch","domainUrlHost","Host","urlHost","Exact","StartsWith","Never","getAllFromApiForOrganization","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","getTime","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","getNeverDomains","setNeverDomains","saveWithServer","upsert","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","encFileName","dataEncKey","makeEncKey","encData","encryptToBytes","adminRequest","uploadDataResponse","uploadCipherAttachment","legacyServerAttachmentFileUpload","fd","blob","Blob","append","filepath","contentType","saveCollectionsWithServer","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","attachmentView","attachmentResponse","encBuf","fromResponse","decBuf","decryptFromBytes","theObj","modelProp","loginUri","lastUsed","autofillOnPageLoadDefault","getAutoFillOnPageLoadDefault","clearSortedCiphers","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","CollectionData","CollectionView","Collection","CollectionService","setDecryptedCollections","collection","decryptMany","decCollections","getSortFunction","getEncryptedCollections","decryptedCollections","getDecryptedCollections","getAllNested","nodes","collectionCopy","getNested","setEncryptedCollections","LogLevelType","ConsoleLogService","timersMap","debug","write","Debug","info","Info","warning","Warning","level","console","log","warn","ContainerService","attachToGlobal","EncryptedObject","EncryptService","logMacFailures","plainValue","plainBuf","encObj","aesEncrypt","encValue","macLen","encString","resolveLegacyKey","fastParams","aesDecryptFastParameters","computedMac","hmacFast","macData","compareFast","logMacFailed","aesDecryptFast","encThing","hmac","aesDecrypt","randomBytes","msg","EventData","EventRequest","EventService","cipherService","organizationService","checkOnInterval","uploadEvents","setInterval","collect","eventType","uploadImmediately","orgIds","eventCollection","getEventCollection","event","setEventCollection","req","clearEvents","KdfType","PBKDF2_SHA256","CardExport","FieldExport","Text","IdentityExport","LoginUriExport","LoginExport","toView","toDomain","SecureNoteType","EventType","SecureNoteExport","Generic","CipherExport","values","build","CipherWithIdExport","CollectionExport","CollectionWithIdExport","EventExport","humanReadableMessage","appIcon","appName","userName","userEmail","ip","FolderView","Folder","FolderExport","FolderWithIdExport","FileUploadType","ExportService","folderService","getExport","format","getEncryptedExport","getDecryptedExport","getPasswordProtectedExport","clearText","salt","makePinKey","encKeyValidation","encText","jsonDoc","passwordProtected","encKeyValidation_DO_NOT_EDIT","getOrganizationEncryptedExport","getOrganizationDecryptedExport","getEventExport","getFileName","extension","now","getFullYear","padNumber","getMonth","getDate","getHours","getMinutes","getSeconds","decFolders","folderViews$","foldersMap","exportCiphers","buildCommonCipher","folders$","exportData","exportPromises","decCol","decCipher","collectionsMap","orgKey","num","width","padCharacter","numString","login_uri","login_username","login_password","login_totp","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","toUTCString","searchParams","blobResponse","baseUrl","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","Version","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadSendFile","uploadData","Direct","Azure","FolderData","FolderRequest","OrganizationUserType","FolderApiService","postFolder","putFolder","deleteFolder","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorUserKeyRequest","KeyConnectorService","setUsesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","organization","keyConnectorRequest","handleKeyConnectorError","userKeyResponse","keyArr","Admin","Owner","isProviderUser","getEmail","pubKey","privKey","setPasswordRequest","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","AbstractStorageService","AbstractCachedStorageService","MemoryStorageService","store","remove","NotificationType","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrgKeys","SyncSettings","LogOut","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","AuthRequest","AuthRequestPushNotification","OrganizationUserStatusType","NotificationsService","syncService","connected","inactive","reconnectTimer","urls","subscribe","getNotificationsUrl","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","withHubProtocol","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","min","floor","Organization","canAccess","Confirmed","isManager","Manager","isAdmin","isOwner","canAccessEventLogs","canAccessImportExport","canAccessReports","canCreateNewCollections","canEditAnyCollection","canDeleteAnyCollection","canViewAllCollections","canEditAssignedCollections","canDeleteAssignedCollections","canViewAssignedCollections","canManageGroups","canManageSso","canManageScim","canManagePolicies","canManageUsers","canManageUsersPassword","isExemptFromPolicies","canManageBilling","hasProvider","OrganizationService","getOrganizations","getByIdentifier","setOrganizations","canManageSponsorships","hasOrganizations","PolicyType","EEFLongWordList","GeneratedPasswordHistory","PasswordGeneratorPolicyOptions","defaultType","minLength","useUppercase","useLowercase","useNumbers","numberCount","useSpecial","specialCount","minNumberWords","capitalize","includeNumber","inEffect","DefaultOptions","ambiguous","minNumber","uppercase","minUppercase","lowercase","minLowercase","special","minSpecial","numWords","wordSeparator","PasswordGenerationService","policyService","generatePassword","options","generatePassphrase","sanitizePasswordLength","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcedOptions","enforcePasswordGeneratorPoliciesOnOptions","enforcedPolicyOptions","getPasswordGeneratorPolicyOptions","PasswordGenerator","currentPolicy","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","passwordStrength","userInputs","globalUserInputs","finalUserInputs","normalizeOptions","index","history","array","j","forGeneration","minUppercaseCalc","minLowercaseCalc","minNumberCalc","minSpecialCalc","PolicyData","Policy","PolicyApiService","getPolicy","getPolicies","getPoliciesByToken","getPoliciesByInvitedUser","getPolicyForOrganization","policyType","org","policy","getMasterPasswordPoliciesForInvitedUsers","mapPoliciesFromToken","getMasterPasswordPolicyOptions","putPolicy","MasterPasswordPolicyOptions","minComplexity","requireUpper","requireLower","requireNumbers","requireSpecial","ResetPasswordPolicyOptions","autoEnrollEnabled","ProviderUserStatusType","ProviderUserType","PolicyService","decryptedPolicies","getDecryptedPolicies","diskPolicies","getEncryptedPolicies","setDecryptedPolicies","MasterPassword","evaluateMasterPassword","newPassword","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","policiesResponse","policyAppliesToUser","policyFilter","filteredPolicies","policySet","Accepted","isExcemptFromPolicies","setEncryptedPolicies","MaximumVaultTimeout","Provider","isProviderAdmin","canCreateOrganizations","ProviderAdmin","ProviderService","getProviders","SendType","SearchService","indexing","immediateSearchLocales","defaultSearchableMinLength","searchableMinLength","locale$","locale","registeredPipeline","lunr","Pipeline","registerFunction","normalizeAccentsPipelineFunction","isSearchable","query","normalizeSearchQuery","builder","Builder","pipeline","add","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","searchCiphers","results","isArray","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","searchSends","sendsMatched","lowPriorityMatched","joined","protocolIndex","queryIndex","searchableFields","metadata","includes","normalize","SendFileData","SendTextData","SendData","File","SendFileView","SendTextView","maskedText","SendView","urlB64Key","maxAccessCountReached","expired","pendingDelete","SendFile","SendText","Send","cryptoKey","makeSendKey","SendRequest","fileLength","SendService","setDecryptedSends","fileData","passwordHash","pbkdf2","encryptFileData","parseFile","getEncryptedSends","decSends","getDecryptedSends","sendData","legacyServerSendFileUpload","setEncryptedSends","removePasswordWithServer","SettingsService","_settings","BehaviorSubject","activeAccountUnlocked$","pipe","concatMap","unlocked","getSettings","setEquivalentDomains","getValue","setSettings","TokenService","decoded","fromUrlB64ToUtf8","parse","clientIdClientSecret","setRefreshToken","setClientId","setClientSecret","getApiKeyClientId","getApiKeyClientSecret","setAccessToken","getAccessToken","clearToken","getTokenExpirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","msRemaining","round","minutes","getEmailVerified","email_verified","getName","getIssuer","iss","amr","v1Keys","alwaysShowDock","autoConfirmFingerprints","autoFillOnPageLoadDefault","biometricAwaitingAcceptance","biometricFingerprintValidated","biometricText","biometricUnlock","clearClipboard","collapsedGroupings","convertAccountToKeyConnector","defaultUriMatch","disableAddLoginNotification","disableAutoBiometricsPrompt","disableAutoTotpCopy","disableBadgeCounter","disableChangedPasswordNotification","disableContextMenuItem","disableFavicon","disableGa","dontShowCardsCurrentTab","dontShowIdentitiesCurrentTab","enableAlwaysOnTop","enableAutoFillOnPageLoad","enableBiometric","enableBrowserIntegration","enableBrowserIntegrationFingerprint","enableCloseToTray","enableFullWidth","enableGravatars","enableMinimizeToTray","enableStartToTray","enableTray","encOrgKeys","encPrivate","encProviderKeys","entityId","entityType","installedVersion","keyHash","lastActive","mainWindowSize","minimizeOnCopyToClipboard","neverDomains","noAutoPromptBiometricsText","openAtLogin","passwordGenerationOptions","protectedPin","ssoCodeVerifier","ssoIdentifier","ssoState","stamp","usesConnector","vaultTimeout","rememberedEmail","v1KeyPrefixes","lastSync","partialKeys","StateMigrationService","secureStorageService","stateFactory","needsMigration","currentStateVersion","getCurrentStateVersion","Latest","migrate","migrateStateFrom1To2","Two","migrateStateFrom2To3","Three","migrateStateFrom3To4","Four","authenticatedAccounts","getAuthenticatedAccounts","account","migratedAccount","migrateAccountFrom4To5","setCurrentStateVersion","Five","migrateAccountFrom5To6","Six","clearV1Keys","clearingUserId","keyPrefix","globals","noAutoPromptBiometrics","ssoOrganizationIdentifier","defaultAccount","accountSettings","autoConfirmFingerPrints","enableGravitars","addEditCipherInfo","apiKeyClientSecret","cryptoMasterKeyAuto","cryptoMasterKeyB64","cryptoMasterKeyBiometric","legacyEtmKey","apiKeyClientId","authenticationStatus","everBeenUnlocked","accountActivity","keySuffix","authenticatedUserIds","getGlobals","encryptedOrgKeys","entries","newVersion","OrganizationData","ProviderData","SyncService","collectionService","sendService","providerService","folderApiService","syncInProgress","_sync","sync$","getLastSync","setLastSync","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","shouldUpdate","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setHasPremiumPersonally","setHasPremiumFromOrganization","setForcePasswordReset","eqDomains","SystemService","reloadCallback","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","accounts","getDecryptedPinProtected","cancelProcessReload","executeProcessReload","inactiveMoreThanSeconds","seconds","getLastActive","doRefresh","biometricLockedFingerprintValidated","getBiometricFingerprintValidated","clearInterval","clipboardValue","timeoutMs","getClearClipboard","clearSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","B32Chars","SteamChars","TotpService","getCode","period","alg","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","sign","offset","otp","fullCode","trunc","pow","getTimeInterval","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","signature","TwoFactorProviders","Authenticator","priority","Yubikey","Duo","OrganizationDuo","Email","WebAuthn","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerType","providerPriority","_value","setSelectedProvider","clearProviders","VerificationType","UserVerificationApiService","postAccountVerifyOTP","postAccountRequestOTP","VerifyOTPRequest","OTP","SecretVerificationRequest","UserVerificationService","userVerificationApiService","buildRequest","verification","requestClass","alreadyHashed","validateInput","secret","verifyUser","compareAndUpdateKeyHash","requestOTP","AnonAddyForwarder","generate","anonaddy","redirect","website","DuckDuckGoForwarder","FastmailForwarder","accountId","getAccountId","using","methodCalls","emailPrefix","fastmail","methodResponses","created","notCreated","primaryAccounts","FirefoxRelayForwarder","generated_for","full_address","ForwarderOptions","FastmailForwarderOptions","AnonAddyForwarderOptions","SimpleLoginForwarder","Authentication","note","alias","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","catchallDomain","startString","forwarder","forwarderOptions","forwardedSimpleLoginApiKey","forwardedAnonAddyApiToken","forwardedFirefoxApiToken","forwardedFastmailApiToken","forwardedDuckDuckGoToken","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","VaultTimeoutSettingsService","setVaultTimeoutOptions","action","setVaultTimeout","currentAction","getVaultTimeoutAction","setVaultTimeoutAction","toggleKey","isPinLockSet","getProtectedPin","getEncryptedPinProtected","isBiometricLockSet","getBiometricUnlock","getVaultTimeout","setEverBeenUnlocked","setDecryptedPinProtected","setProtectedPin","DecryptParameters","WebCryptoFunctionService","crypto","subtle","algorithm","iterations","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","hkdf","ikm","outputByteSize","hkdfParams","hkdfExpand","prk","hashLen","infoBuf","infoArr","runningOkmLength","previousT","okm","md","valueBytes","toByteString","update","digest","valueBuf","signingAlgorithm","mac1","mac2","arr1","arr2","getBytes","rand","Uint32Array","putInt32","meta","encKeyByteString","macKeyByteString","parameters","dataBuffer","decipher","finish","rsaEncrypt","rsaParams","rsaDecrypt","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","ext","impPublicKey","rsaGenerateKeyPair","modulusLength","publicExponent","keyPair","generateKey","getRandomValues","buf","BrowserApi","tabsQueryFirst","active","windowId","chrome","windows","WINDOW_ID_CURRENT","currentWindow","tabsQuery","tabs","tab","command","tabSendMessage","sendMessage","runtime","lastError","browser","incognito","onCreated","addListener","getBackgroundPage","getManifest","getViews","extensionPage","onMessage","sender","subscriber","arg","windowType","tabToClose","tabId","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","close","i18n","getUILanguage","location","reload","w","application","connectNative","isChromeApi","permission","getPlatformInfo","isSafariApi","SafariApp","resolveNow","messageId","MAX_SAFE_INTEGER","sendNativeMessage","responseData","BrowserComponentState","BrowserGroupingsComponentState","BrowserSendComponentState","AccountSettings","Account","groupings","sendType","PopupUtilsService","privateMode","inSidebar","inTab","inPopout","inPopup","inPrivateMode","getContentScrollY","scrollingContainer","getElementsByTagName","scrollTop","setContentScrollY","scrollY","popOut","hrefParts","bodyRect","querySelector","getBoundingClientRect","height","closePopup","AutofillScript","documentUUID","script","properties","autosubmit","AutoFillConstants","UsernameFieldNames","PasswordFieldIgnoreList","ExcludedAutofillTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventService","getFormsWithPasswordFields","pageDetails","formData","passwordFields","loadPasswordFields","formKey","forms","formPasswordFields","pf","form","uf","findUsernameField","passwords","doAutoFill","totpPromise","canAccessPremium","getCanAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","fillNewPassword","delay_between_operations","skipLastUsed","frameId","getDisableAutoTotpCopy","Cipher_ClientAutofilled","doAutoFillOnTab","fromCommand","lastLaunchedCipher","totpCode","doAutoFillActiveTab","getActiveTab","getTabFromCurrentWindow","filledFields","fieldNames","hasValue","opid","viewable","tagName","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","setFillScriptForFocus","passwordFieldsForForm","passField","elementNumber","fieldIsFuzzyMatch","fillFields","forCustomFieldsOnly","isExcludedType","attr","isFieldMatch","makeScriptAction","selectInfo","siOptions","option","fieldAttrsContain","maxLength","colonIndex","fullMonth","fullYear","partYear","makeScriptActionWithValue","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","excludedTypes","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","valueIsLikePassword","cleanedValue","readonly","htmlID","htmlName","placeholder","autoCompleteType","passwordField","withoutForm","usernameField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","property","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","BrowserEnvironmentService","urlsSubject","scimUrl","activeAccount$","setUrlsFromStorage","notificationsUrl","getWebVaultUrl","webVaultUrl","getSendUrl","getIconsUrl","iconsUrl","identityUrl","eventsUrl","getScimUrl","getEnvironmentUrls","envUrls","setUrls","formatUrl","scim","setEnvironmentUrls","getUrls","isCloud","hasManagedEnvironment","getManagedEnvironment","settingsHaveChanged","env","storage","managed","setUrlsToManagedEnvironment","BaseEncryptedOrganizationKey","EncryptedOrganizationKey","ProviderEncryptedOrganizationKey","toData","providerKey","getProviderKey","CryptoService","platformUtilService","setCryptoMasterKey","storeKey","setDecryptedCryptoSymmetricKey","setEncryptedCryptoSymmetricKey","encPrivateKey","setDecryptedPrivateKey","setEncryptedPrivateKey","orgs","providerOrgs","encOrgKeyData","setDecryptedOrganizationKeys","setEncryptedOrganizationKeys","setDecryptedProviderKeys","setEncryptedProviderKeys","inMemoryKey","getCryptoMasterKey","symmetricKey","getKeyFromStorage","retrieveKeyFromStorage","validateKey","clearSecretKeyStore","getKeyHash","storedKeyHash","localKeyHash","serverKeyHash","ServerAuthorization","getEncKey","getEncKeyHelper","getPublicKey","inMemoryPublicKey","getPrivateKey","setPublicKey","decryptedPrivateKey","getDecryptedPrivateKey","getEncryptedPrivateKey","getFingerprint","keyFingerprint","userFingerprint","hashPhrase","getOrgKeys","decryptedOrganizationKeys","getDecryptedOrganizationKeys","getEncryptedOrganizationKeys","encOrgKey","fromData","decOrgKey","orgKeys","getProviderKeys","decryptedProviderKeys","getDecryptedProviderKeys","getEncryptedProviderKeys","Biometric","getCryptoMasterKeyAuto","hasCryptoMasterKeyBiometric","hasEncKey","getEncryptedCryptoSymmetricKey","clearKey","clearSecretStorage","clearStoredKey","setCryptoMasterKeyAuto","setCryptoMasterKeyBiometric","clearKeyHash","clearEncKey","memoryOnly","clearKeyPair","keysToClear","clearOrgKeys","clearProviderKeys","clearPinProtectedKey","setEncryptedPinProtected","clearKeys","makeKeyFromPin","pin","protectedKeyCs","pinProtectedKey","pinKey","makeShareKey","shareKey","stretchKey","keyMaterial","sendKey","hashPurpose","theKey","buildEncKey","remakeEncKey","privateKeyValue","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","keyForEnc","encBuffer","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","shouldStoreKey","supportsSecureStorage","getCryptoMasterKeyBiometric","newKey","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","mod","divide","encKeyEnc","getDecryptedCryptoSymmetricKey","decEncKey","encKeyCipher","symmetricCryptoKey","BrowserCryptoService","authenticateBiometric","ClientType","AbstractChromeStorageService","chromeStorageApi","keyedObj","BrowserLocalStorageService","local","BrowserMessagingService","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","DialogPromiseExpiration","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","showDialogResolves","passwordDialogResolves","deviceCache","FirefoxExtension","opr","addons","OperaExtension","EdgeExtension","VivaldiExtension","ChromeExtension","SafariExtension","Browser","isFirefox","isChrome","isEdge","isOpera","isVivaldi","isSafari","isIE","isMacAppStore","isViewOpen","isPopupOpen","sidebarView","sidebarViewName","lockTimeout","createNewTab","PublicKeyCredential","showToast","showDialog","confirmText","cancelText","bodyIsHtml","dialogId","html","doc","clearMs","sendMessageToApp","clipboard","writeText","clipboardData","setData","queryCommandSupported","textarea","textContent","style","position","appendChild","select","execCommand","removeChild","readText","focus","resolveDialogPromise","confirmed","resolvePasswordDialogPromise","canceled","resolveObj","tryResolve","supportsBiometric","os","getBrowserInfo","sidebarAction","StorageLocation","State","buildAccountMapFromJSON","jsonAccounts","DDG_SHARED_KEY","memoryStorageService","stateMigrationService","useAccountCache","activeAccountSubject","activeAccountUnlockedSubject","hasBeenInited","isRecoveredSession","accountDiskCache","setState","createGlobals","initAccountState","updateState","syncAccountFromDisk","storedActiveUser","activeUserId","pushAccounts","diskAccount","getAccountFromDisk","setAccountEnvironmentUrls","scaffoldNewAccountStorage","setLastActive","setActiveUser","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getTimeoutBasedStorageOptions","getAccount","saveAccount","getAddEditCipherInfo","setAddEditCipherInfo","getAlwaysShowDock","defaultOnDiskOptions","setAlwaysShowDock","saveGlobals","getAutoConfirmFingerPrints","setAutoConfirmFingerprints","setAutoFillOnPageLoadDefault","getBiometricAwaitingAcceptance","setBiometricAwaitingAcceptance","setBiometricFingerprintValidated","getBiometricText","setBiometricText","setBiometricUnlock","getHasPremiumPersonally","getHasPremiumFromOrganization","hasPremiumFromOrganization","defaultOnDiskLocalOptions","setClearClipboard","getCollapsedGroupings","setCollapsedGroupings","nextValue","defaultSecureStorageOptions","saveSecureStorageKey","getCryptoMasterKeyB64","setCryptoMasterKeyB64","recordToMap","mapToRecord","setDefaultUriMatch","getDisableAddLoginNotification","setDisableAddLoginNotification","getDisableAutoBiometricsPrompt","setDisableAutoBiometricsPrompt","setDisableAutoTotpCopy","getDisableBadgeCounter","setDisableBadgeCounter","getDisableChangedPasswordNotification","setDisableChangedPasswordNotification","getDisableContextMenuItem","setDisableContextMenuItem","getDisableFavicon","setDisableFavicon","getDisableGa","setDisableGa","getDontShowCardsCurrentTab","setDontShowCardsCurrentTab","getDontShowIdentitiesCurrentTab","setDontShowIdentitiesCurrentTab","getDuckDuckGoSharedKey","setDuckDuckGoSharedKey","setEmail","getEnableAlwaysOnTop","accountPreference","globalPreference","setEnableAlwaysOnTop","getEnableAutoFillOnPageLoad","setEnableAutoFillOnPageLoad","getEnableBiometric","enableBiometrics","setEnableBiometric","getEnableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","getEnableCloseToTray","setEnableCloseToTray","getEnableDuckDuckGoBrowserIntegration","enableDuckDuckGoBrowserIntegration","setEnableDuckDuckGoBrowserIntegration","getEnableFullWidth","setEnableFullWidth","getEnableGravitars","setEnableGravitars","getEnableMinimizeToTray","setEnableMinimizeToTray","getEnableStartToTray","setEnableStartToTray","getEnableTray","setEnableTray","defaultOnDiskMemoryOptions","getEncryptedFolders","setEncryptedFolders","getEntityId","setEntityId","getEntityType","setEntityType","getGlobalEnvironmentUrls","getEquivalentDomains","getForcePasswordReset","getInstalledVersion","setInstalledVersion","getKdfIterations","setKdfIterations","getKdfType","setKdfType","getLocale","setLocale","getMainWindowSize","setMainWindowSize","getMinimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","getNoAutoPromptBiometrics","setNoAutoPromptBiometrics","getNoAutoPromptBiometricsText","setNoAutoPromptBiometricsText","getOpenAtLogin","setOpenAtLogin","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","getRememberedEmail","setRememberedEmail","getSsoCodeVerifier","setSsoCodeVerifier","getSsoOrgIdentifier","setSsoOrganizationIdentifier","getSsoState","setSsoState","getTheme","setTheme","accountVaultTimeoutAction","globalVaultTimeoutAction","getStateVersion","setStateVersion","getWindow","setWindow","setServerConfig","getServerConfig","useMemory","storageLocation","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","useSecureStorage","getAccountFromMemory","getUserIdFromMemory","cachedAccount","Memory","Both","Disk","saveAccountToMemory","saveAccountToDisk","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","pruneInMemoryAccounts","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","timeoutAction","deserializer","stateUpdater","updatedState","fromEntries","withPrototype","converter","originalResult","getOwnPropertyDescriptors","withPrototypeForArrayMembers","memberConstructor","memberConverter","withPrototypeForObjectValues","valuesConstructor","valuesConverter","StateService","getFromSessionMemory","getBypassCache","setInSessionMemory","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserCipherComponentState","setBrowserCipherComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","SessionSyncer","behaviorSubject","metaData","ignoreNextUpdate","ctor","initializer","manifest_version","observe","listenForUpdates","updateSession","messageListener","updateMessageCommand","updateFromMessage","itemBuilder","initializeAsArray","keyValuePair","sessionKey","sessionSync","buildOptions","__syncedItemMetadata","FolderService","_folders","_folderViews","updateObservables","getAllDecryptedFromState","decryptFolders","updates","cId","decryptFolderPromises","decryptedFolders","noneFolder","__sessionSyncers","buildSyncer","syncer","I18nService","systemLanguage","localesDirectory","getLocalesJson","_locale","ReplaySubject","supportedTranslationLocales","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","translate","messagesObj","formattedLocale","locales","placeholders","placeProp","content","replaceToken","replaceContent","getMessage","KeyGenerationService","makeEphemeralKey","numBytes","BrowserMemoryStorageService","session","LocalBackedSessionStorageService","keyGenerationService","localStorage","sessionStorage","getLocalSession","getSessionEncKey","sessionEncKey","localSession","setLocalSession","sessionJson","setSessionEncKey","setEncryptedLocalSession","setDecryptedLocalSession","jsonSession","encSession","storedKey","input","VaultFilter","selectedCollection","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","cipherType","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","buildFilter","cipherPassesFilter","DynamicTreeNode","hasId","fullList","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildNestedFolders","transformation","storedFolders","orgCiphers","oc","nestedFolders","getAllFoldersNested","nestedList","mergeMap","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","PersonalOwnership","folderCopy","getFolderNested","VaultFilterService","vaultFilter","allVaults","myVault","getVaultFilter","setVaultFilter","filterCipherForSelectedVault","VaultTimeoutService","vaultTimeoutSettingsService","lockedCallback","loggedOutCallback","startCheck","checkVaultTimeout","shouldLock","executeTimeoutAction","lock","pinSet","authStatus","vaultTimeoutSeconds","checkSafari","CommandsBackground","main","passwordGenerationService","vaultTimeoutService","processCommand","commandToRetry","commands","onCommand","generatePasswordToClipboard","autoFillLogin","openPopup","getTabFromCurrentWindowId","retryMessage","tabSendMessageData","collectPageDetailsForContentScript","ContextMenusBackground","noopCommandSuffix","contextMenus","onClicked","menuItemId","getClickedElement","parentMenuItemId","cipherAction","startAutofillPage","Cipher_ClientCopiedPassword","totpValue","loginToAutoFill","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","newState","onStateChanged","setDetectionInterval","pollIdle","handler","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","connect","port","connecting","connectedCallback","disconnect","sharedSecret","validatingFingerprint","showFingerprintDialog","showWrongUserDialog","onDisconnect","timestamp","postMessage","encryptMessage","secureCommunication","getResponse","rawMessage","abs","processMessage","sendUnencrypted","fingerprint","NotificationQueueMessageType","NotificationBackground","autofillService","notificationQueue","cleanupNotificationQueue","getDataForTab","responseCommand","addLogin","changedPassword","removeTabFromNotificationQueue","saveOrUpdateCredentials","saveNever","checkNotificationQueue","doNotificationQueueCheck","currentTab","expires","tabDomain","AddLogin","typeData","isVaultLocked","wasVaultLocked","ChangePassword","loginInfo","loginDomain","normalizedUsername","disabledAddLogin","allowPersonalOwnership","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","queueMessage","changePasswordMessage","getDecryptedCipherById","updateCipher","createNewCipher","addLoginMessage","loginModel","newCipher","RuntimeBackground","systemService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","onInstalled","reason","checkOnInstalled","backgroundMessageListener","isPrivateMode","bitwardenBackgroundMessageListener","closeLoginTab","focusSpecifiedTab","setIcon","refreshBadgeAndMenu","logout","reseedStorage","autofillTimeout","autofillPage","vaultUrl","referrer","tabToAutoFill","TabsBackground","notificationBackground","onFocusChanged","focusedWindowId","onActivated","activeInfo","onReplaced","addedTabId","removedTabId","onReplacedRan","onUpdated","changeInfo","onUpdatedRan","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","requestId","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","MainBackground","backgroundWindow","menuOptionsLoaded","nativeMessagingBackground","policyApiService","vaultFilterService","that","backgroundMessagingService","containerService","auditService","exportService","popupUtilsService","userVerificationService","forceWindowReload","commandsBackground","tabsBackground","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","actionSetIcon","browserAction","onWindowCreated","suffix","forLocked","menuDisabled","contextMenusRemoveAll","buildContextMenu","loadMenuAndUpdateBadgeForNoAccessState","contextMenuReady","buildingContextMenu","contextMenusCreate","contexts","parentId","contextMenuEnabled","loadMenuAndUpdateBadge","actionSetBadgeBackgroundColor","loadLoginContextMenuOptions","theText","loadNoLoginsContextMenuOptions","sidebarActionSetBadgeText","browserActionSetBadgeText","getActiveTabs","loadContextMenuOptions","noLoginsMessage","idSuffix","sanitizeContextMenuTitle","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","removeAll","theAction","setBadgeBackgroundColor","setBadgeText","setTitle","NoopEventService","AutoFillActiveTabCommand","doAutoFillActiveTabCommand","collectPageDetails","onCommandListener","doAutoFillLogin","platformUtils","factory","cachedServices","opts","instance","alwaysInitializeNewService","instanceOrPromise","doNotStoreInitializedService","logServiceFactory","logServiceOptions","cryptoFunctionServiceFactory","cryptoFunctionServiceOptions","diskStorageServiceFactory","secureStorageServiceFactory","memoryStorageServiceFactory","encryptServiceOptions","encryptServiceFactory","keyGenerationServiceFactory","stateServiceFactory","service","stateMigrationServiceOptions","stateMigrationServiceFactory","stateServiceOptions","environmentServiceFactory","bitwardenMain","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","definition","defineProperty","enumerable","globalThis","Function","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}