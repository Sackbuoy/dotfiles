Okta.StorageMultiAccount=function(o){var t={},c=Okta.Q,i=Okta._okta,u=i.find,a=i.partial,r=i.map,f=Okta.fn.base.orDefault,l=Okta.fn.promises.composeP,e=!1,A=-1,d=[];function s(t){return"setAcc"+t}function g(t){return"getAcc"+t}function k(t){return"removeAcc"+t}function m(t,n){return 0<=n?t+"_"+n:t}function p(t,n,u,e){return t(m(n,u),e)}function y(t){if(!e)return-1;var n=u(t,function(t){return t.isCurrentAccount});return n?n.index:-1}function M(u,e){return o.getAllowListedOktaAccounts().then(function(t){var n=r(t,function(n){return n.index<0?c():u(m(e,n.index)).then(function(t){return{data:t,account:n}})});return c.all(n)})}return t.makeMultiAccountKey=function(u){return function(t,n){return u(m(t,A),n)}},t.addMultiAccountMethods=function(t,n,u){var e=t.set,c=t.get,r=t.remove;d.push(n),o[g(n)]=l(f(u.def),a(p,c,u.key)),o[s(n)]=a(p,e,u.key),o["getAll"+n]=a(M,c,u.key),o[k(n)]=r?a(p,r,u.key):a(p,e,u.key,i,u.def===undefined?null:u.def)},t.getCurrentAccountIndex=function(){return A},t.setCurrentAccountIndex=function(t){A=t},t.setAllowListedOktaAccounts=function(t){A=y(t)},t.readMultiAccount=function(){return c.all([o.getDBGPluginSettings(),o.getAllowListedOktaAccounts()]).spread(function(t,n){e=t&&t.multiAccountAwarePlugin,A=y(n)})},t.clearAccountData=function(n){return c.all(r(d,function(t){return o[k(t)](n)}))},t.copyMultiAccountData=function(n,u){return c.all(r(d,function(t){return function e(t,n,u){return o[g(t)](n).then(a(o[s(t)],u))}(t,n,u)}))},t.migrateToMultiAccount=function(){return t.copyMultiAccountData(-1,t.getCurrentAccountIndex()).then(a(t.clearAccountData,-1))},t.migrateToSingleAccount=function(){return t.copyMultiAccountData(t.getCurrentAccountIndex(),-1).then(a(t.clearAccountData,t.getCurrentAccountIndex()))},t};