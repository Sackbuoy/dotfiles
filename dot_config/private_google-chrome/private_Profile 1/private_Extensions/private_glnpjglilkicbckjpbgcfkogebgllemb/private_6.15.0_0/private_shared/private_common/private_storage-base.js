Okta.StorageBase=function(t,e){var s={},r=Okta.StorageMultiAccount(s),a=Okta._okta,i=a.partial,n=a.each,l=Okta.fn.base.keyToCamelCase,A=Okta.fn.base.orDefault,g=Okta.fn.promises.composeP,d={Session:{get:t.getSessionState,set:t.setSessionState},Persistent:{get:t.getPersistentState,set:t.setPersistentState,remove:t.removePersistentState},Tab:{get:t.getTabState,set:t.setTabState,update:t.updateTabState}};n(e,function(t){!function u(t){var e=d[t.type];if(e){var a=t.name||l(t.key),n=e.set,c=e.get,o=e.update;n&&c&&(t.multiAccount&&(r.addMultiAccountMethods(e,a,t),n=r.makeMultiAccountKey(e.set),c=r.makeMultiAccountKey(e.get)),s["get"+a]=g(A(t.def),i(c,t.key,undefined)),s["set"+a]=i(n,t.key),s["clear"+a]=i(n,t.key,t.def),o&&(s["update"+a]=i(o,t.key)))}else Log.warn("StorageBase::not supported storage type: "+t.type)}(t)});var c=s.setAllowListedOktaAccounts;return s.setAllowListedOktaAccounts=function(t){return r.setAllowListedOktaAccounts(t),c&&c(t)},s.readMultiAccount=r.readMultiAccount,s.getCurrentAccountIndex=r.getCurrentAccountIndex,s.setCurrentAccountIndex=r.setCurrentAccountIndex,s.clearAccountData=r.clearAccountData,s.copyMultiAccountData=r.copyMultiAccountData,s.migrateToMultiAccount=r.migrateToMultiAccount,s.migrateToSingleAccount=r.migrateToSingleAccount,s};